{"version":3,"sources":["components/playermanual/Experience.tsx","components/playermanual/MakeCharacter.tsx","components/playermanual/Combat.tsx","components/equipment/Firearms.ts","components/equipment/MeleeWeapons.ts","components/equipment/Armors.ts","components/playermanual/Equipment.tsx","components/playermanual/Wealth.tsx","components/vehicles/Vehicles.ts","components/vehicles/LandVehicles.ts","components/vehicles/WaterVehicles.ts","components/vehicles/SpaceVehicles.ts","components/vehicles/AirVehicles.ts","components/playermanual/Vehicles.tsx","components/playermanual/CharacterSheetOverview.tsx","components/playermanual/CarryingCapacity.tsx","components/playermanual/CharacterSize.tsx","components/playermanual/Radiation.tsx","components/playermanual/Consumables.tsx","components/playermanual/Cybernetics.tsx","views/PlayerManual.tsx","components/playermanual/Section.tsx","components/general/Indexer.tsx","components/Lore/CharacterRoller.tsx","components/general/Ellipsis.tsx"],"names":["MakeCharacter","Section","title","CharacterRoller","Combat","Indexer","Firearms","useCases","map","uc","name","attribute","description","undefined","results","r","AmmoTypesInformation","ammo","cost","weight","types","fireArmClass","damage","range","strengthRequirement","capacity","fireAction","armorpiercing","value","hitbonus","rps","splashRange","lowDamageZone","MeleeWeapons","size","bodySuits","damageAbsorbtion","agilityMod","armorType","armorPlates","powerArmors","perceptionMod","strengthMod","armorThSizeWide","width","ArmorTable","armors","style","bs","armor","ArmorRow","useState","descriptionOpen","setDescriptionOpen","extra","pa","onClick","colSpan","Ellipsis","text","cutOff","getSizeMod","getProtectionMod","n","ArmorCrafter","bodySuit","setBodySuit","armorPlate","setArmorPlate","powerArmor","setPowerArmor","qualityMod","setQualityMod","setSize","protectionAmount","setProtectionAmount","defense","protectionAmountActual","Math","max","getQualityMod","onChange","e","find","f","target","selected","ap","parseInt","className","weightConverter","grams","toFixed","WeaponTable","data","s","borderLeft","weapon","FirearmTable","FireArmRow","firearmRowStyle","cursor","getAmmoInfo","c","a","Error","join","AmmoTable","Equipment","Roll1D100","floor","random","WealthRoller","firstD100","setFirstD100","secondD100","setSecondD100","WealthCalculator","age","setAge","multiplier","setMultiplier","credits","type","parseFloat","Wealth","costLevels","counter","cl","rank","nextRanks","Array","from","x","index","innerCounter","innerSummer","push","CostChart","nr","Experience","Electricity","Synthoil","RocketFuel","TritiumDeuterium","HyperMatter","MicroFusionCell","weightKg","input","output","convertionRatio","convertionSpeed","MicroFusionThruster","fuelUse","fuelUnitsConsumeRate","impulseKn","SmallHabitatSection","passengerCount","cargoPerPerson","isEnclosed","isLivingSpace","meterSquarePerPerson","LandVehicles","medium","passengers","cargoKg","fuelType","topSpeed","acceleration","parts","WaterVehicles","SpaceVehicles","airVehicleParts","rollAmounts","numberOf1d100","sidesPerDice","airVehicleDamageTexts","damageAmountNumber","damageText","AirVehicles","RollOMeter","partsList","amountList","damageAmounts","currentRolls","setCurrentRolls","p","i","partN","dmg","currentParts","setCurrentParts","spacing","length","amount","rolls","v","d100","temp","forEach","rollAmount","das","filter","da","convertNumberToText","landVehicleParts","waterVehicleParts","spaceVehicleParts","VehicleTable","vehicles","setVehicleToEdit","onSelect","vehicle","costConverter","kg","VehicleRow","isOpen","setIsOpen","m","Vehicles","CharacterSheetOverview","shortWidth","CarryingCapacity","currentWeight","setCurrentWeight","cargoWeight","setCargoWeight","strength","setStrength","previousGravity","setPreviousGravity","currentGravity","setCurrentGravity","weightFactor","strengthFactor","penalty","str","ar","tdWidth","borderBottom","CharacterSize","Radiation","Consumables","Food","Cooking","u","Medicine","tools","uses","Tools","tool","Weapons","Cybernetics","RollingSkills","HealthAndRest","SpellRoller","props","setRolls","DRollNot","SpellsPerks","numbers","Roll","PlayerManual","key","tab","border","children","usePersistentState","tabSize","paddingLeft","Indexed","source","href","id","anyChildren","indexedItems","child","js","characterData","setCharacterData","rollCharacterData","cd","sumN","endurance","agility","perception","intelligence","willpower","reduce","b","dice","setter","charData","roll","numberOfDice","sides","getStrengthHuman","getAgilityHuman","getEnduranceHuman","getPerceptionHuman","getIntelligenceHuman","getWillpowerHuman","CharacterRollerHuman","Character","CharacterPointsHuman","ExperienceMultiplerHuman","isEdit","txt","explain","getStrengthShambra","getAgilityShambra","getEnduranceShambra","getPerceptionShambra","getIntelligenceShambra","getWillpowerShambra","CharacterRollerShambra","CharacterPointsShambras","ExperienceMultiplerShambras","getStrengthMerlion","getAgilityMerlion","getEnduranceMerlion","getPerceptionMerlion","CharacterRollerMerlion","CharacterPointsMerlion","ExperienceMultiplerMerlion","getStrengthNekovian","getAgilityNekovian","getEnduranceNekovian","getPerceptionNekovian","getIntelligenceNekovian","CharacterRollerNekovian","CharacterPointsNekovian","ExperienceMultiplerNekovian","cursorStyle","substring"],"mappings":"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","file":"static/js/4.71fcd413.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Section from \"./Section\";\r\n\r\n\r\nconst Experience: React.FC = () => {\r\n    return <Section title='Character points and Experience'>\r\n        <p>To increase skills, base stats, buy perks and traits you spend character points, your starting character points depend on your species and starting age. Older characters start with more experience, younger characters have a high experience multiplier which allows them to gain character points faster.</p>\r\n        <h4>Cost</h4>\r\n        <p>The cost of increasing a skill is equal to the amount you increase to per step. For example if you have 4 ranks and wish to increase to 6 it costs 11, because you must first increase to 5 and then to 6. 5 + 6 = 11<br />\r\n        Please consult the following chart when increasing multiple steps</p>\r\n        <CostChart />\r\n\r\n        <p>To gain experience your character needs practice. You gain experience points in a skill when you use it and it fulfills <i>any</i> of the following conditions:</p>\r\n        <ul>\r\n            <li>The chance to fail is at least 50% (your dice roll needs to be at least 11 or higher)</li>\r\n            <li>You are in a dangerous situation and failure is likely to result in harm</li>\r\n            <li>You are actively being tutored by someone who has at least 2 ranks higher in said skill</li>\r\n        </ul>\r\n        <p>You can only gain 1 experience point per day, if you gain experience in multiple skills then you choose which</p>\r\n        <p>Experience multipler is applied to the maximum amount you may get, but you always only get 1 per skill, so if you hav a multipler of 2 then you can choose two skills that you qualify for</p>\r\n        <p>If the experience multipler is a fractional number then the experienced gained is carried over to the next day, but only if you get it.\r\n            <br />\r\n            For example you have multiplier of 1.5, you gain experience in 2 skills on day 1, at the end of day 1 you may choose which of the two you gain a point in.<br />\r\n            On day 2 the 0.5 surplus carries over and you have 2 possible on this day. One of which has to be the other skill you didn't choose.\r\n        </p>\r\n    </Section>\r\n}\r\nconst max = 21;\r\n\r\ninterface CostLevel {\r\n    rank: number;\r\n    nextRanks: number[];\r\n}\r\n\r\nconst costLevels: CostLevel[] = [];\r\n\r\nfor (let counter = 0; counter < max; counter++) {\r\n    const cl = {\r\n        rank: counter,\r\n        nextRanks: Array.from(Array(max - 1), (x, index) => 0),\r\n    };\r\n    for (let innerCounter = counter; innerCounter < max - 1; innerCounter++) {\r\n        cl.nextRanks[innerCounter] = innerCounter + 1;\r\n        for (let innerSummer = innerCounter; innerSummer < max - 1; innerSummer++) {\r\n            if (innerSummer === 0) continue;\r\n            cl.nextRanks[innerSummer] += cl.nextRanks[innerSummer - 1];\r\n        }\r\n    }\r\n    costLevels.push(cl);\r\n}\r\n\r\n\r\nconst CostChart: React.FC = () => {\r\n    return <table className=\"th20\">\r\n        <thead>\r\n            <tr>\r\n                <th>from/to</th>\r\n                {costLevels.map(r => r.rank !== 0 ? <th>{r.rank}</th> : null)}\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {costLevels.map(cl => cl.rank !== 20 ? <tr>\r\n                <td>{cl.rank}</td>\r\n                {cl.nextRanks.map(nr => <td>{nr !== 0 ? nr : '-'}</td>)}\r\n            </tr> : null)}\r\n        </tbody>\r\n    </table>\r\n}\r\n\r\nexport default Experience;","import Section from \"./Section\";\r\nimport React from \"react\";\r\nimport { CharacterRollerHuman, CharacterRollerShambra, CharacterRollerMerlion, CharacterRollerNekovian } from \"../Lore/CharacterRoller\";\r\n\r\nconst MakeCharacter: React.FC = () => {\r\n    return <Section title='How to make a character'>\r\n\r\n        <Section title='Human dice roller'><CharacterRollerHuman /></Section>\r\n        <Section title='Shambra dice roller'><CharacterRollerShambra /></Section>\r\n        <Section title='Merlion dice roller'><CharacterRollerMerlion /></Section>\r\n        <Section title='Nekovian dice roller'><CharacterRollerNekovian /></Section>\r\n\r\n        <h3>Step 1 - concept</h3>\r\n        <h4>Roll attributes</h4>\r\n        <p>The absolute first step is to roll your base attributes, strength, agility, endurance, perception, intelligence, willpower</p>\r\n        <i>When you see something like \"2d8\" the first number indicates the number of dice, in this case 2, the latter number indicates the number of sides, in this case two 8 sided dice, the result added up</i>\r\n        <p>Depending on your final age and species you will have different dice roll (see world and lore -{\">\"} your species -{\">\"} playing as your species for precise information)</p>\r\n        <p>Roll the dice for each attribute in 3 sets, you may pick one of these three complete sets</p>\r\n        <p>You may choose to make the dice \"safe\" by going down 2 size and then add a flat +1 to the final number (1d10 -{\">\"} 1d8), the average is the same but distance is lower</p>\r\n        <p>The first step is conceptual and mostly abstract, but will feed into the next steps. Begin by answering at least all of these questions.</p>\r\n        <h4>Where was my character born?</h4>\r\n        <h4>How old is my character currently?</h4>\r\n        <h4>What kind of upbringing did my character have?</h4>\r\n        <h4>How does my character's upbringing bias my character's point of view?</h4>\r\n        <h4>What major events happened in my characters life?</h4>\r\n        <h4>How did those events shape my characters personality?</h4>\r\n        <h4>What lessons and skills did my character learn from that?</h4>\r\n        <p>There may be more questions you want to ask depending on your answers.</p>\r\n        <h3>Step 2 - outlining your character</h3>\r\n        <p>Based on the answer in step 1...</p>\r\n        <h4>Adjust your age</h4>\r\n        <p>The older you start at the more character points (applicable experience) you start with.</p>\r\n        <p>Finally the younger you are the bigger your multiplier, whenever you gain character points in game you multiply them by this.</p>\r\n\r\n        <h4>Select between 2 and 4 \"main skills\" and as many additional secondary skills as you need.</h4>\r\n        <p>You'll want to put points into your main skills, note that the cost increases rapidly.\r\n        The cost for each step is what you have + 1\r\n    Save some character points for perks</p>\r\n        <p>Also notice that your attributes play a part in your skill total,\r\n        for example pilot is a perception skill,\r\n    when you roll for pilot you roll 2d10 + pilot + perception</p>\r\n        <h3>Step 3 - choose your perks</h3>\r\n        <p>Perks are specializations, they either grant new capabilities under a skill or make a specific skill usage more powerful/likely to succeed (skills have multiple uses)</p>\r\n        <p>Note that perks often come with skill requirements, and for skills that you don't put points into are often not worth taking.</p>\r\n\r\n    </Section>;\r\n}\r\n\r\nexport default MakeCharacter;","import Section from \"./Section\";\r\nimport React from \"react\";\r\nimport Indexer, { Indexed } from \"../general/Indexer\";\r\nimport Firearms from \"../skills/firearms\";\r\n\r\nconst Combat: React.FC = () => {\r\n    return <Section title='Combat'>\r\n\r\n        <Indexer title='combat'>\r\n            <Indexed title='Combat start'>\r\n                <p>Combat starts when one group or individual assaults another group or individual, depending on whether the assault is an ambush or not.</p>\r\n                <h5>Sequence</h5>\r\n                <p>Sequence is the order turns, it is rolled at the start of the first turn. Your sequence is 2d10 + perception + agility + modifier. Modifiers can come from perks, traits and the situation</p>\r\n                <p>If one side has exceptionally high sequence then members of that team can get one free action on the first turn. To get this they must exceed their enemies highest sequence by 20.</p>\r\n                <p>Some actions can be done in response to actions done to you, such as active dodging and blocking. If however you've already spent your action then to dodge or block you must forgo your next turn and take a -4 sequence penalty</p>\r\n                <h5>Ambush</h5>\r\n                <p>An ambush is defined by whether the defender knows the attack is coming.</p>\r\n                <p>If it is an unseen ambush (the defenders are not aware of the attackers) the attackers gain +20 on their sequence</p>\r\n                <p>If it is a surprise attack (the defender are aware of the attacker but did not expect to be attacked) the attackers gain +10 on their sequence</p>\r\n                <p>If the defenders know they are going to be attacked then there is no modifier</p>\r\n                <h5>Counter-ambush</h5>\r\n                <p>If the defenders know they are going to be attacked and stand prepared for it but the attackers don't know that they know the defenders gain a +10 on their sequence</p>\r\n            </Indexed>\r\n            <Indexed title='Turns'>\r\n                <p>Each turn starts with the characters performing one action in order of highest sequence to lowest</p>\r\n            </Indexed>\r\n            <Indexed title='Dodging and passive defense'>\r\n                <p>Passive defense is the number that your enemy is required to hit to hit you in combat</p>\r\n                You have a passive defense of 10 when:\r\n                <ul>\r\n                    <li>You don't see the attack, or</li>\r\n                    <li>You are doing something that requires concentration, or</li>\r\n                    <li>You are doing something that requires stillness</li>\r\n                    <li>You are immobilized</li>\r\n                </ul>\r\n                You have a passive defense of 10 + agility + your lowest combat or acrobatics when:\r\n                <ul>\r\n                    <li>You can see the attack coming</li>\r\n                </ul>\r\n                If you have a passive dodge you may choose to do an active dodge.\r\n                <ul>\r\n                    <li>An active dodge gives you Acrobatics (active dodge) + Agility + 2d10</li>\r\n                    <li>This applies to ALL incoming attacks</li>\r\n                    <li>You can activate this at any time, so long as you have not acted yet</li>\r\n                    <li>If you have already acted this turn you may \"borrow\" your next turn's action, your next turn is then spent</li>\r\n                </ul>\r\n            </Indexed>\r\n            <Indexed title='Armor and damage reduction'>\r\n                <p>Armor gives you damage reduction, this damage reduction is always applied before damage multipliers and after damage reducers. Damage calculation is always calculated to the maximum benefit of the wearer of the armor.</p>\r\n            </Indexed>\r\n            <Indexed title='Bleeding'>\r\n                <p>Bleeding occurs when you are severely damaged, if you take 10 points of damage from a single blow or any damage while below 0 (only excluding damage from bleeding).</p>\r\n                <p>Level of bleeding depends on your life, if you are above 0 then you only take light bleeding. Between -100% and 0 results in intermediate. Below 100% results in heavy bleeding. Below 200% results in death.</p>\r\n                <ul>\r\n                    <li>Light bleeding deals 1 damage every 10 minutes, lasts 1d100 minutes (round to nearest 10x)</li>\r\n                    <li>Intermediate bleeding deals 1 damage every 5 minute, lasts 1d100 minutes</li>\r\n                    <li>Heavy bleeding deals 1 damage every 4 turns, lasts until character bleeds out or has first aid performed on them.</li>\r\n                </ul>\r\n            </Indexed>\r\n            <Indexed title='Melee attacking'>\r\n                <p>A melee attack is anything from a punch to a cut with a sword. You roll 2d10 + Combat (skill), if the roll is equal or exceeds the targets defense then you hit</p>\r\n                <h5>Overextend</h5>\r\n                <p>Some enemies may be extremely difficult to hit, once a turn you may overextend your attack, you can add up to as much as +10 to your attack roll but this leaves you open to counter attacks, you take twice negative on all skill rolls and passives until it's your turn again</p>\r\n                <h5>Flanking</h5>\r\n                <p>When a target is flanked (facing more than one melee combatant) the attackers will gain bonus to hit equal to the number of flankers x2. This does not apply if they are flanked too.</p>\r\n                <h5>Two weapon fighting</h5>\r\n                <p>When you are using two melee weapons you may make one second attack immediately after the first on the same target. This attack does not benefit from your agility bonus to hit or strength bonus to damage. The second weapon must be a light weapon if your strength is 6 or less.\r\n                    If you use multiple attacks option with two weapons only the first attack gets a bonus attack from the off-hand weapon, multi-attack penalty applies to off-hand weapon.\r\n                </p>\r\n            </Indexed>\r\n            <Indexed title='Multiple attacks'>\r\n                <p>Characters may do more than two or more consecutive attacks in certain circumstances. Only applies to combat rolls. Additional attacks may be reserved for blocking, unused blocks can not be converted into attacks when it is not your turn.</p>\r\n                <ul>\r\n                    <li><b>2 attacks</b>: requires 6 or higher  combat. Take -3 penalty to all attacks</li>\r\n                    <li><b>3 attacks</b>: requires 12 or higher combat. Take -6 penalty to all attacks</li>\r\n                    <li><b>4 attacks</b>: requires 18 or higher combat. Take -9 penalty to all attacks</li>\r\n                    <li><b>5 attacks</b>: requires 24 or higher combat. Take -12 penalty to all attacks</li>\r\n                    <li><b>6 attacks</b>: requires 30 or higher combat. Take -15 penalty to all attacks</li>\r\n                </ul>\r\n            </Indexed>\r\n            <Indexed title='Blocking'>\r\n                <p>Blocking is an active action that can be done against melee attacks. You roll 2d10 + Combat (skill), if you successfully block then you only take half damage (round down)</p>\r\n            </Indexed>\r\n            <Indexed title='Ranged attacks and guns'>\r\n                <p>\r\n                    When you shoot someone your roll must hit the targets passive defense to hit.\r\n                    Guns have multiple types of attacks, snipe shots, aimed shots, semi-burst, burst and oppressive fire\r\n                </p>\r\n                <p>Using a weapon that has a higher strength requirement imposes a burden to your aiming, penalty to aiming is 10x what you are missing</p>\r\n                {Firearms.useCases.map(uc => <>\r\n                    <h5>{uc.name} ({uc.attribute})</h5>\r\n                    <p>{uc.description}</p>\r\n                    <ul>\r\n                        {uc.results !== undefined ? uc.results.map(r => <li>{r}</li>) : null}\r\n                    </ul>\r\n                </>)}\r\n            </Indexed>\r\n            <Indexed title='Splash damage'>\r\n                <p>Some weapons do splash damage, meaning they hit an area, some weapons have a \"low damage\" zone outside the splash area where damage is reduced to 25%</p>\r\n                <ul>\r\n                    <li>The area of effect (including low damage zone) is specified by the weapon</li>\r\n                    <li>All who are caught inside the area of effect roll damage seperately, damage absorbtion applies, defense does not apply</li>\r\n                    <li>Characters who still have a move action may make an acrobatics roll against the attack roll for half damage\r\n                        <ul>\r\n                            <li>Defeating the roll by 10 or more means no damage is taken, but the character moves out of the area</li>\r\n                        </ul>\r\n                    </li>\r\n                    <li>Objects caught within the zone are also damaged</li>\r\n                    <li>The target to hit an area is 10, standard range penalties apply, missing means you off target</li>\r\n                </ul>\r\n                <p>Some weapons that do splash damage are thrown or otherwise follow a ballistic path. These can potentially hit places that are not within direct line of sight. For these situations add +10 and range penalties are doubled.</p>\r\n            </Indexed>\r\n            <Indexed title='Distance'>\r\n                <p>Targets become harder to hit when they are further away, each 4 meters away gives you a -1 to hit penalty. Some conditions affect range penalties, these conditions stack with other conditions, perks and weapon stats.</p>\r\n                <ul>\r\n                    <li>No gravity and no atmosphere: range penalties halfed (does not apply to lasers)</li>\r\n                    <li>Rain or heavy winds: double range penalties</li>\r\n                    <li>Mist or smoke: quadrouple range penalties</li>\r\n                </ul>\r\n                <p>Guns have a maximum range, beyond this it's impossible to hit</p>\r\n                <p>Bullets slow down and lose energy to the air, depending on the gun you may deal lower damage, as an optional rule you may reduce damage by 25% at half firearm range.</p>\r\n            </Indexed>\r\n            <Indexed title='Cover'>\r\n                <p>Hinding behind a cover, whether partially or fully gives your character cover, cover grants both passive defense and damage reduction</p>\r\n                <p>Damage reduction depends on the type of material is covering you, thickness and hardness matter. When damage absorbtion from cover is applied it stacks with all other sources, armor piercing is applied only once to the entire stack.\r\n                Cover does not grant any benefits from close range combat rolls or thrown explosive rolls, only firearms and non-explosive thrown like knives.\r\n                Firearms that deal splash damage like shotguns and missile launchers always apply passive defense and cover damage absorbtion, but may destroy the cover depending on the damage.\r\n                </p>\r\n                <p>Each time damage is taken through damage absorbtion each source drops their damage absorbtion by 1 point, when dropped to zero they no longer provide any benefit.</p>\r\n                <p>If damage exceeds damage absorbtion x 10 then the cover or armor is instantly destroyed. Damage from multiple bullets count seperately for this purpose.</p>\r\n                <table>\r\n                    <thead><th>thiccness/material</th><th>wood</th><th>concrete</th><th>metal</th></thead>\r\n                    <tbody>\r\n                        <tr><td>1cm</td><td>1</td><td>2</td><td>4</td></tr>\r\n                        <tr><td>2cm</td><td>2</td><td>4</td><td>8</td></tr>\r\n                        <tr><td>5cm</td><td>4</td><td>8</td><td>16</td></tr>\r\n                        <tr><td>20cm</td><td>8</td><td>16</td><td>60</td></tr>\r\n                        <tr><td>1m</td><td>16</td><td>40</td><td>200</td></tr>\r\n                    </tbody>\r\n                </table>\r\n                <h5>Low cover</h5>\r\n                <p>less than 1/3rd of your body is covered, you gain +4 passive defense, 25% chance to apply damage absorbtion from cover</p>\r\n                <h5>High cover</h5>\r\n                <p>less than 2/3rds of your body is covered, you gain +8 passive defense, 50% chance to apply damage absorbtion from cover</p>\r\n                <h5>Massive cover</h5>\r\n                <p>More than 2/3rds of your body is covered, you gain +12 passive defense, 75% chance to apply damage absorbtion from cover</p>\r\n                <h5>total cover</h5>\r\n                <p>Your entire body is covered, you gain +20 passive defense if the enemy knows where you are, if they do not then they must guess the square, 100% chance to apply damage absorbtion from cover.\r\n                Total cover also prevents you from attacking.\r\n                </p>\r\n            </Indexed>\r\n        </Indexer>\r\n    </Section>;\r\n}\r\n\r\nexport default Combat;","import Item from \"./Item\";\r\n\r\nexport type Ammo = '9x17' | '9x21' | '9x23' |\r\n    '10x19' | '10x21' |\r\n    '11x17' | '11x21' |\r\n    '12x20' | '12x24' | '12x28' |\r\n    '4mm ec' |\r\n    '12 gauge' | '20 gauge' |\r\n    '20mm rpg'|'30mm rpg'|'40mm rpg' | '50mm rpg' |\r\n    '1hec' | '2hec' | '10hec';\r\n\r\nexport interface AmmoInformation {\r\n    ammo: Ammo;\r\n    cost: number;\r\n    weight: number;\r\n    types: string[];\r\n    description: string;\r\n}\r\n\r\nexport const AmmoTypesInformation: AmmoInformation[] = [\r\n    {\r\n        ammo: '9x17',\r\n        cost: 1.6,\r\n        weight: 7,\r\n        types: ['tracer', 'hollow point', 'standard'],\r\n        description: 'a small short 9mm bullet'\r\n    }, {\r\n        ammo: '9x21',\r\n        cost: 1.8,\r\n        weight: 9,\r\n        types: ['tracer', 'hollow point', 'armor piercing', 'standard'],\r\n        description: 'a slightly longer version of the 9mm'\r\n    }, {\r\n        ammo: '9x23',\r\n        cost: 2.1,\r\n        weight: 11,\r\n        types: ['tracer', 'hollow point', 'armor piercing', 'standard'],\r\n        description: 'a long version of the 9mm'\r\n    }, {\r\n        ammo: '10x19',\r\n        cost: 3,\r\n        weight: 10,\r\n        types: ['hollow point', 'standard'],\r\n        description: 'a standard 10cm bullet'\r\n    }, {\r\n        ammo: '10x21',\r\n        cost: 3.3,\r\n        weight: 11,\r\n        types: ['tracer', 'hollow point', 'armor piercing', 'standard'],\r\n        description: 'a long version of the 10cm bullet'\r\n    }, {\r\n        ammo: '11x17',\r\n        cost: 3.9,\r\n        weight: 12,\r\n        types: ['incendiary', 'standard'],\r\n        description: 'a short wide 11cm bullet'\r\n    }, {\r\n        ammo: '11x21',\r\n        cost: 4.5,\r\n        weight: 15,\r\n        types: ['armor piercing', 'incendiary', 'standard'],\r\n        description: 'a normal 11cm bullet'\r\n    }, {\r\n        ammo: '12x20',\r\n        cost: 4.5,\r\n        weight: 16,\r\n        types: ['armor piercing', 'incendiary', 'standard'],\r\n        description: 'a large 12cm bullet'\r\n    }, {\r\n        ammo: '12x24',\r\n        cost: 5.4,\r\n        weight: 20,\r\n        types: ['hollow point', 'armor piercing', 'incendiary', 'standard'],\r\n        description: 'a long large 12cm bullet'\r\n    }, {\r\n        ammo: '12x28',\r\n        cost: 6.6,\r\n        weight: 25,\r\n        types: ['tracer', 'hollow point', 'armor piercing', 'incendiary', 'standard'],\r\n        description: 'a very long large 12cm bullet'\r\n    }, {\r\n        ammo: '4mm ec',\r\n        cost: 15,\r\n        weight: 0.2,\r\n        types: ['standard'],\r\n        description: 'a tiny caseless ferromagnetic neodymium bullet'\r\n    }, {\r\n        ammo: '12 gauge',\r\n        cost: 9,\r\n        weight: 24,\r\n        types: ['shell', 'slug', 'explosive'],\r\n        description: 'a 12 gauge shotgun shell'\r\n    }, {\r\n        ammo: '20 gauge',\r\n        cost: 6.6,\r\n        weight: 22,\r\n        types: ['shell', 'slug'],\r\n        description: 'a 20 gauge shotgun shell'\r\n    }, {\r\n        ammo: '20mm rpg',\r\n        cost: 150,\r\n        weight: 90,\r\n        types: ['standard', 'grenade'],\r\n        description: 'a 40mm rocket propelled grenade'\r\n    }, {\r\n        ammo: '30mm rpg',\r\n        cost: 300,\r\n        weight: 120,\r\n        types: ['frag', 'standard', 'grenade', 'fire bomb'],\r\n        description: 'a 40mm rocket propelled grenade'\r\n    }, {\r\n        ammo: '40mm rpg',\r\n        cost: 500,\r\n        weight: 160,\r\n        types: ['plasma bomb', 'frag', 'standard', 'grenade', 'fire bomb'],\r\n        description: 'a 40mm rocket propelled grenade'\r\n    }, {\r\n        ammo: '50mm rpg',\r\n        cost: 750,\r\n        weight: 220,\r\n        types: ['plasma bomb', 'homing', 'standard', 'grenade', 'fire bomb'],\r\n        description: 'a 50mm rocket propelled grenade'\r\n    }, {\r\n        ammo: '1hec',\r\n        cost: 0,\r\n        weight: 0,\r\n        types: [],\r\n        description: '1 unit of hyperelectron charge, battery rechargeable'\r\n    }\r\n];\r\n\r\n\r\n\r\ntype fireAction = 'single action revolver' | 'double action revolver' | 'bolt action' | 'pump action' | 'semi-automatic' | 'fully-automatic' | 'continuous';\r\n\r\ntype fireArmClass = 'handgun' | 'submachinegun' | 'rifle' | 'machinegun' | 'rocketlauncher' | 'laser' | 'plasma';\r\n\r\ninterface IFirearm extends Item {\r\n    fireArmClass: fireArmClass,\r\n    damage: string;\r\n    range: string;\r\n    armorpiercing?: number;\r\n    hitbonus?: number;\r\n    fireAction: fireAction[];\r\n    capacity: number;\r\n    ammo: Ammo;\r\n    rps?: number;\r\n    strengthRequirement: number;\r\n    splashRange?:number;\r\n    lowDamageZone?:number;\r\n}\r\n\r\nexport class FireArm implements IFirearm {\r\n    fireArmClass: fireArmClass;\r\n    damage: string;\r\n    range: string;\r\n    armorpiercing?: number | undefined;\r\n    hitbonus?: number | undefined;\r\n    fireAction: fireAction[];\r\n    capacity: number;\r\n    ammo: Ammo;\r\n    rps?: number | undefined;\r\n    weight: number;\r\n    value: number;\r\n    description?: string | undefined;\r\n    name: string;\r\n    strengthRequirement: number;\r\n    splashRange?:number;\r\n    lowDamageZone?:number;\r\n\r\n    constructor(name: string, weight: number, value: number, damage: string, fireArmClass: fireArmClass, range: string, fireAction: fireAction[], capacity: number, ammo: Ammo, strengthRequirement: number, description: string | undefined, hitbonus: number | undefined, armorpiercing: number | undefined, rps: number | undefined, splashRange:number|undefined, lowDamageZone:number|undefined) {\r\n        this.fireArmClass = fireArmClass;\r\n        this.name = name;\r\n        this.weight = weight;\r\n        this.value = value;\r\n        this.damage = damage;\r\n        this.description = description;\r\n        this.hitbonus = hitbonus;\r\n        this.armorpiercing = armorpiercing;\r\n        this.range = range;\r\n        this.fireAction = fireAction;\r\n        this.capacity = capacity;\r\n        this.ammo = ammo;\r\n        this.rps = rps;\r\n        this.strengthRequirement = strengthRequirement;\r\n        this.splashRange = splashRange;\r\n        this.lowDamageZone = lowDamageZone;\r\n    }\r\n}\r\n\r\n// gun makers = night, \r\n\r\nconst Firearms: FireArm[] = [\r\n    //hand guns\r\n    {\r\n        fireArmClass: 'handgun', name: 'revolver', damage: '1d10', range: '300m', ammo: '10x19', strengthRequirement: 2, capacity: 6, fireAction: ['double action revolver'], armorpiercing: 1, weight: 800, value: 1000 ,\r\n        description: 'basic revolver, this antique weapon design is mostly considered a collectors item for gun and antique enthusiasts. It still works.'\r\n    },\r\n    {\r\n        fireArmClass: 'handgun', name: 'Fantry Light Model', damage: '2d6', range: '350m', ammo: '10x21', strengthRequirement: 1, capacity: 19, fireAction: ['semi-automatic'], armorpiercing: 1, weight: 950, value: 900,\r\n        description: 'the light handgun model of the fantry gun manufacturer, has a generous ammo capacity and the design makes it less loud than other handguns'\r\n    },\r\n    {\r\n        fireArmClass: 'handgun', name: 'Fantry Heavy Model', damage: '2d8', range: '450m', ammo: '11x21', strengthRequirement: 3, capacity: 14, fireAction: ['semi-automatic'], armorpiercing: 2, weight: 1200, value: 1200,\r\n        description: 'a large hand gun designed to inflict serious damage'\r\n    },\r\n    {\r\n        fireArmClass: 'handgun', name: 'Merlion Atomic', damage: '2d6', range: '400m', ammo: '10x21', strengthRequirement: 2, capacity: 12, fireAction: ['semi-automatic'], armorpiercing: 2, weight: 850, hitbonus: 2, value: 1700,\r\n        description: 'Common handgun used exclusively by merlions, the arcane alloys allows for both supreme recoil handling'\r\n    },\r\n\r\n    //submachinegun\r\n    {\r\n        fireArmClass: 'handgun', name: 'Fantry Sub Model', damage: '1d8', range: '350m', ammo: '9x21', strengthRequirement: 3, capacity: 24, fireAction: ['semi-automatic', 'fully-automatic'], armorpiercing: 2, rps: 8, weight: 1800, value: 2800,\r\n        description: 'A very light submachine gun, fires relatively slow for a submachine gun on while on full automatic'\r\n    },\r\n    {\r\n        fireArmClass: 'handgun', name: 'Skolt cleaner', damage: '1d10', range: '300m', ammo: '10x19', strengthRequirement: 4, capacity: 36, fireAction: ['semi-automatic', 'fully-automatic'], armorpiercing: 1, rps: 10, weight: 2100, value: 3100,\r\n        description: 'The Skolt Cleaner is a popular submachinegun'\r\n    },\r\n\r\n    //rifle\r\n    {\r\n        fireArmClass: 'rifle', name: 'Fantry Assault Model', damage: '2d6', range: '800m', ammo: '11x17', strengthRequirement: 3, capacity: 24, fireAction: ['semi-automatic'], armorpiercing: 1, weight: 2200, value: 1500,\r\n        description: 'A light weight assault weapon'\r\n    },\r\n    {\r\n        fireArmClass: 'rifle', name: 'Skolt Hunter', damage: '2d8', range: '1000m', ammo: '12x20', strengthRequirement: 4, capacity: 8, fireAction: ['semi-automatic'], armorpiercing: 2, weight: 2300, value: 2000,\r\n        description: 'A rifle primarily designed for hunting'\r\n    },\r\n    {\r\n        fireArmClass: 'rifle', name: 'Skolt LG', damage: '2d10', range: '1200m', ammo: '12x24', strengthRequirement: 5, capacity: 6, fireAction: ['semi-automatic'], armorpiercing: 3, weight: 3500, value: 2100,\r\n        description: 'The skolt LG (long gun) is primarily designed for hunting large game'\r\n    },\r\n    {\r\n        fireArmClass: 'rifle', name: 'Night AV Sniper', damage: '2d10', range: '1800m', ammo: '12x28', strengthRequirement: 5, capacity: 4, fireAction: ['bolt action'], armorpiercing: 5, hitbonus: -1, weight: 8200, value: 3100,\r\n        description: 'This huge sniper rifle is designed to take out targets at extreme range, or damage vehicles'\r\n    },\r\n\r\n    //automatic rifle\r\n    {\r\n        fireArmClass: 'rifle', name: 'Skolt Advanced', damage: '1d12', range: '700m', ammo: '11x21', strengthRequirement: 4, capacity: 60, fireAction: ['semi-automatic', 'fully-automatic'], armorpiercing: 2, rps: 8, weight: 3200, value: 3900,\r\n        description: 'A slim and futuristic looking fully automatic assault rifle designed for urban warfare '\r\n    },\r\n    {\r\n        fireArmClass: 'rifle', name: 'Merlion Predator', damage: '2d10', range: '1100m', ammo: '12x24', strengthRequirement: 4, capacity: 45, fireAction: ['semi-automatic', 'fully-automatic'], armorpiercing: 4, rps: 12, weight: 3600, value: 5100,\r\n        description: 'This strange merlion designed weapon was originally intended as an anti-human weapon, but when merlions decided that humans were harmless creatures they offered this weapon as a gesture of good will'\r\n    },\r\n\r\n    //shotgun\r\n    {\r\n        fireArmClass: 'rifle', name: 'Skolt Crusher', damage: '2d6', range: '160m', ammo: '12 gauge', strengthRequirement: 4, capacity: 10, fireAction: ['semi-automatic'], weight: 2800, value: 2200, hitbonus: 0,\r\n        description: 'The skolt crusher is a long barrel semi-automatic shotgun, has a low spread', splashRange: 0.5, lowDamageZone: 1,\r\n    },\r\n    {\r\n        fireArmClass: 'rifle', name: 'Night Hammer', damage: '2d6', range: '80m', ammo: '12 gauge', strengthRequirement: 5, capacity: 12, fireAction: ['pump action'], weight: 2700, value: 2100, hitbonus: 0,\r\n        description: 'This old fashioned pump action shotgun offers a wide spread which increases likelyhood of hitting', splashRange: 0.8, lowDamageZone: 1,\r\n    },\r\n    {\r\n        fireArmClass: 'rifle', name: 'Night Hammer sawed off', damage: '2d6', range: '40m', ammo: '12 gauge', strengthRequirement: 5, capacity: 12, fireAction: ['pump action'], weight: 2000, value: 2000, hitbonus: 0,\r\n        description: 'A sawed off version of the Night Hammer, slightly lighter and has a huge spread', splashRange: 1\r\n    },\r\n\r\n    //magnetic guns\r\n\r\n    {\r\n        fireArmClass: 'rifle', name: 'Night Coil', damage: '1d10', range: '1200m', ammo: '4mm ec', strengthRequirement: 6, capacity: 60, fireAction: ['semi-automatic'], weight: 7000, value: 2600, hitbonus: 2, armorpiercing: 5, \r\n        description: 'This experimental weapon uses electromagnetic induction to launch a bullet, naturally very silent'\r\n    },\r\n    {\r\n        fireArmClass: 'rifle', name: 'Skolt Railgun', damage: '2d8', range: '1800m', ammo: '4mm ec', strengthRequirement: 8, capacity: 60,fireAction: ['semi-automatic'], weight: 11000, value: 3700, hitbonus: 1, armorpiercing: 6,\r\n        description: 'A huge railgun, has two long rails along which a tiny ferromagnetic bullet is accelerated to breathtaking speeds'\r\n    },\r\n    {\r\n        fireArmClass: 'rifle', name: 'Merlion Force Gun', damage: '2d8', range: '2000m', ammo: '4mm ec', strengthRequirement: 6, capacity: 60,fireAction: ['semi-automatic'], weight: 9000, value: 4800, hitbonus: 1, armorpiercing: 6,\r\n        description: 'A strange rifle that exploits the electroweak force in an unknown way'\r\n    },\r\n\r\n    //machinegun\r\n    {\r\n        fireArmClass: 'machinegun', name: 'Fantry Tyrant Model', damage: '1d8', range: '250m', ammo: '9x17', strengthRequirement: 8, capacity: 160, fireAction: ['fully-automatic'], rps: 8, weight: 8000, value: 5500,\r\n        description: 'The Tyrant model of the Fantry gun manufacturer, fully automatic machine gun light enough to hold up or using the tripod'\r\n    },\r\n    {\r\n        fireArmClass: 'machinegun', name: 'Merlion Durium', damage: '1d12', range: '900m', ammo: '9x23', strengthRequirement: 7, capacity: 150, fireAction: ['fully-automatic'], armorpiercing: 3, rps: 8, weight: 7000, value: 6700, hitbonus: 3,\r\n        description: 'An elegant machine gun used only be the merlion military, take -2 if not using the tripod'\r\n    },\r\n    {\r\n        fireArmClass: 'machinegun', name: 'Skolt Obliderator', damage: '2d10', range: '1600m', ammo: '12x28', strengthRequirement: 9, capacity: 120, fireAction: ['fully-automatic'], armorpiercing: 4, rps: 8, weight: 12000, value: 7500,\r\n        description: 'Point this massive machinegun in a direction, hold down the trigger and watch as everything is turned into swiss cheese'\r\n    },\r\n\r\n    //rocket launcher\r\n    {\r\n        fireArmClass: 'rocketlauncher', name: 'Minirocket Launcher', damage: '6d8', range: '600m', ammo: '20mm rpg', strengthRequirement: 4, capacity: 8, fireAction: ['semi-automatic'], armorpiercing: 2, weight: 5000, value: 2000, hitbonus: -1,\r\n        description: 'Specialized rocket launcher, fires tiny rockets, can fire multiple per round', splashRange: .5, lowDamageZone: 2,\r\n    },\r\n    {\r\n        fireArmClass: 'rocketlauncher', name: 'AP-RPG', damage: '8d8', range: '1000m', ammo: '30mm rpg', strengthRequirement: 4, capacity: 3, fireAction: ['bolt action'], armorpiercing: 6, weight: 4000, value: 1500, hitbonus: -2,\r\n        description: 'Heavy anti-personell rocket launcher, useful for forcing someone out of cover', splashRange: 1, lowDamageZone: 3,\r\n    },\r\n    {\r\n        fireArmClass: 'rocketlauncher', name: 'ALV-RPG', damage: '10d8', range: '2500m', ammo: '40mm rpg', strengthRequirement: 4, capacity: 2, fireAction: ['bolt action'], armorpiercing: 10, weight: 4000, value: 1700, hitbonus: -3,\r\n        description: 'Anti light vehicle rocket launcher, used to destroy cars and stuff, also extremely effective at destroying people', splashRange: 2, lowDamageZone: 4,\r\n    },\r\n    {\r\n        fireArmClass: 'rocketlauncher', name: 'AT-RPG', damage: '12d8', range: '3500m', ammo: '50mm rpg', strengthRequirement: 5, capacity: 1, fireAction: ['bolt action'], armorpiercing: 12, weight: 5000, value: 2400, hitbonus: -4,\r\n        description: 'Anti tank rocket launcher, used to destroy tanks and buildings, can also be used to convert people into ash and minced meat', splashRange: 2, lowDamageZone: 5,\r\n    },\r\n\r\n    //energy weapons\r\n    {\r\n        fireArmClass: 'laser', name: 'Fantry Lasergun', damage: '1d8', range: '1800m', ammo: '1hec', strengthRequirement: 1, capacity: 60, fireAction: ['semi-automatic'], armorpiercing: 1, hitbonus: 3, weight: 1100, value: 2300,\r\n        description: 'the only laser handgun, needs protective gear to use, has blinding effect to all within 1 meters, half range penalty'\r\n    },\r\n    {\r\n        fireArmClass: 'laser', name: 'Skolt Lightpulse', damage: '1d10', range: '2000m', ammo: '1hec', strengthRequirement: 2, capacity: 100, fireAction: ['semi-automatic'], armorpiercing: 2, hitbonus: 3, weight: 3000, value: 3400,\r\n        description: 'shoots a blue laser pulse, needs protective gear to use, has blinding effect to all within 2 meters, half range penalty'\r\n    },\r\n    {\r\n        fireArmClass: 'laser', name: 'Merlion Deathray', damage: '1d12', range: '2400m', ammo: '1hec', strengthRequirement: 2, capacity: 80, fireAction: ['semi-automatic'], armorpiercing: 3, hitbonus: 4, weight: 3000, value: 5100,\r\n        description: 'shoots a ultraviolet laser pulse, needs protective gear to use, has blinding effect to all within 3 meters, half range penalty'\r\n    },\r\n    {\r\n        fireArmClass: 'plasma', name: 'Merlion Plasma Cannon', damage: '6d6', range: '100m', ammo: '1hec', strengthRequirement: 4, capacity: 60, fireAction: ['semi-automatic'], hitbonus: 1, weight: 6000, value: 6200,\r\n        description: 'shoots highly energetic beam of charged particles which ionizes the air as it passes through it, half damage at 50 meters'\r\n    },\r\n    {\r\n        fireArmClass: 'plasma', name: 'Skolt Plasma Bloom', damage: '4d6', range: '120m', ammo: '1hec', strengthRequirement: 4, capacity: 60, fireAction: ['semi-automatic'], hitbonus: 1, weight: 6200, value: 5700,\r\n        description: 'shoots an intense laser which causes the air to \"bloom\", induction is used to propel the blooming plasma, half damage at 40 meters'\r\n    }\r\n];\r\n\r\nexport default Firearms;","import Item from \"./Item\";\r\n\r\ninterface IMeleeWeapon extends Item {\r\n    size: 'small' | 'medium' | 'large';\r\n    damage: string;\r\n    hitbonus?: string;\r\n    armorpiercing?: number;\r\n}\r\n\r\nexport class MeleeWeapon implements IMeleeWeapon {\r\n    size: \"small\" | \"medium\" | \"large\";\r\n    damage: string;\r\n    hitbonus?: string | undefined;\r\n    armorpiercing?: number | undefined;\r\n    weight: number;\r\n    value: number;\r\n    description?: string | undefined;\r\n    name: string;\r\n    constructor(name: string, weight: number, value: number, damage: string, size: \"small\" | \"medium\" | \"large\", description: string | undefined, hitbonus: string | undefined, armorpiercing: number | undefined) {\r\n        this.size = size;\r\n        this.name = name;\r\n        this.weight = weight;\r\n        this.value = value;\r\n        this.damage = damage;\r\n        this.description = description;\r\n        this.hitbonus = hitbonus;\r\n        this.armorpiercing = armorpiercing;\r\n    }\r\n}\r\n\r\nconst MeleeWeapons: MeleeWeapon[] = [\r\n    { size: 'small', name: 'Batons/hammers/sticks', damage: '1d4', weight: 500, value: 10 },\r\n    { size: 'small', name: 'Knife', damage: '1d4 + 1', weight: 100, value: 15, description: 'causes bleeding' },\r\n    { size: 'medium', name: 'Machete', damage: '1d6 + 1 ', hitbonus: '+1', weight: 300, value: 100, description: 'causes bleeding' },\r\n    { size: 'medium', name: 'Club', damage: '1d6', weight: 1000, value: 0 },\r\n    { size: 'medium', name: 'Short spear', damage: '1d8', hitbonus: '+1', armorpiercing: 1, weight: 500, value: 250, description: 'causes bleeding' },\r\n    { size: 'large', name: 'Longsword', damage: '1d8 +1', hitbonus: '+2 OQ, -2 CQ', armorpiercing: 1, weight: 800, value: 750, description: 'causes bleeding' },\r\n    { size: 'large', name: 'Long spear', damage: '1d8 +1', hitbonus: '+4 OQ, -4 CQ', armorpiercing: 1, weight: 900, value: 500, description: 'causes bleeding' },\r\n    { size: 'large', name: 'Battleaxe', damage: '1d10 +1', hitbonus: '-2 CQ', armorpiercing: 2, weight: 1500, value: 800, description: 'causes bleeding' },\r\n];\r\n\r\nexport default MeleeWeapons;","export interface ArmorData {\r\n    name: string;\r\n    damageAbsorbtion: number;\r\n    weight: number;\r\n    cost: number;\r\n    agilityMod: number;\r\n    description: string;\r\n    armorType:string;\r\n}\r\n\r\nexport interface BodySuit extends ArmorData {\r\n}\r\n\r\nexport interface ArmorPlate extends ArmorData {\r\n}\r\n\r\nexport interface PowerArmor extends ArmorData {\r\n    strengthMod: number;\r\n    perceptionMod: number;\r\n}\r\n\r\n\r\nconst bodySuits: BodySuit[] = [\r\n    {\r\n        name: 'Nylon Polyester Composite',\r\n        damageAbsorbtion: 3,\r\n        weight: 20,\r\n        cost: 3500,\r\n        agilityMod: -1,\r\n        description: 'Composite armor made primarily of nylon and polyester, thick layers give stab and cut protection',\r\n        armorType: 'bodySuit'\r\n    },\r\n    {\r\n        name: 'Kevlar',\r\n        damageAbsorbtion: 2,\r\n        weight: 15,\r\n        cost: 4500,\r\n        agilityMod: 0,\r\n        description: 'Heat resistant synthetic fiber, woven into a flexible and light body suit',\r\n        armorType: 'bodySuit'\r\n    },\r\n    {\r\n        name: 'Carbon Reinforced Kevlar',\r\n        damageAbsorbtion: 3,\r\n        weight: 20,\r\n        cost: 6000,\r\n        agilityMod: 0,\r\n        description: 'An incredibly strong weave of carbon fiber, kevlar and nylon and polyester. Gives incredible defense',\r\n        armorType: 'bodySuit'\r\n    },\r\n    {\r\n        name: 'Carbon Fiber Weave',\r\n        damageAbsorbtion: 5,\r\n        weight: 30,\r\n        cost: 12000,\r\n        agilityMod: -2,\r\n        description: 'An incredibly strong weave of carbon fiber, kevlar and nylon and polyester. Gives incredible defense',\r\n        armorType: 'bodySuit'\r\n    },\r\n    {\r\n        name: 'Nanotube Superstructure Fiber',\r\n        damageAbsorbtion: 6,\r\n        weight: 20,\r\n        cost: 30000,\r\n        agilityMod: -1,\r\n        description: 'A kevlar body suit reinforced with graphene nanotube super structures which gives protection against most attacks',\r\n        armorType: 'bodySuit'\r\n    },\r\n    {\r\n        name: 'High Yield Nanosuit',\r\n        damageAbsorbtion: 7,\r\n        weight: 16,\r\n        cost: 40000,\r\n        agilityMod: 0,\r\n        description: 'A body armor made entirely out of nanotube carbyne weave, incredibly strong, light and expensive',\r\n        armorType: 'bodySuit'\r\n    }\r\n];\r\n\r\nconst armorPlates: ArmorPlate[] = [\r\n    {\r\n        name: 'Hard Plast Plates',\r\n        damageAbsorbtion: 2,\r\n        weight: 10,\r\n        cost: 2500,\r\n        agilityMod: 0,\r\n        description: 'Hard but elastic plastic plates which reflect impacts, very durable',\r\n        armorType: 'armorPlate'\r\n    },\r\n    {\r\n        name: 'Ceramic Plates',\r\n        damageAbsorbtion: 4,\r\n        weight: 12,\r\n        cost: 3500,\r\n        agilityMod: -1,\r\n        description: 'Very hard ceramic plates which absorb a lot of damage, however each time the damage is exceeded they lose 1 damage absorbtion. These are replaced after every combat',\r\n        armorType: 'armorPlate'\r\n    },\r\n    {\r\n        name: 'Steel Plates',\r\n        damageAbsorbtion: 5,\r\n        weight: 16,\r\n        cost: 4000,\r\n        agilityMod: -2,\r\n        description: 'High carbon hardened steel plates, very strong but also heavy',\r\n        armorType: 'armorPlate'\r\n    },\r\n    {\r\n        name: 'Steel Fullplate',\r\n        damageAbsorbtion: 7,\r\n        weight: 24,\r\n        cost: 8000,\r\n        agilityMod: -3,\r\n        description: 'High carbon hardened steel plates, very strong but also heavy. Fullplate means more thickness and coverage.',\r\n        armorType: 'armorPlate'\r\n    },\r\n    {\r\n        name: 'Titan Alloy Plates',\r\n        damageAbsorbtion: 6,\r\n        weight: 16,\r\n        cost: 9000,\r\n        agilityMod: -2,\r\n        description: 'An alloy of titanium and gold, stronger than steel. And significantly more expensive',\r\n        armorType: 'armorPlate'\r\n    },\r\n    {\r\n        name: 'Titan Alloy Fullplate',\r\n        damageAbsorbtion: 8,\r\n        weight: 24,\r\n        cost: 15000,\r\n        agilityMod: -3,\r\n        description: 'An alloy of titanium and gold, stronger than steel. And significantly more expensive. Fullplate means more thickness and coverage.',\r\n        armorType: 'armorPlate'\r\n    },\r\n    {\r\n        name: 'Hyper Nanostructure Plates',\r\n        damageAbsorbtion: 7,\r\n        weight: 12,\r\n        cost: 16000,\r\n        agilityMod: -1,\r\n        description: 'Titan alloy reinforced by a weave of graphene nanotube super structure',\r\n        armorType: 'armorPlate'\r\n    },\r\n    {\r\n        name: 'Hyper Nanostructure Fullplates',\r\n        damageAbsorbtion: 9,\r\n        weight: 18,\r\n        cost: 32000,\r\n        agilityMod: -2,\r\n        description: 'Titan alloy reinforced by a weave of graphene nanotube super structure. Fullplate means more thickness and coverage.',\r\n        armorType: 'armorPlate'\r\n    },\r\n]\r\n\r\nconst powerArmors: PowerArmor[] = [\r\n    {\r\n        name: 'Exo-Servos',\r\n        damageAbsorbtion: 0,\r\n        weight: 6,\r\n        cost: 4000,\r\n        agilityMod: 1,\r\n        perceptionMod: 0,\r\n        strengthMod: 1,\r\n        description: 'Servos placed on joints aid movement speed, agility and strength',\r\n        armorType: 'powerArmor'\r\n    },\r\n    {\r\n        name: 'Exoskeletal Frame',\r\n        damageAbsorbtion: 1,\r\n        weight: 16,\r\n        cost: 7000,\r\n        agilityMod: 1,\r\n        perceptionMod: 0,\r\n        strengthMod: 3,\r\n        description: 'Frame around the body grants greater strength, speed and agility',\r\n        armorType: 'powerArmor'\r\n    },\r\n    {\r\n        name: 'Scout Frame',\r\n        damageAbsorbtion: 1,\r\n        weight: 18,\r\n        cost: 8000,\r\n        agilityMod: 3,\r\n        perceptionMod: 0,\r\n        strengthMod: 2,\r\n        description: 'Advanced frame around the body, which grants great mobility and strength',\r\n        armorType: 'powerArmor'\r\n    },\r\n    {\r\n        name: 'Powered Armor',\r\n        damageAbsorbtion: 4,\r\n        weight: 20,\r\n        cost: 9000,\r\n        agilityMod: 1,\r\n        perceptionMod: 1,\r\n        strengthMod: 4,\r\n        description: 'This armor frame encapsulates the entire body and greats great strength, as well as visual prowess and mobility',\r\n        armorType: 'powerArmor'\r\n    },\r\n    {\r\n        name: 'Titan Power Armor',\r\n        damageAbsorbtion: 5,\r\n        weight: 24,\r\n        cost: 12000,\r\n        agilityMod: 1,\r\n        perceptionMod: 1,\r\n        strengthMod: 5,\r\n        description: 'This armor frame is almost a vehicle, the strength bonus it grants is beyond belief',\r\n        armorType: 'powerArmor'\r\n    },\r\n    {\r\n        name: 'Mecha Titan',\r\n        damageAbsorbtion: 6,\r\n        weight: 30,\r\n        cost: 16000,\r\n        agilityMod: 1,\r\n        perceptionMod: 1,\r\n        strengthMod: 5,\r\n        description: 'An even larger version of the Titan Power Armor',\r\n        armorType: 'powerArmor'\r\n    },\r\n    {\r\n        name: 'Merlion Warrior Armor',\r\n        damageAbsorbtion: 4,\r\n        weight: 20,\r\n        cost: 15000,\r\n        agilityMod: 2,\r\n        perceptionMod: 2,\r\n        strengthMod: 2,\r\n        description: 'The fabled merlion warrior armor frame grants a balanced bonus to visual prowess, mobility and strength',\r\n        armorType: 'powerArmor'\r\n    },\r\n]\r\n\r\nexport { bodySuits, armorPlates, powerArmors }\r\n","\r\nimport React, { CSSProperties, useState } from \"react\";\r\nimport Section from \"./Section\"\r\nimport Firearms, { FireArm, AmmoInformation, AmmoTypesInformation, Ammo } from \"../equipment/Firearms\";\r\nimport MeleeWeapons, { MeleeWeapon } from \"../equipment/MeleeWeapons\";\r\nimport Ellipsis from \"../general/Ellipsis\";\r\nimport Indexer, { Indexed } from \"../general/Indexer\";\r\nimport { bodySuits, armorPlates, BodySuit, ArmorPlate, PowerArmor, powerArmors, ArmorData } from \"../equipment/Armors\";\r\nimport { CharacterSize } from \"../Character\";\r\n\r\nconst Equipment: React.FC = () => {\r\n    return (<Section title='Equipment'>\r\n        <h2>Equipment</h2>\r\n        <p>Euipment is everything your character can wear on their body or hold and use.</p>\r\n        <Indexer title='equipment'>\r\n            <Indexed title='Melee Weapons'>\r\n                <h4>Glossary</h4>\r\n                <table>\r\n                    <thead><tr><th>abbreviation</th><th>meaning</th></tr></thead>\r\n                    <tbody>\r\n                        <tr><td>AP</td><td>Armor piercing, this weapon ignores this much damage, example AP 2 = ignores up to 2 damage reduction</td></tr>\r\n                        <tr><td>D</td><td>Damage, example D 1d8+1 = roll a 8 sided dice, add 1</td></tr>\r\n                        <tr><td>HB (CQ/OQ)</td><td>Hit bonus, close quarters/open quarters, example HB 2 = add 2 to skill roll, HB -3 CQ = subtract 3 if in close quarters</td></tr>\r\n                    </tbody>\r\n                </table>\r\n                <h4>Melee weapons</h4>\r\n\r\n                <WeaponTable data={MeleeWeapons}></WeaponTable>\r\n                <p>Small weapons gain 1/4 of your strength (rounded down) as a damage bonus, they are characterized as one handed weapon that can be easily concealed\r\n                    <br />\r\n                    Medium weapons gain 1/3 of your strength (rounded down) as a bonus damage, they are characterized as one handed weapons that are too big to be easily concealed\r\n                    <br />\r\n                    Large weapons gain 1/2 of your strength (rounded down) as bonus damage, they are characterized as two handed weapons and often are too big for close quarter combat\r\n                </p>\r\n                <p>Close quarters is defined as being adjecent to 2 or more walls or large obstacles, open quarters is empty space around you (nothing to take cover behind)</p>\r\n            </Indexed>\r\n            <Indexed title='Firearms'>\r\n                <h4>Guns</h4>\r\n                <p>All firearms cause bleeding</p>\r\n                <FirearmTable data={Firearms} />\r\n\r\n                <h5>Firearm modifications</h5>\r\n                <p>In addition to the various weapons there are modifications which can affect the firearms performance in various ways</p>\r\n                <ul>\r\n                    <li>\r\n                        <b>Scope</b> reduces long range penalties to half when using snipe or aimed shot<br />\r\n                        Weight +200g<br />\r\n                        Cost +300c\r\n                            </li>\r\n                    <li>\r\n                        <b>Silencer</b> Reduces the sound of a ballistic firearm (handguns, submachine guns, rifles, machineguns)<br />\r\n                        Sound reduced by 75%<br />\r\n                        Armor piercing reduced by 1 (minimum 0)<br />\r\n                        Range reduced by 10%<br />\r\n                        Cost bonus +400\r\n                    </li>\r\n                    <li>\r\n                        <b>Heavy Silencer</b> Reduces the sound of a ballistic firearm (handguns, submachine guns, rifles, machineguns)<br />\r\n                        Sound reduced by 95%<br />\r\n                        Armor Piercing reduced by 2 (minimum 0)<br />\r\n                        Ragne reduced by 25%<br />\r\n                        Cost bonus +500\r\n                    </li>\r\n                    <li>\r\n                        <b>Laser Target</b> Adds a laser target which helps aiming<br />\r\n                        Aim Bonus +2<br />\r\n                        Everyone can see where you're aiming<br />\r\n                        Cost bonus +600\r\n                    </li>\r\n                    <li>\r\n                        <b>Heavy Stock</b> Improves recoil control, can not be transferred to other firearms<br />\r\n                        Aim Bonus +1<br />\r\n                        Damage bonus +1<br />\r\n                        Weight bonus +40%<br />\r\n                        Cost bonus +20%\r\n                    </li>\r\n                    <li>\r\n                        <b>Tripod</b> Reduces strength requirement, only avalable for rifles and machineguns<br />\r\n                        Strength requirement -2<br />\r\n                        Cost: 100c<br />\r\n                        Weight: 300g\r\n                    </li>\r\n                    <li>\r\n                        <b>Large Tripod</b> Reduces strength requirement, only avalable for rifles and machineguns<br />\r\n                        Strength requirement -3<br />\r\n                        Cost: 300c<br />\r\n                        Weight: 1kg\r\n                    </li>\r\n                    <li>\r\n                        <b>Arm mount</b> Allows use of two handed firearms with one hand<br />\r\n                        Strength requirement +3<br />\r\n                        Cost: 200c<br />\r\n                        Weight: 1kg\r\n                    </li>\r\n                    <li>\r\n                        <b>Turbo charge</b> (energy weapons) +50% damage, can only fire once per round<br />\r\n                        Ammo use: +100%<br />\r\n                        Cost: +25%<br />\r\n                        Range: -50%<br />\r\n                        Weight: 0.5kg<br />\r\n                        Overheats: gain 1 heat point every shot, lose 1 heat after 2 rounds of non-use, can't fire if at 8 heat.\r\n                    </li>\r\n                </ul>\r\n\r\n                <h4>Ammunition</h4>\r\n                <p>All ammunition comes various forms and serve different purposes and come in different costs</p>\r\n                {AmmoTable(AmmoTypesInformation)}\r\n                <b>Modifications</b>\r\n                <ul>\r\n                    <li><b>Standard</b>, default version of the ammo, assumes the weapons stats unchanged</li>\r\n                    <li><b>Tracer</b>, tracer rounds have built in pyrotechnics which makes the bullet projectile more visible, adds +1 to hit. Cost +100%</li>\r\n                    <li><b>Hollow point</b>, hollow point bullets are designed to shatter upon impact, adds +3 damage, reduces armor piercing to zero and doubles damage reduction from armor</li>\r\n                    <li><b>Armor Piercing</b> bullet made of hard alloy instead of lead, adds +4 armor piercing, -1 damage, cost +10%</li>\r\n                    <li><b>Incendiary</b> bullet is designed to superheat, allows it to melt metal upon impact and cause massive damage +2 armor piercing and +1 damage. Cost +250%</li>\r\n                    <li><b>Shell</b>, contains multiple pellets which spread and gives to hit bonus</li>\r\n                    <li><b>Slug</b>, contains a single metal slug, removes splash, adds +4 armor piercing, +1 to hit bonus, double range</li>\r\n                    <li><b>Explosive</b>, contains an alloy which explodes on contact, removes splash, adds +2 damage, +3 armor piercing, +1 to hit. Cost +100%</li>\r\n                    <li><b>Plasma Bomb</b>, Uses the bomb to initiate a thermo-nuclear fusion reaction, releasing super heated plasma. Double damage and area of effect, removes armor piercing. Cost +400%</li>\r\n                    <li><b>Fire Bomb</b>, The grenade releases a rapidly burning accelerant, half damage every round for anyone within the area, removes armor piercing, anying leaving instead takes 1d6, lasts 1d4 rounds, +150% cost. Not compatible with fire or frag</li>\r\n                    <li><b>Frag</b>, releases metal fragments at extreme velocity. Double damage and damage reduction from armor/cover. Not compatible with plasma</li>\r\n                    <li><b>Homing</b>, homes in on target, requires snipe shot. Range penalties are halved. cost +50%. Not compatible with grenade</li>\r\n                    <li><b>Grenade</b>, non-rocket propelled, reduces range to 80m, adds +2d8 damage</li>\r\n                </ul>\r\n            </Indexed>\r\n            <Indexed title='Body Armors'>\r\n                <p>Armors come in many forms, anything that offers either damage reduction or armor penalty counts as body armor. Damage reduction is applied to any incoming damage, armor penalty is applied to all agility based rolls. Every time an armor fails to absorb all damage it loses damage reduction by 1. If it hits 0 then it is no longer able to offer protection</p>\r\n                <p>Armor have up to three layers, the inner body suit, the armor plates and the power armor frame</p>\r\n                <p>Additionally armor cost is affected by three factors, quality/condition, size, coverage</p>\r\n                <p>Quality/condition simply applies to total damage reduction, however pristine and intact give no benefit. They merely act as a buffer</p>\r\n                <p>Size applies to weight and cost, but not to protection. Armors must often be custom made to the wearer</p>\r\n                <ul>\r\n                    <li>Tiny: -20% cost/weight</li>\r\n                    <li>Small: -10% cost/weight</li>\r\n                    <li>Medium: no effect</li>\r\n                    <li>Large: +10% cost/weight</li>\r\n                    <li>Huge: +20% cost/weight</li>\r\n                </ul>\r\n                <p>Coverage is a matter of how much the armor covers the body, as a matter of rule simplification armors are assumed to protect the more vital areas first.\r\n                When coverage is less than full roll a 1d6 dice and if the dice equals or exceeds the value then you benefit, otherwise you don't.\r\n                When blocking you always receive protection from armor as it is assumed that the character blocks using armor or shield.<br />\r\n                Full plate armors require vast or full protection.<br />\r\n                Power Armor requires vast or full protection.<br />\r\n                Armor plates require body suits.\r\n                </p>\r\n                <ul>\r\n                    <li>Full protection: 100% cost/weight and 6/6 protection (no roll needed) - entire body protected</li>\r\n                    <li>Vast majority protection: 90% cost/weight and 5/6 roll - entire body except for hands</li>\r\n                    <li>Major protection: 80% cost/weight and 4/6 roll - helmet, body, legs and joints</li>\r\n                    <li>Half protection: 70% cost/weight and 3/6 roll - helmet, body, joints</li>\r\n                    <li>Small protection: 50% cost/weight and 2/6 roll (not available for power armor) - helmet and body</li>\r\n                    <li>Minor protection: 30% cost/weight and 1/6 roll (not available for power armor) - open face helmet and torso</li>\r\n                </ul>\r\n                <p>Agility penalty applies to rolls and defense score. Your effective agility score can be reduced below zero for skill rolls but not defense.</p>\r\n                <ArmorCrafter />\r\n                <h5>Body Suit</h5>\r\n                <ArmorTable armors={bodySuits} />\r\n                <h5>Armor Plates</h5>\r\n                <ArmorTable armors={armorPlates} />\r\n                <h5>Power Armor Frame</h5>\r\n                <ArmorTable armors={powerArmors} />\r\n            </Indexed>\r\n            {/*<Indexed title='Tools'>\r\n                <table>\r\n                    <thead><tr>\r\n                        <th>name</th><th>value</th><th>weight</th><th>description</th>\r\n                    </tr></thead>\r\n                    <tbody>\r\n                        <tr> <td>Pocket Computer</td><td>2000 c</td><td>1kg</td><td>Basically a futuristic smartphone.\r\n                            Allows user to substitute computer roll for any knowledge roll.<br />\r\n                            10TB storage, 12x 5.5GH cpu cores, 512GB ram, 4 cameras, gyrometer, accelerometer, geigercounter, radiobooster. 48h battery\r\n                            </td> </tr>\r\n                        <tr> <td>Jetpack</td><td>14000 c</td><td>6kg</td><td>Allows for short bursts which propel the user. Jump +50 meters up, +100 meters forward, requires athletics + agility 20 to safely land</td> </tr>\r\n                        <tr> <td>Flightsuit</td><td>8000 c</td><td>10kg</td><td>Allows for gliding, flying if paired with jetpack. Landing safely requires acrobatics + agility 20. Not compatible with armor plating or power armor</td></tr>\r\n                        <tr> <td>Stealth Cover</td><td>19000 c</td><td>1.8kg</td><td>Meta-material which bends light around it as it passes through, giving the illsion of invisibility. Only works for visible light (not infra red or ultra violet). +20 to hide (negated by infra-red or ultra-violet vision)</td> </tr>\r\n                        <tr> <td>Scope</td><td>600 c</td><td>300g</td><td>Scope with 2x/4x/8x/15x/20x zoom</td> </tr>\r\n                        <tr> <td>Infrared googles</td><td>900 c</td><td>200g</td><td>Allows the user to see in infrared, can be paired with scope or camera</td> </tr>\r\n                        <tr> <td>Ultraviolet googles</td><td>1600 c</td><td>300g</td><td>Allows the user to see in ultra violet, can be paired with scope or camera</td> </tr>\r\n                        <tr> <td>X-ray camera</td><td>5000 c</td><td>1.2kg</td><td>Portable x-ray camera, requires source of x rays to see anything</td> </tr>\r\n                        <tr> <td>Digital hacking tool</td><td>3500 c</td><td>2kg</td><td>Assortment of devices used for hacking digital keys, must be usedin combination with computer</td> </tr>\r\n                        <tr> <td>Climbing gear</td><td>1700 c</td><td>3kg</td><td>Assorted tools for climbing, allows for climbing on sheer surfaces, gives +10 to climbing rolls</td> </tr>\r\n                        <tr> <td>Medikit</td><td>4100 c</td><td>2.5kg</td><td>Assorted tools for emergency field surgery and aid.</td> </tr>\r\n                        <tr> <td>Ballistic kit</td><td>400 c</td><td>300g</td><td>Assorted tools for maintaining firearms</td>  </tr>\r\n                        <tr> <td>SCUBA suit</td><td>12000 c</td><td>6g</td><td>Airbreathing underwater </td>  </tr>\r\n                        <tr> <td>Laser protection gear</td><td>500 c</td><td>100g</td><td>Protective gear against damage from laser, protects against blinding.</td>  </tr>\r\n                        <tr> <td>Spy drone</td><td>4000 c</td><td>200g</td><td>Small drone, uses propellers to fly but causes virtually no noice, has a small mounted camera and comes with remote controll (can also be controlled via computer), range 1km.</td>  </tr>\r\n                        <tr> <td>Carrier drone</td><td>9000 c</td><td>2kg</td><td>Medium sized drone, similar to spy drone but can carry 1kg and is not silent.</td>  </tr>\r\n                        <tr> <td>Large carrier drone</td><td>15000 c</td><td>10kg</td><td>Large sized drone, similar to carrier drone, can carry 6kg.</td>  </tr>\r\n                        <tr> <td>Industrial carrier drone</td><td>25000 c</td><td>80kg</td><td>Large sized drone, similar to large carrier but can carry 52kg.</td>  </tr>\r\n                        <tr> <td>H.W. Industrial carrier drone</td><td>35000 c</td><td>250kg</td><td>Heavy weight indistrial carrier drone, capacity 175kg. Basically a small hellicopter</td>  </tr>\r\n                        <tr> <td>Transport drone</td><td>90000 c</td><td>5000kg</td><td>It's a vehicle, capacity 3500kg.</td>  </tr>\r\n                        <tr> <td>Personal solar array</td><td>2000 c</td><td>1kg</td><td>Small scale solar generator, can be used to power any average tool (tools and energy weapons), multiple may be used to recharge small vehicles</td></tr>\r\n                    </tbody>\r\n                </table>\r\n</Indexed>*/}\r\n            <Indexed title='Quality and Condition'>\r\n                <p>Quality and condition are optional rules that can increase variety and make items feel more personal.</p>\r\n                <h4>Condition</h4>\r\n                <p>Condition refers to the wear and tear of an item that is used in skill checks, it is also affected by direct damage and repair.</p>\r\n                <table>\r\n                    <thead>\r\n                        <tr><th>Condition</th><th>Effect</th><th>Value</th></tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr> <td>Pristine</td><td>+2</td><td>100%</td></tr>\r\n                        <tr><td>Intact</td><td>+1</td><td>90%</td></tr>\r\n                        <tr><td>Normal</td><td>+/-0</td><td>80%</td></tr>\r\n                        <tr><td>Used</td><td>-1</td><td>70%</td></tr>\r\n                        <tr><td>Worn</td><td>-2</td><td>60%</td></tr>\r\n                        <tr><td>Damaged</td><td>-3</td><td>50%</td></tr>\r\n                        <tr><td>Broken</td><td>-4</td><td>40%</td></tr>\r\n                    </tbody>\r\n                </table>\r\n                <p>When an item has been used a number of times equal to the users skill it drops in condition by 1 step, a repair skill check can prevent this. A failed repair can cause the quality to drop.</p>\r\n                <p>Someone who knows how to repair an item can always choose to repair them, each time lets you increase the condition by 1 step.</p>\r\n                <p>An item that is allowed to deteriorate below broken can no longer be used for its intended purpose, it is completely ruined.</p>\r\n                <p>Any item is always assumed to be at pristine quality if possible, the player may choose to buy a used item, at which it will cost less. Multiplie factors aways appy multiplicative, a broken trash item costs x 0.4 x 0.4 = 0.16, or 16% of its base value, buying it at start costs therefore 8%.</p>\r\n                <p>Players choosing to buy a house using these factors will take the combined effects to their mental health.</p>\r\n                <h4>Quality</h4>\r\n                <p>Quality refers to the materials used, the precision of the craft and it can even refer to if it's made for one person in particular</p>\r\n                <table>\r\n                    <thead>\r\n                        <tr><th>Quality</th><th>Effect</th><th>Value</th></tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr><td>Superb</td><td>+3</td><td> 1000%</td></tr>\r\n                        <tr><td>Great</td><td>+2</td><td> 300%</td></tr>\r\n                        <tr><td>Good</td><td>+1</td><td> 150%</td></tr>\r\n                        <tr><td>Normal</td><td>+/-0</td><td> 100%</td></tr>\r\n                        <tr><td>Poor</td><td>-1</td><td>90%</td></tr>\r\n                        <tr><td>Bad</td><td>-2</td><td> 70%</td></tr>\r\n                        <tr><td>Awful</td><td>-3</td><td>50%</td></tr>\r\n                        <tr><td>Trash</td><td>-4</td><td> 40%</td></tr>\r\n                    </tbody>\r\n                </table>\r\n                <p>Improving the quality of an item is not possible without supplying new material, these materials need to be of equivalent or higher quality, a failed attempt will consume the materials. A badly failed will reduce condition.</p>\r\n                <p>Items with quality below trash can not be used.</p>\r\n                <p>Items with quality great, superb, awful and trash can generally not be bought on the mainstream market.</p>\r\n            </Indexed>\r\n        </Indexer>\r\n\r\n    </Section>);\r\n}\r\ninterface IArmorTableProps {\r\n    armors: ArmorData[];\r\n}\r\n\r\nconst armorThSizeWide: CSSProperties = {\r\n    width: '30%'\r\n}\r\n\r\nconst ArmorTable: React.FC<IArmorTableProps> = ({ armors }) => {\r\n    return <table>\r\n        <thead>\r\n            <tr>\r\n                <th style={armorThSizeWide}>Name</th>\r\n                <th style={armorThSizeWide}>Damage Absorbtion</th>\r\n                <th>Mod</th>\r\n                <th>Cost</th>\r\n                <th>Weight</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {armors.map(bs => <ArmorRow armor={bs}></ArmorRow>)}\r\n        </tbody>\r\n    </table>;\r\n}\r\ninterface IArmorRow {\r\n    armor: ArmorData;\r\n}\r\nconst ArmorRow: React.FC<IArmorRow> = ({ armor }) => {\r\n    const [descriptionOpen, setDescriptionOpen] = useState(false);\r\n    let extra = '';\r\n    if (armor.armorType === 'powerArmor') {\r\n        const pa: PowerArmor = armor as PowerArmor;\r\n        extra = `| ${pa.strengthMod} | ${pa.perceptionMod}`;\r\n    }\r\n    if (descriptionOpen)\r\n        return <>\r\n            <tr onClick={() => setDescriptionOpen(false)}>\r\n                <td>{armor.name}</td>\r\n                <td>{armor.damageAbsorbtion}</td>\r\n                <td>{armor.agilityMod} {extra}</td>\r\n                <td>{armor.cost}</td>\r\n                <td>{armor.weight}</td>\r\n            </tr>\r\n            <tr><td colSpan={5}><Ellipsis text={armor.description} cutOff={120}></Ellipsis></td></tr>\r\n        </>;\r\n    else\r\n        return (<tr onClick={() => setDescriptionOpen(true)}>\r\n            <td>{armor.name}</td>\r\n            <td>{armor.damageAbsorbtion}</td>\r\n            <td>{armor.agilityMod} {extra} </td>\r\n            <td>{armor.cost}</td>\r\n            <td>{armor.weight}</td>\r\n        </tr>);\r\n}\r\n\r\nconst getSizeMod = (size: CharacterSize) => {\r\n    switch (size) {\r\n        case 'tiny': return 0.8;\r\n        case 'small': return 0.9;\r\n        case 'medium': return 1;\r\n        case 'large': return 1.1;\r\n        case 'huge': return 1.2;\r\n        default: return 1;\r\n    }\r\n}\r\n\r\nconst getProtectionMod = (n: number) => {\r\n    switch (n) {\r\n        case 6: return 1;\r\n        case 5: return .9;\r\n        case 4: return .8;\r\n        case 3: return .7;\r\n        case 2: return .5;\r\n        case 1: return .3;\r\n        default: return 1;\r\n    }\r\n}\r\n\r\nconst getQualityMod = (n: number) => {\r\n    switch (n) {\r\n        case 0: return 1;\r\n        case -1: return .9;\r\n        case -2: return .8;\r\n        case -3: return .7;\r\n        case -4: return .6;\r\n        default: return 1;\r\n    }\r\n}\r\n\r\nconst ArmorCrafter: React.FC = () => {\r\n    const [bodySuit, setBodySuit] = useState<BodySuit | undefined>(undefined);\r\n    const [armorPlate, setArmorPlate] = useState<ArmorPlate | undefined>(undefined);\r\n    const [powerArmor, setPowerArmor] = useState<PowerArmor | undefined>(undefined);\r\n    const [qualityMod, setQualityMod] = useState(0);\r\n    const [size, setSize] = useState<CharacterSize>('medium');\r\n    const [protectionAmount, setProtectionAmount] = useState(6);\r\n\r\n    let defense = 0;\r\n    let cost = 0;\r\n    let weight = 0;\r\n    let agilityMod = 0;\r\n    let strengthMod = 0;\r\n    let perceptionMod = 0;\r\n    if (bodySuit !== undefined) {\r\n        defense += bodySuit.damageAbsorbtion;\r\n        cost += bodySuit.cost;\r\n        weight += bodySuit.weight;\r\n        agilityMod += bodySuit.agilityMod;\r\n    }\r\n    if (armorPlate !== undefined) {\r\n        defense += armorPlate.damageAbsorbtion;\r\n        cost += armorPlate.cost;\r\n        weight += armorPlate.weight;\r\n        agilityMod += armorPlate.agilityMod;\r\n    }\r\n    if (powerArmor !== undefined) {\r\n        defense += powerArmor.damageAbsorbtion;\r\n        cost += powerArmor.cost;\r\n        weight += powerArmor.weight;\r\n        agilityMod += powerArmor.agilityMod;\r\n        strengthMod += powerArmor.strengthMod;\r\n        perceptionMod += powerArmor.perceptionMod;\r\n    }\r\n\r\n    defense += qualityMod;\r\n    let protectionAmountActual = powerArmor === undefined ? protectionAmount : Math.max(protectionAmount, 3);\r\n    cost = cost * getSizeMod(size) * getProtectionMod(protectionAmountActual) * getQualityMod(qualityMod);\r\n    weight = weight * getSizeMod(size) * getProtectionMod(protectionAmountActual);\r\n\r\n    return (<div>\r\n        <p>Customize an armor</p>\r\n        <select onChange={(e) => setBodySuit(bodySuits.find(f => f.name === e.target.value))}>\r\n            <option selected={null === bodySuit}>Bodysuit armor/none</option>\r\n            {bodySuits.map(bs => <option value={bs.name} selected={bodySuit !== undefined && bs.name === bodySuit.name}>\r\n                {bs.name}\r\n            </option>)}\r\n        </select>\r\n        <select onChange={(e) => setArmorPlate(armorPlates.find(f => f.name === e.target.value))}>\r\n            <option selected={null === armorPlate}>Armor plate/none</option>\r\n            {armorPlates.map(ap => <option value={ap.name} selected={armorPlate !== undefined && ap.name === armorPlate.name}>\r\n                {ap.name}\r\n            </option>)}\r\n        </select>\r\n        <select onChange={(e) => setPowerArmor(powerArmors.find(f => f.name === e.target.value))}>\r\n            <option selected={null === powerArmor}>Power armor/none</option>\r\n            {powerArmors.map(pa => <option value={pa.name} selected={powerArmor !== undefined && pa.name === powerArmor.name}>\r\n                {pa.name}\r\n            </option>)}\r\n        </select>\r\n        <br />\r\n        <select onChange={(e) => setQualityMod(parseInt(e.target.value))}>\r\n            <option value='0' selected={qualityMod === 0}>Pristine/intact/Normal</option>\r\n            <option value='-1' selected={qualityMod === -1}>Used</option>\r\n            <option value='-2' selected={qualityMod === -2}>Worn</option>\r\n            <option value='-3' selected={qualityMod === -3}>Damaged</option>\r\n            <option value='-4' selected={qualityMod === -4}>Broken</option>\r\n        </select>\r\n\r\n        <select onChange={(e) => setSize(e.target.value as CharacterSize)}>\r\n            <option selected={size === 'tiny'} value='tiny'>Tiny</option>\r\n            <option selected={size === 'small'} value='small'>Small</option>\r\n            <option selected={size === 'medium'} value='medium'>Medium</option>\r\n            <option selected={size === 'large'} value='large'>Large</option>\r\n            <option selected={size === 'huge'} value='huge'>Huge</option>\r\n        </select>\r\n\r\n        <select onChange={(e) => setProtectionAmount(parseInt(e.target.value))}>\r\n            <option selected={protectionAmount === 6} value='6'>Full</option>\r\n            <option selected={protectionAmount === 5} value='5'>Vast</option>\r\n            <option selected={protectionAmount === 4} value='4'>Major</option>\r\n            <option selected={protectionAmount === 3} value='3'>Half</option>\r\n            <option selected={protectionAmount === 2} value='2'>Small</option>\r\n            <option selected={protectionAmount === 1} value='1'>Minor</option>\r\n        </select>\r\n        <div className='divcol2'>\r\n            <div>\r\n                <b>Damage Absorbtion:</b> {defense}<br />\r\n                <b>Cost:</b> {cost} credits <br />\r\n                <b>Weight:</b> {weightConverter(weight * 1000)}\r\n            </div>\r\n            <div>\r\n                <b>Agility mod</b>: {agilityMod}<br />\r\n                <b>Strength mod</b>: {strengthMod}<br />\r\n                <b>Perception mod</b>: {perceptionMod}\r\n            </div>\r\n        </div>\r\n    </div>);\r\n}\r\n\r\nconst weightConverter = (grams: number) => {\r\n    if (grams < 1000) return `${grams.toFixed(0)}g`;\r\n    if (grams < 1000 * 1000) return `${(grams / 1000).toFixed(1)}kg`;\r\n    return `${(grams / 100000).toFixed(4)} tons`;\r\n}\r\n\r\n\r\ninterface WeaponTableProps {\r\n    data: MeleeWeapon[];\r\n}\r\n\r\nconst WeaponTable: React.FC<WeaponTableProps> = ({ data }) => {\r\n    const s: CSSProperties = {\r\n        borderLeft: '1px dotted lightgrey'\r\n    }\r\n\r\n    return (<table>\r\n        <thead>\r\n            <tr>\r\n                <th>Size</th>\r\n                <th>Name</th>\r\n                <th>Damage</th>\r\n                <th>AP</th>\r\n                <th>HB</th>\r\n                <th>Weight</th>\r\n                <th>Value</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {data.map(weapon => {\r\n                return <tr>\r\n                    <td style={s}>{weapon.size}</td>\r\n                    <td style={s}>{weapon.name}</td>\r\n                    <td style={s}>{weapon.damage}</td>\r\n                    <td style={s}>{weapon.armorpiercing}</td>\r\n                    <td style={s}>{weapon.hitbonus}</td>\r\n                    <td style={s}>{weightConverter(weapon.weight)}</td>\r\n                    <td style={s}>{weapon.value} c</td>\r\n                </tr>\r\n            })}\r\n        </tbody>\r\n    </table>);\r\n}\r\n\r\ninterface FirearmTableProps {\r\n    data: FireArm[];\r\n}\r\n\r\nconst FirearmTable: React.FC<FirearmTableProps> = ({ data }) => {\r\n    return (<table>\r\n        <thead>\r\n            <tr>\r\n                <th>Class</th>\r\n                <th>Name</th>\r\n                <th>Damage</th>\r\n                <th>AP</th>\r\n                <th>HB</th>\r\n                <th>Range</th>\r\n                <th>Action</th>\r\n                <th>Ammo/Cap</th>\r\n                <th>Weight</th>\r\n                <th>Value</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {data.map(f => FireArmRow(f))}\r\n        </tbody>\r\n    </table>)\r\n}\r\n\r\nconst firearmRowStyle: CSSProperties = {\r\n    cursor: 'pointer'\r\n};\r\n\r\nconst getAmmoInfo = (ammo: Ammo): AmmoInformation => {\r\n    const c = AmmoTypesInformation.find(a => a.ammo === ammo);\r\n    if (c !== undefined) return c;\r\n    else throw new Error();\r\n}\r\n\r\nconst FireArmRow = (f: FireArm) => {\r\n    const [descriptionOpen, setDescriptionOpen] = useState(false);\r\n\r\n    return (<><tr style={firearmRowStyle} onClick={() => setDescriptionOpen(!descriptionOpen)}>\r\n        <td>{f.fireArmClass}</td>\r\n        <td>{f.name}</td>\r\n        <td>{f.damage}</td>\r\n        <td>{f.armorpiercing || 0}</td>\r\n        <td>{f.hitbonus || 0}</td>\r\n        <td>{f.range}</td>\r\n        <td>{f.fireAction.join(', ')}</td>\r\n        <td>{f.capacity} ({f.ammo}) {f.rps !== undefined ? '/ rpr: ' + f.rps * 6 : null}</td>\r\n\r\n        <td>{weightConverter(f.weight)}</td>\r\n        <td title={(getAmmoInfo(f.ammo).cost * f.capacity).toFixed(0)}>{f.value}</td>\r\n    </tr>\r\n        {descriptionOpen && <tr>\r\n            <td>STR: {f.strengthRequirement}</td>\r\n            <td>Splash: {f.splashRange !== undefined ? f.splashRange * 2 : ''}{f.lowDamageZone !== undefined ? `;${f.lowDamageZone * 2}` : ''} m diameter</td>\r\n            <td colSpan={8}><Ellipsis text={f.description} cutOff={100} /></td>\r\n        </tr>}\r\n    </>);\r\n}\r\nconst AmmoTable = (ammo: AmmoInformation[]) =>\r\n    <table>\r\n        <thead>\r\n            <tr>\r\n                <th>Type</th>\r\n                <th>Cost (per 1)</th>\r\n                <th>Weight (pet 1)</th>\r\n                <th>Modifications</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {ammo.map(a =>\r\n                <><tr>\r\n                    <td>{a.ammo}</td>\r\n                    <td>{a.cost}</td>\r\n                    <td>{a.weight}</td>\r\n                    <td>\r\n                        {a.types.join(',')}\r\n                    </td>\r\n                </tr>\r\n                    <tr>\r\n                        <td className='univeralBorderBottom' colSpan={4}>{a.description}</td>\r\n                    </tr>\r\n                </>)}\r\n        </tbody>\r\n    </table>;\r\n\r\nexport default Equipment;","import React, { useState } from \"react\";\r\nimport Section from \"./Section\";\r\nimport Indexer, { Indexed } from \"../general/Indexer\";\r\n\r\n\r\nconst Wealth: React.FC = () => {\r\n    return <Section title='Wealth'>\r\n\r\n\r\n        <h2>Wealth</h2>\r\n        <i>Personal wealth varies greatly, while there are ultra rich people players may not start as one. In addition, due to the lack of widespread extreme poverty players will generally start of with wealth in similar orders of magnitude.</i>\r\n        <Indexer title='wealth'>\r\n            <Indexed title='Starting wealth'>\r\n                <p>Every character starts off with a flat 1d100 x 1d100 c </p>\r\n                <WealthRoller />\r\n            </Indexed>\r\n            <Indexed title='Wealth from age'>\r\n\r\n                <p>Additionally your character gets money from working and saving up over time. Gaining different amounts at different stages</p>\r\n                <ul>\r\n                    <li>Age 16-19: 50 c / year</li>\r\n                    <li>Age 20-29: 200 c / year</li>\r\n                    <li>Age 30-49: 400 c / year</li>\r\n                    <li>Age 50-69: 200 c / year</li>\r\n                    <li>Age 60-79: 100 c / year</li>\r\n                    <li>Age 80+: 50 c / year</li>\r\n                </ul>\r\n                <WealthCalculator />\r\n                <p>This is then multiplied by your profession, keep in mind that your your character has different professions over different ages then you need to apply those per category</p>\r\n                <p>Professions also require a certain amount of skill point investment (perks count), with higher multiplier at higher rates</p>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Profession</th>\r\n                            <th>Skills</th>\r\n                            <th>1st mult req</th>\r\n                            <th>1st mult</th>\r\n                            <th>2nd mult req</th>\r\n                            <th>2n mult</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>None of the below</td>\r\n                            <td>any</td>\r\n                            <td>300</td>\r\n                            <td>x1.5</td>\r\n                            <td>400</td>\r\n                            <td>x2</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Doctor</td>\r\n                            <td>Medicine</td>\r\n                            <td>90</td>\r\n                            <td>3x</td>\r\n                            <td>120</td>\r\n                            <td>4x</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Engineer</td>\r\n                            <td>Computer, Mechanics</td>\r\n                            <td>80</td>\r\n                            <td>x2</td>\r\n                            <td>140</td>\r\n                            <td>x2.5</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Scientist</td>\r\n                            <td>computer, science</td>\r\n                            <td>120</td>\r\n                            <td>x1.5</td>\r\n                            <td>140</td>\r\n                            <td>x2</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Pilot</td>\r\n                            <td>Pilot</td>\r\n                            <td>80</td>\r\n                            <td>x1.5</td>\r\n                            <td>120</td>\r\n                            <td>x2</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Salesman</td>\r\n                            <td>persuation, empathy</td>\r\n                            <td>60</td>\r\n                            <td>x1.5</td>\r\n                            <td>90</td>\r\n                            <td>x2</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Soldier/Police</td>\r\n                            <td>firearms, survival, stealth, combat, athletics, investigation</td>\r\n                            <td>120</td>\r\n                            <td>x1.5</td>\r\n                            <td>180</td>\r\n                            <td>x3</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Attorney</td>\r\n                            <td>empathy, intimidation, persuation, subtrefuge</td>\r\n                            <td>160</td>\r\n                            <td>x2</td>\r\n                            <td>240</td>\r\n                            <td>x3</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Entrepreneur/Trader/Middle Management</td>\r\n                            <td>empathy, intimidation, investigation, persuation, subtrefuge</td>\r\n                            <td>150</td>\r\n                            <td>x1.5</td>\r\n                            <td>250</td>\r\n                            <td>x2.5</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </Indexed>\r\n            <Indexed title='Starting items'>\r\n                <p>Any items/housing/etc you buy at character creation cost 50% less, for example a computer costs only 1000 c if you buy it at character creation.</p>\r\n                <p>Additionally any item costing 10,000 c (before discount) or more may be paid via partial payment, you may spend up to 100x your total starting wealth on any item where you pay 1/200 of its value every month for 30 years (this is to include principal etc)</p>\r\n            </Indexed>\r\n            <Indexed title='Housing'>\r\n                <p>You may choose to buy a house or apartment using a partial payment mortage, costing 40,000 c per square meter (min 20)</p>\r\n                <p>If not you may choose to rent a house or apartment for a monthly fee of 100 c per square meter (min 20)</p>\r\n                <p>In either of these are included running water, electricity, internet connection, food is an additional 3000 c per month generally</p>\r\n                <p>You may also choose to be homeless or even sell your house at the start of the game, however take note that being on your own is extremely dangerous and not recommended</p>\r\n            </Indexed>\r\n            <Indexed title='Your job'>\r\n\r\n                <p>It is recommended that you start out with a job, a job will pay out 8,000 c a month. If you choose a job in the above tabel the multiplier also applies to this amount.</p>\r\n                <h4>An adventurer job</h4>\r\n                <p>Once the game starts the DM may choose to give your character an adventuring job of some description, the recommended amount is 10,000 c per month plus bonus based on performance. Or 4,000 c if housing and food is provided by the job.</p>\r\n                <h4>Grand Larceny</h4>\r\n                <p>Crime generally doesn't pay, but your character may choose to start off with a criminal record. Roll 1d6 if you choose to be a criminal.<br />\r\n        It is also expected that your character has spent at least 30 points into the larceny skill</p>\r\n                <table>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>1</td>\r\n                            <td>You have been caught multiple times for your crimes and are a well known criminal, you start with reduced privileges according to the DMs discression and you start off with 50% less wealth</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>2</td>\r\n                            <td>You have been caught at least once and as such are a known criminal, you may be recognized and forfeit any profession mutliplier.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>3</td>\r\n                            <td>You have done some small petty crime and never been caught for it, you start with 500 c extra.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>4</td>\r\n                            <td>You have regularly committed petty crimes and never been caught, you start with 1,000 c extra.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>5</td>\r\n                            <td>You have committed at least one felony (violent crime) and is suspected for it, you start with 500 c extra</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>6</td>\r\n                            <td>You are a successful career criminal, the law enforcement knows you are guilty but can't prove it, you have several connections and start with 3,000 c extra.</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </Indexed>\r\n        </Indexer>\r\n    </Section>\r\n}\r\n\r\nconst Roll1D100 = () => Math.floor((Math.random() * 100) + 1);\r\n\r\nconst WealthRoller = () => {\r\n    const [firstD100, setFirstD100] = useState(0);\r\n    const [secondD100, setSecondD100] = useState(0);\r\n    const ReRoll = () => {\r\n        setFirstD100(Roll1D100());\r\n        setSecondD100(Roll1D100());\r\n    }\r\n    return <><button onClick={() => ReRoll()}>Roll</button>{firstD100} x {secondD100} = {firstD100 * secondD100} c</>\r\n}\r\n\r\nconst WealthCalculator: React.FC = () => {\r\n    const [age, setAge] = useState(24);\r\n    const [multiplier, setMultiplier] = useState(1);\r\n\r\n    let credits = 0;\r\n    for (let a = 0; a < age; a++) {\r\n        if (a < 16) continue;\r\n        else if (a < 20) credits += 50;\r\n        else if (a < 30) credits += 200;\r\n        else if (a < 50) credits += 400;\r\n        else if (a < 60) credits += 100;\r\n        else credits += 50;\r\n    }\r\n    return <>\r\n        <input style={{ width: '15%' }} value={age} type='text' onChange={(e) => setAge(parseInt(e.target.value))} ></input> age |\r\n        <input style={{ width: '15%' }} value={multiplier} type='text' onChange={(e) => setMultiplier(parseFloat(e.target.value))} ></input> multiplier<br />\r\n        Credits: {credits * multiplier}\r\n    </>;\r\n}\r\n\r\nexport default Wealth;","\r\nexport type Medium = 'land' | 'air' | 'water' | 'subwater' | 'space' | 'hyperspace';\r\n\r\nexport interface FuelType {\r\n    name: string;\r\n    description: string;\r\n    cost: number;\r\n}\r\n\r\n\r\nexport const Electricity: FuelType = {\r\n    name: 'electricity',\r\n    description: 'requires battery to hold charge',\r\n    cost: 0.01\r\n};\r\n\r\nexport const Synthoil: FuelType = {\r\n    name: 'synthoil',\r\n    description: 'synthetic hydrocarbon based oil',\r\n    cost: 20,\r\n};\r\n\r\nexport const RocketFuel: FuelType = {\r\n    name: 'rocket fuel',\r\n    description: 'cryogenic methane and oxygen, stored in cryogenic tanks. 3.5:1 ratio methane:oxygen',\r\n    cost: 40,\r\n};\r\n\r\nexport const TritiumDeuterium: FuelType = {\r\n    name: 'tritium deuterium',\r\n    description: 'mixture of tritium and deuterium used to run micro fusion powerplants, 1 unit of this creates 10 million electricity units, tritium is radioactive',\r\n    cost: 150000,\r\n};\r\n\r\nexport const DeuteriumLithium: FuelType = {\r\n    name: 'deuterium lithium',\r\n    description: 'mixture of deuterium and lithium used to run small, medium and large fusion powerplants, 1 unit of this creates 20 million electricity units',\r\n    cost: 30000,\r\n}\r\n\r\nexport const HyperMatter: FuelType = {\r\n    name: 'exotic hypermatter',\r\n    description: 'a exotic matter which has strange properties like negative energy',\r\n    cost: 2000000,\r\n}\r\n\r\nexport interface Part {\r\n    name: string;\r\n    description: string;\r\n    cost: number;\r\n    weightKg: number;\r\n}\r\n\r\nexport interface EnergyConverter {\r\n    input: FuelType;\r\n    output: FuelType;\r\n    convertionRatio: number;\r\n    convertionSpeed: number;\r\n}\r\n\r\nexport interface Thruster {\r\n    fuelUse: FuelType;\r\n    fuelUnitsConsumeRate: number;\r\n    impulseKn: number;\r\n}\r\n\r\nexport interface PassengerSection {\r\n    passengerCount: number;\r\n    cargoPerPerson: number;\r\n    isEnclosed: boolean;\r\n    isLivingSpace: boolean;\r\n    meterSquarePerPerson: number;\r\n}\r\n\r\nexport const MicroFusionCell: Part & EnergyConverter = {\r\n    name: 'Micro Fusion Cell',\r\n    description: 'uses Tritium Deuterium fusion fuel, can generate up to 1 unity of electricity per second',\r\n    cost: 500000,\r\n    weightKg: 5000,\r\n    input: TritiumDeuterium,\r\n    output: Electricity,\r\n    convertionRatio: 1 / 10000000,\r\n    convertionSpeed: 1,\r\n};\r\n\r\nexport const SmallFusionCell: Part & EnergyConverter = {\r\n    name: 'Small Fusion Cell',\r\n    description: 'uses Deuterium lithium fusion fuel, can generate up to 5 unity of electricity per second',\r\n    cost: 1500000,\r\n    weightKg: 15000,\r\n    input: DeuteriumLithium,\r\n    output: Electricity,\r\n    convertionRatio: 1 / 100000000,\r\n    convertionSpeed: 5,\r\n};\r\n\r\nexport const MediumFusionCell: Part & EnergyConverter = {\r\n    name: 'Medium Fusion Cell',\r\n    description: 'uses Deuterium lithium fusion fuel, can generate up to 25 unity of electricity per second',\r\n    cost: 5000000,\r\n    weightKg: 50000,\r\n    input: DeuteriumLithium,\r\n    output: Electricity,\r\n    convertionRatio: 1 / 100000000,\r\n    convertionSpeed: 25,\r\n};\r\n\r\nexport const LargeFusionCell: Part & EnergyConverter = {\r\n    name: 'Large Fusion Cell',\r\n    description: 'uses Deuterium lithium fusion fuel, can generate up to 300 unity of electricity per second',\r\n    cost: 40000000,\r\n    weightKg: 500000,\r\n    input: DeuteriumLithium,\r\n    output: Electricity,\r\n    convertionRatio: 1 / 100000000,\r\n    convertionSpeed: 300,\r\n};\r\n\r\nexport const HugeFusionCell: Part & EnergyConverter = {\r\n    name: 'Huge Fusion Cell',\r\n    description: 'uses Deuterium lithium fusion fuel, can generate up to 3500 unity of electricity per second',\r\n    cost: 400000000,\r\n    weightKg: 5000000,\r\n    input: DeuteriumLithium,\r\n    output: Electricity,\r\n    convertionRatio: 1 / 100000000,\r\n    convertionSpeed: 3500,\r\n};\r\n\r\nexport const FusionPowerPlant: Part & EnergyConverter = {\r\n    name: 'Fusion Power Plant',\r\n    description: 'uses Deuterium lithium fusion fuel, can generate up to 40000 unity of electricity per second',\r\n    cost: 4000000000,\r\n    weightKg: 50000000,\r\n    input: DeuteriumLithium,\r\n    output: Electricity,\r\n    convertionRatio: 1 / 100000000,\r\n    convertionSpeed: 40000,\r\n};\r\n\r\nexport const ElectricMotor: Part & Thruster = {\r\n    name: 'Electric Motor',\r\n    description: 'Electric motor, converts electric units into mechanical movement',\r\n    cost: 1000,\r\n    weightKg: 1,\r\n    fuelUse: Electricity,\r\n    fuelUnitsConsumeRate: 1,\r\n    impulseKn: 6.5,\r\n};\r\n\r\nexport const ElectricPropeller: Part & Thruster = {\r\n    name: 'Electric Propeller',\r\n    description: 'Electric propeller, converts electric units into thrust',\r\n    cost: 10000,\r\n    weightKg: 10,\r\n    fuelUse: Electricity,\r\n    fuelUnitsConsumeRate: 9,\r\n    impulseKn: 65\r\n};\r\n\r\nexport const MicroFusionThruster: Part & Thruster = {\r\n    name: 'Fusion Thruster',\r\n    description: 'Taps into a fusion power cell to create propulsion',\r\n    cost: 100000,\r\n    weightKg: 1000,\r\n    fuelUse: TritiumDeuterium,\r\n    fuelUnitsConsumeRate: 1,\r\n    impulseKn: 1140\r\n};\r\n\r\nexport const FusionThruster: Part & Thruster = {\r\n    name: 'Fusion Thruster',\r\n    description: 'Taps into a fusion power cell to create propulsion',\r\n    cost: 150000,\r\n    weightKg: 1000,\r\n    fuelUse: DeuteriumLithium,\r\n    fuelUnitsConsumeRate: 1,\r\n    impulseKn: 2280\r\n};\r\n\r\nexport const InternalCombusionEngine: Part & Thruster = {\r\n    name: 'Internal Combusion Engine',\r\n    description: 'Converts synthoil units into mechanical movement',\r\n    cost: 900,\r\n    weightKg: 1,\r\n    fuelUse: Synthoil,\r\n    fuelUnitsConsumeRate: 1,\r\n    impulseKn: 6.5,\r\n};\r\n\r\nexport const JetEngine: Part & Thruster = {\r\n    name: 'Jet Engine',\r\n    description: 'Converts synthoil units into air propulsion',\r\n    cost: 2000,\r\n    weightKg: 2,\r\n    fuelUse: Synthoil,\r\n    fuelUnitsConsumeRate: 1,\r\n    impulseKn: 10,\r\n};\r\n\r\nexport const RocketEngine: Part & Thruster = {\r\n    name: 'Rocket Engine',\r\n    description: 'Converts rocket fuel units into propulsion',\r\n    cost: 5000,\r\n    weightKg: 2,\r\n    fuelUse: RocketFuel,\r\n    fuelUnitsConsumeRate: 5,\r\n    impulseKn: 500,\r\n};\r\n\r\nexport const SmallHabitatSection: Part & PassengerSection = {\r\n    name: 'Small habitat section',\r\n    description: 'Can house 3 people, includes base amenities and storage, radiation shielding, airtight. 7 meter radius 2.5 meter tall cylinder',\r\n    cost: 7000,\r\n    weightKg: 7000,\r\n    passengerCount: 3,\r\n    cargoPerPerson: 10,\r\n    isEnclosed: true,\r\n    isLivingSpace: true,\r\n    meterSquarePerPerson: 30,\r\n};\r\n\r\nexport const MediumHabitatSection: Part & PassengerSection = {\r\n    name: 'Small habitat section',\r\n    description: 'Can house 9 people, includes base amenities and storage, radiation shielding, airtight. 19 meter radius 2.5 meter tall cylinder',\r\n    cost: 19000,\r\n    weightKg: 19000,\r\n    passengerCount: 9,\r\n    cargoPerPerson: 10,\r\n    isEnclosed: true,\r\n    isLivingSpace: true,\r\n    meterSquarePerPerson: 30,\r\n};\r\n\r\nexport const LargeHabitatSection: Part & PassengerSection = {\r\n    name: 'Small habitat section',\r\n    description: 'Can house 31 people, includes base amenities and storage, radiation shielding, airtight. 30 meter radius 2.5 meter tall cylinder',\r\n    cost: 30000,\r\n    weightKg: 30000,\r\n    passengerCount: 31,\r\n    cargoPerPerson: 10,\r\n    isEnclosed: true,\r\n    isLivingSpace: true,\r\n    meterSquarePerPerson: 30,\r\n};\r\n\r\nexport const HugeHabitatSection: Part & PassengerSection = {\r\n    name: 'Small habitat section',\r\n    description: 'Can house 31 people, includes base amenities and storage, radiation shielding, airtight. 61 meter radius 2.5 meter tall cylinder',\r\n    cost: 30000,\r\n    weightKg: 30000,\r\n    passengerCount: 97,\r\n    cargoPerPerson: 15,\r\n    isEnclosed: true,\r\n    isLivingSpace: true,\r\n    meterSquarePerPerson: 40,\r\n};\r\n\r\n\r\n\r\nexport const Parts: Part[] = [\r\n    MicroFusionCell, SmallFusionCell, MediumFusionCell, LargeFusionCell, HugeFusionCell, FusionPowerPlant,\r\n    ElectricMotor, ElectricPropeller, MicroFusionThruster, FusionThruster, InternalCombusionEngine, JetEngine, RocketEngine\r\n];\r\n\r\nexport const AllFuelTypes: FuelType[] = [\r\n    Electricity, Synthoil, RocketFuel, TritiumDeuterium, DeuteriumLithium, HyperMatter\r\n]\r\n\r\nexport interface FuelEngine extends FuelType {\r\n    maxUnits?: number;\r\n    maxUsage?: number;\r\n}\r\n\r\nexport interface Vehicle {\r\n    medium: Medium[];\r\n    name: string;\r\n    passengers: number;\r\n    cargoKg: number;\r\n    fuelType: FuelEngine[];\r\n    parts: Part[];\r\n    range: number;\r\n    topSpeed: number;\r\n    acceleration: number;\r\n    cost: number;\r\n    description: string;\r\n}\r\n\r\n\r\n\r\nexport interface IRollAmount {\r\n    numberOf1d100:number;\r\n    sidesPerDice:number;\r\n    text:string;\r\n}\r\n\r\nexport interface IDamageAmount {\r\n    damageAmountNumber:number;\r\n    damageText: string,\r\n}","import { Vehicle, Electricity } from \"./Vehicles\";\r\n\r\nconst LandVehicles: Vehicle[] = [\r\n    {\r\n        name: 'bicyle',\r\n        medium: ['land'],\r\n        passengers: 1,\r\n        cargoKg: 1,\r\n        fuelType: [],\r\n        range: 0,\r\n        topSpeed: 15,\r\n        acceleration: 5,\r\n        cost: 1000,\r\n        description: 'simple bicycle, speed and range depends on person using it (see athletics run, add 100% speed and range)',\r\n        parts: [],\r\n    },\r\n    {\r\n        name: 'motorcycle',\r\n        medium: ['land'],\r\n        passengers: 2,\r\n        cargoKg: 10,\r\n        fuelType: [Electricity],\r\n        range: 900,\r\n        topSpeed: 55,\r\n        acceleration: 7,\r\n        cost: 5000,\r\n        description: 'electric motorcycle',\r\n        parts: [],\r\n    },\r\n    {\r\n        name: 'quadbike',\r\n        medium: ['land'],\r\n        passengers: 2,\r\n        cargoKg: 20,\r\n        fuelType: [Electricity],\r\n        range: 800,\r\n        topSpeed: 35,\r\n        acceleration: 6,\r\n        cost: 6000,\r\n        description: 'electric quadcycle',\r\n        parts: [],\r\n    },\r\n    {\r\n        name: 'sedan',\r\n        medium: ['land'],\r\n        passengers: 4,\r\n        cargoKg: 100,\r\n        fuelType: [Electricity],\r\n        range: 1000,\r\n        topSpeed: 50,\r\n        acceleration: 8,\r\n        cost: 20000,\r\n        description: 'basic car',\r\n        parts: [],\r\n    },\r\n    {\r\n        name: 'van',\r\n        medium: ['land'],\r\n        passengers: 8,\r\n        cargoKg: 150,\r\n        fuelType: [Electricity],\r\n        range: 1200,\r\n        topSpeed: 45,\r\n        acceleration: 7,\r\n        cost: 40000,\r\n        description: 'large car with lots of space',\r\n        parts: [],\r\n    },\r\n    {\r\n        name: 'campervan',\r\n        medium: ['land'],\r\n        passengers: 8,\r\n        cargoKg: 250,\r\n        fuelType: [Electricity],\r\n        range: 2000,\r\n        topSpeed: 40,\r\n        acceleration: 5,\r\n        cost: 90000,\r\n        description: 'truck fitted with housing, huge battery capacity',\r\n        parts: [],\r\n    },\r\n];\r\n\r\nexport default LandVehicles;","import { Electricity, Vehicle } from \"./Vehicles\";\r\n\r\nconst WaterVehicles: Vehicle[] = [\r\n    {\r\n        name: 'paddle boat',\r\n        medium: ['water'],\r\n        passengers: 6,\r\n        cargoKg: 50,\r\n        fuelType: [],\r\n        range: 0,\r\n        topSpeed: 2,\r\n        acceleration: 1,\r\n        cost: 2000,\r\n        description: 'basic paddleboat',\r\n        parts: [],\r\n    },\r\n    {\r\n        name: 'jetski',\r\n        medium: ['water'],\r\n        passengers: 2,\r\n        cargoKg: 20,\r\n        fuelType: [Electricity],\r\n        range: 80,\r\n        topSpeed: 55,\r\n        acceleration: 7,\r\n        cost: 10000,\r\n        description: 'fast moving water ski',\r\n        parts: [],\r\n    },\r\n    {\r\n        name: 'speed boat',\r\n        medium: ['water'],\r\n        passengers: 8,\r\n        cargoKg: 100,\r\n        fuelType: [Electricity],\r\n        range: 500,\r\n        topSpeed: 45,\r\n        acceleration: 5,\r\n        cost: 40000,\r\n        description: 'electric speed boat',\r\n        parts: [],\r\n    },\r\n    {\r\n        name: 'yacht',\r\n        medium: ['water'],\r\n        passengers: 20,\r\n        cargoKg: 10000,\r\n        fuelType: [Electricity],\r\n        range: 12000,\r\n        topSpeed: 40,\r\n        acceleration: 3,\r\n        cost: 100000,\r\n        description: 'luxury boat often fitted with solar panels to allow slow recharge anywhere',\r\n        parts: [],\r\n    },\r\n    {\r\n        name: 'cruiser',\r\n        medium: ['water'],\r\n        passengers: 1200,\r\n        cargoKg: 20000000,\r\n        fuelType: [Electricity],\r\n        range: 2000000,\r\n        topSpeed: 14,\r\n        acceleration: 1,\r\n        cost: 3500000,\r\n        description: 'cruiser fitted with on board small fusion generator capable of running for years without refueling',\r\n        parts: [],\r\n    },\r\n    {\r\n        name: 'battleship',\r\n        medium: ['water'],\r\n        passengers: 1000,\r\n        cargoKg: 20000000,\r\n        fuelType: [Electricity],\r\n        range: 2000000,\r\n        topSpeed: 22,\r\n        acceleration: 0.8,\r\n        cost: 150000000,\r\n        description: 'battleship fitted with on board small fusion generator, large railguns and laser cannons',\r\n        parts: [],\r\n    },\r\n    {\r\n        name: 'submarine',\r\n        medium: ['water', 'subwater'],\r\n        passengers: 40,\r\n        cargoKg: 10000,\r\n        fuelType: [Electricity],\r\n        range: 1000000,\r\n        topSpeed: 12,\r\n        acceleration: 1,\r\n        cost: 70000000,\r\n        description: 'fusion powered submarine',\r\n        parts: [],\r\n    }\r\n];\r\n\r\nexport default WaterVehicles;","import { HyperMatter, Electricity, Synthoil, RocketFuel, Vehicle, MicroFusionCell, MicroFusionThruster, SmallHabitatSection } from \"./Vehicles\";\r\n\r\nconst SpaceVehicles: Vehicle[] = [\r\n    {\r\n        name: 'rocketship',\r\n        medium: ['air', 'space'],\r\n        passengers: 4,\r\n        cargoKg: 10000,\r\n        fuelType: [RocketFuel],\r\n        range: 0,\r\n        topSpeed: 24000,\r\n        acceleration: 45,\r\n        cost: 450000000,\r\n        description: 'rocket ship capable of taking off and landing on any planet with less than 3g atmosphere, space capable, radiation shield for interplanetary travel, needs refuel and service every trip, service price 20% of total value',\r\n        parts: []\r\n    },\r\n    {\r\n        name: 'spaceplane',\r\n        medium: ['air', 'space'],\r\n        passengers: 4,\r\n        cargoKg: 10000,\r\n        fuelType: [Synthoil, RocketFuel],\r\n        range: 0,\r\n        topSpeed: 36000,\r\n        acceleration: 40,\r\n        cost: 900000000,\r\n        description: 'hypersonic airplane with rocket switch, capable of both flying through air and space, only needs refuel and basic service after every use',\r\n        parts: []\r\n    },\r\n    {\r\n        name: 'Ferry Class Spaceship',\r\n        medium: ['space'],\r\n        passengers: 10,\r\n        cargoKg: 100000,\r\n        fuelType: [Electricity],\r\n        range: 0,\r\n        topSpeed: 2008000,\r\n        acceleration: 3,\r\n        cost: 10000000,\r\n        description: 'small sized space ship, fitted with micro fusion power, capable of maintaining 0.3g for 8 days without refueling, ' +\r\n            'virtually unlimited range within a solar system. ' +\r\n            '380 metric ton dry mass 18m long, 7m radius, 11 metric ton fusion fuel',\r\n        parts: [MicroFusionCell, MicroFusionThruster, MicroFusionThruster, MicroFusionThruster, MicroFusionThruster, MicroFusionThruster, MicroFusionThruster, MicroFusionThruster, MicroFusionThruster, MicroFusionThruster, SmallHabitatSection, SmallHabitatSection, SmallHabitatSection]\r\n    },\r\n    {\r\n        name: 'Freighter Class Spaceship',\r\n        medium: ['space'],\r\n        passengers: 100,\r\n        cargoKg: 1000000,\r\n        fuelType: [Electricity],\r\n        range: 0,\r\n        topSpeed: 2600000,\r\n        acceleration: 3,\r\n        cost: 30000000,\r\n        description: 'medium sized space ship, fitted with micro fusion power, capable of maintaining 0.3g for 10 days without refueling, ' +\r\n            'virtually unlimited range within a solar system. ' +\r\n            '3,100 metric ton dry mass, 42m long, 19m radius 108 metric ton fusion fuel',\r\n        parts: []\r\n    },\r\n    {\r\n        name: 'Interceptor Class Spaceship',\r\n        medium: ['space'],\r\n        passengers: 80,\r\n        cargoKg: 500000,\r\n        fuelType: [Electricity],\r\n        range: 0,\r\n        topSpeed: 26000000,\r\n        acceleration: 5,\r\n        cost: 32000000,\r\n        description: 'medium sized space ship, fitted with micro fusion power, capable of maintaining 0.5g for 60 days without refueling, ' +\r\n            'virtually unlimited range within a solar system, but in particular designed for extreme range and interception. ' +\r\n            '3,100 metric ton dry mass, 42m long, 19m radius, 50000 metric ton fusion fuel',\r\n        parts: []\r\n    },\r\n    {\r\n        name: 'Cruiser Class Spaceship',\r\n        medium: ['space'],\r\n        passengers: 1000,\r\n        cargoKg: 10000000,\r\n        fuelType: [Electricity],\r\n        range: 0,\r\n        topSpeed: 2600000,\r\n        acceleration: 3,\r\n        cost: 150000000,\r\n        description: 'large space ship, fitted with small fusion power, capable of maintaining 0.3g for 10 days without refueling, ' +\r\n            'virtually unlimited range within a solar system. ' +\r\n            '24,720 metric ton dry mass, 170m long, 30m radius, 820 metric ton fusion fuel',\r\n        parts: []\r\n    },\r\n    {\r\n        name: 'Battleship Class Spaceship',\r\n        medium: ['space'],\r\n        passengers: 10000,\r\n        cargoKg: 100000000,\r\n        fuelType: [Electricity],\r\n        range: 0,\r\n        topSpeed: 2600000,\r\n        acceleration: 3,\r\n        cost: 750000000,\r\n        description: 'huge space ship, fitted with fusion power, capable of maintaining 0.3g for 10 days without refueling, ' +\r\n            'virtually unlimited range within a solar system. ' +\r\n            '180,000 metric ton dry mass, 480m long, 61m radius, 8200 metric ton fusion fuel',\r\n        parts: []\r\n    },\r\n    {\r\n        name: 'Hyperspace Class Spaceship',\r\n        medium: ['space', 'hyperspace'],\r\n        passengers: 10000,\r\n        cargoKg: 100000000,\r\n        fuelType: [Electricity, HyperMatter],\r\n        range: 0,\r\n        topSpeed: 2600000,\r\n        acceleration: 3,\r\n        cost: 1500000000,\r\n        description: 'huge space ship, fitted with fusion power, capable of maintaining 0.3g for 10 days without refueling,' +\r\n            ' virtually unlimited range within a solar system, can enter hyperspace and travel up to 50 times the speed of light. ' +\r\n            '200,000 metric ton dry mass, 480m long, 70m radius, 8300 metric ton fusion fuel',\r\n        parts: []\r\n    },\r\n];\r\n\r\nexport default SpaceVehicles;","import { Synthoil, Electricity, Vehicle, IRollAmount, IDamageAmount } from \"./Vehicles\";\r\n\r\nexport const airVehicleParts:string[] = ['cockpit nose', 'cockpit window', 'side window', 'enterance',\r\n'front landing gear', 'hind left landing gear', 'hind right landing gear', 'pitch stabilizer', 'pitch elevator',\r\n'yaw stabilizer', 'yaw elevator', 'front or left engine','front or right engine','front or left propeller blades/jet turbine',\r\n'front or right propeller blades/jet turbine','left or front engine mount','right or front engine mount','left wing', 'left elevator',\r\n'right wing', 'right elevator', 'left spoiler', 'right spoiler', 'front fuselage', 'mid fuselage', 'hind fuselage',\r\n'left battery core/fuel tank','right battery core/fuel tank', 'computer', 'antenna', 'speaker', 'cockpit systems display', 'navigation controls',\r\n'radar display', 'radar', 'navigation display','control wheel','throttle lever', 'altitude meter','gyrometer','compass','internal camera','external camers'];\r\n\r\nexport const rollAmounts:IRollAmount[] = [\r\n    {\r\n        text:'Land safely with 15 points to spare',\r\n        numberOf1d100: 0,\r\n        sidesPerDice: 0,\r\n    },\r\n    {\r\n        text: 'Land safely',\r\n        numberOf1d100: 1,\r\n        sidesPerDice:1,\r\n    },\r\n    {\r\n        text: 'Crashland safely',\r\n        numberOf1d100: 2,\r\n        sidesPerDice:4,\r\n    },\r\n    {\r\n        text: 'Crashland violently',\r\n        numberOf1d100: 4,\r\n        sidesPerDice:6,\r\n    },\r\n    {\r\n        text: 'Crashland catastrophically',\r\n        numberOf1d100: 10,\r\n        sidesPerDice:6,\r\n    }\r\n];\r\n\r\nexport const airVehicleDamageTexts:IDamageAmount[] = [\r\n    {\r\n        damageAmountNumber: 0,\r\n        damageText: 'pristine',\r\n    },\r\n    {\r\n        damageAmountNumber: 1,\r\n        damageText: 'worn',\r\n    },\r\n    {\r\n        damageAmountNumber: 2,\r\n        damageText: 'Slightly damaged',\r\n    },\r\n    {\r\n        damageAmountNumber: 3,\r\n        damageText: 'Moderately damaged',\r\n    },\r\n    {\r\n        damageAmountNumber: 4,\r\n        damageText: 'Severely damaged',\r\n    },\r\n    {\r\n        damageAmountNumber: 5,\r\n        damageText: 'Extremely damaged',\r\n    },\r\n    {\r\n        damageAmountNumber: 6,\r\n        damageText: 'Obliterated',\r\n    }\r\n];\r\n\r\nconst AirVehicles: Vehicle[] = [\r\n    {\r\n        name: 'tiny airplane',\r\n        medium: ['air'],\r\n        passengers: 2,\r\n        cargoKg: 50,\r\n        fuelType: [Electricity],\r\n        range: 600,\r\n        topSpeed: 130,\r\n        acceleration: 20,\r\n        cost: 35000,\r\n        description: 'tiny electric airplane with high speed and low range',\r\n        parts: [],\r\n    },\r\n    {\r\n        name: 'small cargoplane',\r\n        medium: ['air'],\r\n        passengers: 4,\r\n        cargoKg: 200,\r\n        fuelType: [Electricity],\r\n        range: 700,\r\n        topSpeed: 120,\r\n        acceleration: 18,\r\n        cost: 80000,\r\n        description: 'small electric cargoplane with low range and decent speed',\r\n        parts: [],\r\n    },\r\n    {\r\n        name: 'medium cargoplane',\r\n        medium: ['air'],\r\n        passengers: 10,\r\n        cargoKg: 2000,\r\n        fuelType: [Electricity],\r\n        range: 800,\r\n        topSpeed: 120,\r\n        acceleration: 18,\r\n        cost: 160000,\r\n        description: 'medium electric cargoplane with low range and decent speed',\r\n        parts: [],\r\n    },\r\n    {\r\n        name: 'large cargoplane',\r\n        medium: ['air'],\r\n        passengers: 25,\r\n        cargoKg: 6200,\r\n        fuelType: [Electricity],\r\n        range: 900,\r\n        topSpeed: 110,\r\n        acceleration: 15,\r\n        cost: 640000,\r\n        description: 'medium electric cargoplane with low range and decent speed',\r\n        parts: [],\r\n    },\r\n    {\r\n        name: 'huge electroplane',\r\n        medium: ['air'],\r\n        passengers: 100,\r\n        cargoKg: 500,\r\n        fuelType: [Electricity],\r\n        range: 1500,\r\n        topSpeed: 130,\r\n        acceleration: 22,\r\n        cost: 50000000,\r\n        description: 'large airplane capable of medium range flight',\r\n        parts: [],\r\n    },\r\n    {\r\n        name: 'airship',\r\n        medium: ['air'],\r\n        passengers: 200,\r\n        cargoKg: 4000,\r\n        fuelType: [Electricity],\r\n        range: 1000000,\r\n        topSpeed: 140,\r\n        acceleration: 24,\r\n        cost: 120000000,\r\n        description: 'massive electric airplane fitted with micro fusion capable of staying airborne for months',\r\n        parts: [],\r\n    },\r\n    {\r\n        name: 'fighterplane',\r\n        medium: ['air'],\r\n        passengers: 2,\r\n        cargoKg: 10,\r\n        fuelType: [Electricity, Synthoil],\r\n        range: 600,\r\n        topSpeed: 410,\r\n        acceleration: 40,\r\n        cost: 40000000,\r\n        description: 'super sonic electric airplane, switches to jetfuel when going super sonic, fitted with laser cannons',\r\n        parts: [],\r\n    },\r\n    {\r\n        name: 'hyperplane',\r\n        medium: ['air'],\r\n        passengers: 2,\r\n        cargoKg: 10,\r\n        fuelType: [Synthoil],\r\n        range: 1200,\r\n        topSpeed: 3400,\r\n        acceleration: 45,\r\n        cost: 60000000,\r\n        description: 'hyper sonic airplane, uses synthetic jetfuel, capable of hypersonic cruise',\r\n        parts: [],\r\n    },\r\n];\r\n\r\nexport default AirVehicles;","import React, { useState, useReducer } from \"react\";\r\nimport Section from \"./Section\";\r\nimport Ellipsis from \"../general/Ellipsis\";\r\nimport Indexer, { Indexed } from \"../general/Indexer\";\r\nimport { IDamageAmount, IRollAmount, Vehicle } from \"../vehicles/Vehicles\";\r\nimport LandVehicles from \"../vehicles/LandVehicles\";\r\nimport WaterVehicles from \"../vehicles/WaterVehicles\";\r\nimport SpaceVehicles from \"../vehicles/SpaceVehicles\";\r\nimport AirVehicles, { airVehicleDamageTexts, airVehicleParts, rollAmounts } from \"../vehicles/AirVehicles\";\r\n\r\n\r\nconst Vehicles: React.FC = () => {\r\n    return <Section title='Vehicles'>\r\n        <Indexer title='Vehicles'>\r\n            <Indexed title='Land vehicles'>\r\n                <VehicleTable vehicles={LandVehicles} parts={landVehicleParts} />\r\n            </Indexed>\r\n            <Indexed title='water vehicles'>\r\n                <VehicleTable vehicles={WaterVehicles} parts={waterVehicleParts} />\r\n                <Section title='Landing & crashlanding'>\r\n                    <h5>Landing</h5>\r\n                    <p>Whenever you land there is a risk that a part of the airplane takes some damage or is worn. When you crash the risk increases considerably.</p>\r\n                    <p>The first step is to find the part that is damaged, roll 1d100, the second step is to find the amount of damage, 1, 1d4 or 1d6 depending on landing success</p>\r\n                    <h6>Level of damage</h6>\r\n                    <p>There are 6 levels of damage (level 0 being undamaged, pristine). Damages reduce resell value and pilot skill addadtively. Repair is mechanics + intelligence.\r\n                    Some parts are essencial and the certain functions do not work without them.\r\n                </p>\r\n                    <ol>\r\n                        <li>Worn: no effect on performance, repair 20. -1% value</li>\r\n                        <li>Slightly damaged: -2 on pilot, repair 20. -2% value</li>\r\n                        <li>Moderately damaged: -4 on pilot , repair 25 + 2% of plane value for spare parts. -4% value</li>\r\n                        <li>Severely damaged: part does not work, -6 on pilot, repair 25 + 4% of plane value for spare parts. -4% value</li>\r\n                        <li>Extremely damaged: part does not work, -6 on pilot, repair 30 + 5% of plane value for spare parts. -5% value</li>\r\n                        <li>Obliterated: part is frigg'n gone, -8 on pilot repair 35 + 6% of plane value for spare parts. -6% value </li>\r\n                    </ol>\r\n\r\n                    <RollOMeter partsList={airVehicleParts} amountList={rollAmounts} damageAmounts={airVehicleDamageTexts} />\r\n\r\n                </Section>\r\n\r\n            </Indexed>\r\n            <Indexed title='air'>\r\n                <VehicleTable vehicles={AirVehicles} parts={airVehicleParts} />\r\n            </Indexed>\r\n            <Indexed title='space'>\r\n                <VehicleTable vehicles={SpaceVehicles} parts={spaceVehicleParts} />\r\n            </Indexed>\r\n        </Indexer>\r\n    </Section>\r\n}\r\n\r\ninterface IRollOmeterProps {\r\n    partsList: string[];\r\n    amountList: IRollAmount[];\r\n    damageAmounts: IDamageAmount[];\r\n}\r\n\r\nconst RollOMeter: React.FC<IRollOmeterProps> = ({ partsList, amountList, damageAmounts }) => {\r\n    const [currentRolls, setCurrentRolls] = useState<{ d100: number, index: number }[]>([]);\r\n    const [currentParts, setCurrentParts] = useState<{ partN: number, dmg: number }[]>(partsList.map((p, i) => {\r\n        return { partN: i, dmg: 0 };\r\n    }));\r\n    const spacing = Math.floor(100 / partsList.length);\r\n    const rollAmount = (amount: IRollAmount) => {\r\n        const rolls = [...Array(amount.numberOf1d100)].map((v, i) => {\r\n            let r = Math.floor(Math.random() * (partsList.length + 1));\r\n            return { d100: r * spacing + 1, index: r };\r\n        });\r\n        setCurrentRolls(rolls);\r\n        const temp = currentParts;\r\n        rolls.forEach(i => {\r\n            if (temp[i.index] !== undefined)\r\n                temp[i.index].dmg += Math.floor(Math.random() * amount.sidesPerDice) + 1;\r\n        });\r\n        setCurrentParts(temp);\r\n    }\r\n\r\n    const convertNumberToText = (n: number): string => {\r\n        const das = damageAmounts.filter(da => da.damageAmountNumber === n);\r\n        if (das.length === 1) return das[0].damageText;\r\n        else return 'obliderated';\r\n    }\r\n\r\n    return <>\r\n        <ol>\r\n            {amountList.map(a => <li>{a.text}: roll {a.numberOf1d100}d100, apply 1d{a.sidesPerDice} damage <button onClick={() => rollAmount(a)}>appy</button></li>)}\r\n        </ol>\r\n        <hr />\r\n        {currentRolls.map(r => {\r\n            if (currentParts[r.index] === undefined || partsList[currentParts[r.index].partN] === undefined) return null;\r\n            return ` ${partsList[currentParts[r.index].partN]} damaged ${currentParts[r.index].dmg}! `;\r\n        })}\r\n        <hr />\r\n        <ul>\r\n            {currentParts.map((p, i) => <li>({i * spacing + 1} - {i * spacing + spacing}) -{'>'}{partsList[p.partN]}: {convertNumberToText(p.dmg)} ({p.dmg})</li>)}\r\n        </ul>\r\n    </>;\r\n}\r\n\r\nconst landVehicleParts: string[] = [];\r\n\r\nconst waterVehicleParts: string[] = [];\r\n\r\nconst spaceVehicleParts: string[] = [];\r\n\r\ninterface IVehicleTableProps {\r\n    vehicles: Vehicle[];\r\n    parts: string[];\r\n}\r\n\r\nconst VehicleTable: React.FC<IVehicleTableProps> = ({ vehicles }) => {\r\n    const [vehicleToEdit, setVehicleToEdit] = useState<Vehicle | undefined>(undefined);\r\n\r\n    const viewVehicleToEdit = (v: Vehicle | undefined) => {\r\n        if (v === undefined) return null;\r\n        else return <VehicleEditor baseVehicle={v} />;\r\n    }\r\n\r\n    return (<>\r\n        <table className='datatable'>\r\n            <thead>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>Type</th>\r\n                    <th>Passengers</th>\r\n                    <th>Cargo</th>\r\n                    <th>Cost</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {vehicles.map(v => <VehicleRow onSelect={(v) => setVehicleToEdit(v)} vehicle={v} />)}\r\n            </tbody>\r\n        </table>\r\n    </>);\r\n}\r\n\r\ninterface IVehicleRowProps {\r\n    vehicle: Vehicle;\r\n    onSelect: (v: Vehicle) => void;\r\n}\r\n\r\nconst costConverter = (credits: number) => {\r\n    if (credits < 10000) return `${credits} c`;\r\n    if (credits < 10000000) return `${(credits / 1000).toFixed(0)}k c`;\r\n    return `${(credits / 1000000).toFixed(0)}m c`;\r\n}\r\n\r\nconst weightConverter = (kg: number) => {\r\n    if (kg < 1000) return `${kg.toFixed(0)}kg`;\r\n    if (kg < 1000 * 1000) return `${(kg / 1000).toFixed(0)}tons`;\r\n    return `${(kg / 1000000).toFixed(0)}k tons`;\r\n}\r\n\r\nconst VehicleRow: React.FC<IVehicleRowProps> = ({ vehicle, onSelect }) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    if (isOpen)\r\n        return <>\r\n            <tr className='datatableclicker' onClick={() => setIsOpen(false)}>\r\n                <td>{vehicle.name}</td>\r\n                <td>{vehicle.medium.map(m => <span>{m} </span>)}</td>\r\n                <td>{vehicle.passengers}</td>\r\n                <td>{weightConverter(vehicle.cargoKg)}</td>\r\n                <td>{costConverter(vehicle.cost)}</td>\r\n            </tr>\r\n            <tr>\r\n                <td>&nbsp;acc/v/r/fuel</td>\r\n                <td>{vehicle.acceleration}m/s/s</td>\r\n                <td>{vehicle.topSpeed * 3.6}km/h</td>\r\n                <td>{vehicle.range}km</td>\r\n                <td>{vehicle.fuelType.map(m => <span>{m.name} </span>)}</td>\r\n            </tr>\r\n            <tr>\r\n                <td colSpan={4}><Ellipsis text={vehicle.description} cutOff={120} ></Ellipsis></td>\r\n                <td> <button onClick={() => onSelect(vehicle)}>Edit</button>  </td>\r\n            </tr>\r\n        </>;\r\n    else return <tr className='datatableclicker' onClick={() => setIsOpen(true)}>\r\n        <td>{vehicle.name}</td>\r\n        <td>{vehicle.medium.map(m => <span>{m} </span>)}</td>\r\n        <td>{vehicle.passengers}</td>\r\n        <td>{weightConverter(vehicle.cargoKg)}</td>\r\n        <td>{costConverter(vehicle.cost)}</td>\r\n    </tr>\r\n}\r\n\r\ninterface IVehicleEditorProps {\r\n    baseVehicle: Vehicle;\r\n}\r\n\r\n\r\nconst VehicleEditor: React.FC<IVehicleEditorProps> = ({ baseVehicle }) => {\r\n    const [vehicle, dispatch] = useReducer(vehicleReducer, baseVehicle);\r\n\r\n    let passengersCount = 0;\r\n    let impulseSum = 0;\r\n    let weight = 0;\r\n\r\n    for (let i in vehicle.parts) {\r\n        let p: any = vehicle.parts[i];\r\n        if (p.passengerCount !== undefined) { //PassengerSection\r\n            passengersCount += p.passengerCount;\r\n        }\r\n        else if (p.fuelUse !== undefined) { //Thruster\r\n            impulseSum += p.impulseKn;\r\n        }\r\n        weight += vehicle.parts[i].weightKg;\r\n    }\r\n\r\n    let acceleration = impulseSum / weight;\r\n\r\n    return <>\r\n        <h3>Vehicle Editor</h3>\r\n        <b>Name</b>: <input type='text' value={vehicle.name} onChange={e => dispatch({ whatToUpdate: 'name', value: e.target.value })} /><br />\r\n        <b>Cost</b>: {vehicle.cost}<br />\r\n        <b>Description</b>: <input type='text' value={vehicle.description} onChange={e => dispatch({ whatToUpdate: 'description', value: e.target.value })} /><br />\r\n        <b>Medium</b>: {vehicle.medium.map(m => <span>{m} </span>)}<br />\r\n        <b>Max Cargo</b>: {vehicle.cargoKg}kg<br />\r\n        <b>Fuel</b>: {vehicle.fuelType.map(ft => <span>{ft.name}</span>)}<br />\r\n        <b>Passengers</b>: {passengersCount}<br />\r\n        <b>Weight</b>: {weightConverter(weight)} <br />\r\n        <b>Accelleration</b>: {acceleration.toFixed(3)} m/s/s <br />\r\n        <b>Part Breakdown</b> {vehicle.parts.map(part => <span>{part.name}, </span>)}\r\n    </>;\r\n}\r\n\r\ninterface IVehicleDispatcher {\r\n    whatToUpdate: 'name' | 'description';\r\n    value: string;\r\n}\r\n\r\nconst vehicleReducer = (state: Vehicle, dispatch: IVehicleDispatcher): Vehicle => {\r\n    switch (dispatch.whatToUpdate) {\r\n        case 'name': return { ...state, name: dispatch.value };\r\n        case 'description': return { ...state, description: dispatch.value };\r\n        default: return state;\r\n    }\r\n}\r\n\r\n\r\nexport default Vehicles;","import React from 'react';\r\nimport Section from './Section';\r\n\r\nconst CharacterSheetOverview = () => <Section title='Character sheet overview'>\r\n    <h1>Character sheet overview</h1>\r\n    <p>This is a quick look at each part of the character sheet, going section by section, top to bottom, left to right</p>\r\n\r\n    <h4>Name</h4>\r\n    <p>The name of the character, this should be what you want other players and the game master to refer to you in when they address you in character</p>\r\n\r\n    <h4>Gender</h4>\r\n    <p>Your characters sex and gender, note that Merlions have different sexes and genders than humans and shambras</p>\r\n\r\n    <h4>Species</h4>\r\n    <p>Which species is your character? Human, Shambra, Merlion, Nekovian and Synthoid are the valid options. See more under World & Lore -{\">\"} Humans/Merlions/Shambras/Nekovians/Synthoids</p>\r\n\r\n    <h4>Age</h4>\r\n    <p>The age of your character in Earth Years</p>\r\n\r\n    <h4>Character Points</h4>\r\n    <p>Character points are universally applicable experience points which can be used for anything. See more under Character Points and Experience. Your age and species determine your starting experience.</p>\r\n\r\n    <h4>Experience multiplier</h4>\r\n    <p>How quickly you gain experience, depends on age and species. See more under Character Points and Experience.</p>\r\n\r\n    <h4>Player</h4>\r\n    <p>The player's name</p>\r\n\r\n    <h4>Background</h4>\r\n    <p>This should be a short synopsis of where you were born, lived and any noteworthy experiences you've had. Having one helps you rolplay and the GM integrate your character into the world.</p>\r\n\r\n    <h4>Life</h4>\r\n    <p>Life refers to how much punishment your character can take before dying. Life is caluclated as strength + 2x endurance. See health section for more information</p>\r\n\r\n    <h4>Mental health</h4>\r\n    <p>Mental health refers to the state of your mind, it is caulcated as willpower + willpower. See more under Health</p>\r\n\r\n    <h4>Sequence</h4>\r\n    <p>Sequence is your turn order bonus during combat. Agility + Perception. When combat starts roll 1d20 + sequence, turn goes from highest to lowest. (special rules apply for very high values)</p>\r\n\r\n    <h4>Damage Absorbtion</h4>\r\n    <p>This number is subtracted from incoming damage.</p>\r\n\r\n    <h4>Defense</h4>\r\n    <p>Defense is the number enemies must overcome to hit you. First number is your base (depends on size), second number is base + agility, third number is base + agility + skill (combat or acrobatics, whichever is higher)</p>\r\n\r\n    <h4>Carrying capacity</h4>\r\n    <p>How much your character can carry without becoming encumbered. See carrying capacity for more details</p>\r\n\r\n    <h4>Speed</h4>\r\n    <p>Your character's base speed. Can move this many meters during a single combat round.</p>\r\n\r\n    <h4>Apperance Traits</h4>\r\n    <p>Describe how your character looks like, how tall, how heavy.</p>\r\n\r\n    <h4>Strength</h4>\r\n    <p>Raw muscle strength, this affects health, carrying capacity, punching power.</p>\r\n\r\n    <h4>Endurance</h4>\r\n    <p>Endurance is your life force, modifies how far you can run, how much beer you can drink, how long you can survive a boxing match</p>\r\n\r\n    <h4>Agility</h4>\r\n    <p>Agility refers to hand eye coordination, reflexes, flexibility, balance and speed</p>\r\n\r\n    <h4>Perception</h4>\r\n    <p>Perception refers to your senses, awareness and alertness</p>\r\n\r\n    <h4>Intelligence</h4>\r\n    <p>Knowledge, memory, wisdom, the ability to think quickly and to contemplate deeply.</p>\r\n\r\n    <h4>Willpower</h4>\r\n    <p>Willpower refers to your sense of personality, force of will and self determination as well as natural leadership</p>\r\n\r\n    <h4>Personality traits</h4>\r\n    <p>What is your personality like? See more under Skills & Perks -{\">\"} Traits -{\">\"} Personality Traits. Used to determine if you are roleplaying according to your character.</p>\r\n\r\n    <h4>Skills</h4>\r\n    <p>This is a non-exhaustive list of skills, Exp refers to how much experience points you have for the skill, rank is the number of points you have for it, most skills gain bonuses also from your base attributes (str/dex/end/int/will/per), see Perks & Traits -{\">\"} Skills for more information about each skill.</p>\r\n\r\n    <h4>Perks</h4>\r\n    <p>Perks are skill specializations, special abilities and modifiers you've acquired. See more under Skills & Perks -{\">\"} Perks</p>\r\n\r\n    <h4>Traits</h4>\r\n    <p>Traits are special mental and physical traits that modify how your character behaves and works, for the most part can only be aqcuired at character creation.</p>\r\n\r\n    <h4>Reputation</h4>\r\n    <p>Reputation refers to how well known you are and what groups of people think of you in various parts of the world</p>\r\n\r\n    <h4>Inventory</h4>\r\n    <p>Items in your pockets, backpack or otherwise stashed somewhere on your body.</p>\r\n\r\n    <h4>Equipment</h4>\r\n    <p>Items that are worn and able to be used immediately.</p>\r\n\r\n    <h4>Stash</h4>\r\n    <p>Items you own and have stashed away somewhere.</p>\r\n\r\n</Section>;\r\n\r\n\r\nexport default CharacterSheetOverview;","import React, { useState } from 'react';\r\nimport Section from './Section';\r\nimport { CSSProperties } from '@material-ui/core/styles/withStyles';\r\n\r\nconst shortWidth:CSSProperties = {\r\n    width: '25%'\r\n};\r\n\r\nconst CarryingCapacity = () => {\r\n    const [currentWeight, setCurrentWeight] = useState(80);\r\n    const [cargoWeight, setCargoWeight] = useState(0);\r\n    const [strength, setStrength] = useState(5);\r\n    const [previousGravity, setPreviousGravity] = useState(100);\r\n    const [currentGravity, setCurrentGravity] = useState(100);\r\n\r\n    const gravityFactor = currentGravity / previousGravity;\r\n\r\n    const weightFactor = (currentWeight + cargoWeight) * gravityFactor - currentWeight;\r\n\r\n    const strengthFactor = weightFactor / strength;\r\n    let penalty = '0';\r\n    if (strengthFactor <= 4) { }\r\n    else if (strengthFactor <= 8) penalty = '-1';\r\n    else if (strengthFactor <= 12) penalty = '-2';\r\n    else if (strengthFactor <= 16) penalty = '-4';\r\n    else if (strengthFactor <= 20) penalty = '-8';\r\n    else if (strengthFactor <= 24) penalty = '-16';\r\n    else if (strengthFactor <= 28) penalty = 'max';\r\n    else if (strengthFactor <= 32) penalty = 'drag';\r\n    else  penalty = 'too heavy';\r\n\r\n    return (<Section title='Carrying Capacity and Exhaustion Levels'>\r\n        <h3>Carrying Capacity</h3>\r\n        <p>There is only so much weight you can put on a Shambra before they lay down and give up</p>\r\n        <p>Being over capacity goes in phases, at or below the first you suffer no penalty. Then as you increase in weight you begin to suffer various penalties</p>\r\n        <p>Penalty applies to swim and half to climb, jump, quarter to acrobatics</p>\r\n        <ul>\r\n            <li>Without effect your maximum speed is Sprint (5x)</li>\r\n            <li>-1 You can no longer sprint, limited to run (x4), -4 penalty</li>\r\n            <li>-2 You can no longer run, limited to jog (x3), -8 penalty</li>\r\n            <li>-2 You can no longer jog, limited to power walk (x2), -12 penalty</li>\r\n            <li>-4 You can no longer power walk, limited to walk (x1), -16 penalty</li>\r\n            <li>-8 You can only walk at half speed (x0.5), -20 penalty</li>\r\n            <li>-16 You can only walk at quarter speed (0.25x), -24 penalty</li>\r\n            <li>Max is how much you can deadlift</li>\r\n            <li>Drag is how much you can drag off the ground</li>\r\n        </ul>\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Strength</th>\r\n                    <th>No effect</th>\r\n                    <th>-1</th>\r\n                    <th>-2</th>\r\n                    <th>-4</th>\r\n                    <th>-8</th>\r\n                    <th>-16</th>\r\n                    <th>Max</th>\r\n                    <th>Drag</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {[...new Array(18)].map((v, str, ar) => <tr>\r\n                    <td>{(str + 1)}</td>\r\n                    <td>{(str + 1) * 4}</td>\r\n                    <td>{(str + 1) * 8}</td>\r\n                    <td>{(str + 1) * 12}</td>\r\n                    <td>{(str + 1) * 16}</td>\r\n                    <td>{(str + 1) * 20}</td>\r\n                    <td>{(str + 1) * 24}</td>\r\n                    <td>{(str + 1) * 28}</td>\r\n                    <td>{(str + 1) * 32}</td>\r\n                </tr>)}\r\n            </tbody>\r\n        </table>\r\n        <h4>Exhaustion Levels</h4>\r\n        <p>Exhaustion is caused by over exterting yourself each level of exhaustion counts as one step of carrying capacity. At max you can not move, at drag you fall unconcious. See Health and Recovery for info about recovery.</p>\r\n        <h4>Gravity and weight</h4>\r\n        <p>Characters that live on a planet or system grow accustomed to the local gravity.\r\n            So for as long as characters don't leave their local gravity well all carrying capacity should be assumed to be normalized.</p>\r\n        <p>However, if a character leaves their planet or station to another planet or station with a different gravity then they are not accustomed to it.\r\n        To find out the difference take the first gravity and divide by the second, then multiply this with the character's body weight plus cargo, then minus the character's body weight.\r\n        </p>\r\n        <label style={shortWidth}>Stength</label> <input  style={shortWidth}type='input' value={strength} onChange={e => setStrength(parseInt(e.target.value))} /><br />\r\n        <label style={shortWidth}>Character weight</label> <input  style={shortWidth}type='input' value={currentWeight} onChange={e => setCurrentWeight(parseInt(e.target.value))} /><br />\r\n        <label style={shortWidth}>cargo weight</label> <input style={shortWidth} type='input' value={cargoWeight} onChange={e => setCargoWeight(parseInt(e.target.value))} /><br />\r\n        <label style={shortWidth}>Previous gravity %</label> <input style={shortWidth} type='input' value={previousGravity} onChange={e => setPreviousGravity(parseFloat(e.target.value))} /><br />\r\n        <label style={shortWidth}>Current gravity %</label> <input style={shortWidth} type='input' value={currentGravity} onChange={e => setCurrentGravity(parseFloat(e.target.value))} /><br />\r\n        <label style={shortWidth}>Current Weight</label> {weightFactor}<br />\r\n        <label style={shortWidth}>Current Penalty</label> {penalty}\r\n    </Section>);\r\n}\r\n\r\nexport default CarryingCapacity;","import React, { CSSProperties } from 'react';\r\nimport Section from './Section';\r\n\r\nconst tdWidth: CSSProperties = {\r\n    width: '160px',\r\n    borderBottom: '1px solid #EEEEEE'\r\n};\r\n\r\nconst CharacterSize = () => <Section title='Character Size & movement speed'>\r\n    <h3>Character Size</h3>\r\n    <p>Being small or large has different benefits and penalties</p>\r\n    <p>The size range and mass range may be exceeded at the player's and game master's discretion. But it is expected that characters get their size according to their size.</p>\r\n    <table>\r\n        <thead>\r\n            <tr>\r\n                <th>Size</th>\r\n                <th>Strength mod</th>\r\n                <th>Defense mod</th>\r\n                <th>Size range (cm)</th>\r\n                <th>Mass range (kg)</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            <tr>\r\n                <td>Tiny</td>\r\n                <td>-2</td>\r\n                <td>+4</td>\r\n                <td>90-130</td>\r\n                <td>25-40</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Small</td>\r\n                <td>-1</td>\r\n                <td>+2</td>\r\n                <td>120-160</td>\r\n                <td>35-65</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Medium</td>\r\n                <td>+/-0</td>\r\n                <td>+/-0</td>\r\n                <td>150-190</td>\r\n                <td>60-110</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Large</td>\r\n                <td>+1</td>\r\n                <td>-2</td>\r\n                <td>180-250</td>\r\n                <td>90-160</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Huge</td>\r\n                <td>+2</td>\r\n                <td>-4</td>\r\n                <td>240-300</td>\r\n                <td>150-250</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n    <h3>Movement speed</h3>\r\n    <p>Characters have default and maximum movement speeds, and running speeds which are some multiplicative of their default speed. The walking speed is how far a character can walk in a round</p>\r\n    <p>Characters may choose to power walk but take a -5 to all rolls if they do so and lose their skill bonus to their defense, if they jog they take a -10 and lose their agility to their defense</p>\r\n    <p>To run during combat uses up all actions during combat, they gain a +4 defense while running but forgo skill</p>\r\n    <p>To sprint the character must have first run, they gain a +6 defense while sprinting but forgo skill and agility</p>\r\n    <table style={{ width: '480px' }}>\r\n        <thead>\r\n            <tr>\r\n                <th style={tdWidth}>Type</th>\r\n                <th style={tdWidth}>Speed</th>\r\n                <th style={tdWidth}>Time</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            <tr>\r\n                <td style={tdWidth}>Walk</td>\r\n                <td style={tdWidth}>x1</td>\r\n                <td style={tdWidth}>endurance + athletics hours</td>\r\n            </tr>\r\n            <tr>\r\n                <td style={tdWidth}>Power Walk</td>\r\n                <td style={tdWidth}>x2</td>\r\n                <td style={tdWidth}>endurance + athletics / 4 hours</td>\r\n            </tr>\r\n            <tr>\r\n                <td style={tdWidth}>Jog</td>\r\n                <td style={tdWidth}>x3</td>\r\n                <td style={tdWidth}>endurance + athletics / 8 hours</td>\r\n            </tr>\r\n            <tr>\r\n                <td style={tdWidth}>Run</td>\r\n                <td style={tdWidth}>x4</td>\r\n                <td style={tdWidth}>(endurance + athletics) x 4 minutes</td>\r\n            </tr>\r\n            <tr>\r\n                <td style={tdWidth}>Sprint</td>\r\n                <td style={tdWidth}>x5</td>\r\n                <td style={tdWidth}>endurance + athletics minutes</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n    <p>Speed is determined by size, athletics skill and species</p>\r\n    <h6>Size</h6>\r\n    <table style={{ width: '320px' }}>\r\n        <thead>\r\n            <tr>\r\n                <th style={tdWidth}>Size</th>\r\n                <th style={tdWidth}>Speed</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            <tr>\r\n                <td style={tdWidth}>Tiny</td>\r\n                <td style={tdWidth}>4</td>\r\n            </tr>\r\n            <tr>\r\n                <td style={tdWidth}>Small</td>\r\n                <td style={tdWidth}>5</td>\r\n            </tr>\r\n            <tr>\r\n                <td style={tdWidth}>Medium</td>\r\n                <td style={tdWidth}>6</td>\r\n            </tr>\r\n            <tr>\r\n                <td style={tdWidth}>Large</td>\r\n                <td style={tdWidth}>7</td>\r\n            </tr>\r\n            <tr>\r\n                <td style={tdWidth}>Huge</td>\r\n                <td style={tdWidth}>8</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n    <h6>Athletics skill</h6>\r\n    <table style={{ width: '320px' }}>\r\n        <thead>\r\n            <tr>\r\n                <th style={tdWidth}>Skill</th>\r\n                <th style={tdWidth}>Bonus</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            <tr>\r\n                <td style={tdWidth}>0</td>\r\n                <td style={tdWidth}>0</td>\r\n            </tr>\r\n            <tr>\r\n                <td style={tdWidth}>6</td>\r\n                <td style={tdWidth}>1</td>\r\n            </tr>\r\n            <tr>\r\n                <td style={tdWidth}>12</td>\r\n                <td style={tdWidth}>2</td>\r\n            </tr>\r\n            <tr>\r\n                <td style={tdWidth}>18</td>\r\n                <td style={tdWidth}>3</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n    <h6>Species</h6>\r\n    <table style={{ width: '320px' }}>\r\n        <thead>\r\n            <tr>\r\n                <th style={tdWidth}>Species</th>\r\n                <th style={tdWidth}>Bonus</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            <tr>\r\n                <td style={tdWidth}>Human</td>\r\n                <td style={tdWidth}>1</td>\r\n            </tr>\r\n            <tr>\r\n                <td style={tdWidth}>Merlion</td>\r\n                <td style={tdWidth}>1</td>\r\n            </tr>\r\n            <tr>\r\n                <td style={tdWidth}>Nekovian</td>\r\n                <td style={tdWidth}>2</td>\r\n            </tr>\r\n            <tr>\r\n                <td style={tdWidth}>Shambra</td>\r\n                <td style={tdWidth}>0</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</Section>;\r\n\r\n\r\nexport default CharacterSize;","import React from 'react';\r\nimport Section from './Section';\r\n\r\n\r\nconst Radiation = () => <Section title='Radiation'>\r\n    <h3>Radiation</h3>\r\n    <p>Ionizing radiation can be found everywhere. The effects of radiation does are cumulative, meaning each dose adds on the previous levels. Radiation levels can increase beyond 10, each level adds +1 dose per round</p>\r\n    <p>Radiation naturally drops at the rate of 1 per year, this effect can be accelerated to 1 per month with a medicine check.</p>\r\n    <p>Additionally, radiation doses can go above </p>\r\n    <table style={{ width: '100%' }}>\r\n        <thead>\r\n            <tr>\r\n                <th>Level</th>\r\n                <th>Time per dose</th>\r\n                <th>Number of doses</th><th>Effect</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            <tr> <td>0</td><td>Safe (drop 1 dose per year)</td> <td>0</td><td>No effect</td> </tr>\r\n            <tr> <td>1</td><td>1 Year</td> <td>1</td><td>Life regen halved</td> </tr>\r\n            <tr> <td>2</td><td>1 Month</td> <td>2</td><td>-1 to all rolls</td> </tr>\r\n            <tr> <td>3</td><td>4 Days</td> <td>3</td><td>-2 to all rolls</td> </tr>\r\n            <tr> <td>4</td><td>12 hours</td> <td>4</td><td>-1 to all stats</td> </tr>\r\n            <tr> <td>5</td><td>1 hour</td> <td>5</td><td>-2 to all stats</td> </tr>\r\n            <tr> <td>6</td><td>10 minutes</td> <td>6</td><td>Life regen quartered</td></tr>\r\n            <tr> <td>7</td><td>10 rounds</td> <td>7</td><td>Hair falls out, severe nausea, -3 to all rolls</td> </tr>\r\n            <tr> <td>8</td><td>2 rounds</td> <td>8</td><td>10% chance to die every day, tissue decay</td>  </tr>\r\n            <tr> <td>9</td><td>1 rounds </td><td>9</td><td>5% chance to die every hour, lose 1 life every hour</td>  </tr>\r\n            <tr> <td>10</td><td>1 rounds = 2 doses</td><td>10</td><td>5% chance to die every minute</td> </tr>\r\n        </tbody>\r\n    </table>\r\n    <h5>Situations and protection</h5>\r\n    <p>Various situations have various levels of radiation, and it can come from multiple sources.</p>\r\n    <p>Protection is subtractive, simply subtract the protection from the level. Multiple sources stack. Distance to local sources matter a lot</p>\r\n    <table style={{ width: '100%' }}>\r\n        <thead>\r\n            <tr><th>Situation (examples)</th><th>Level</th> <th>Protection Source</th> <th>Protection amount</th></tr>\r\n        </thead>\r\n        <tbody>\r\n            <tr>\r\n                <td>Habitable planet surface</td>\r\n                <td>0</td>\r\n                <td>Normal clothes</td>\r\n                <td>0</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Habitable planet near space</td>\r\n                <td>1</td>\r\n                <td>Space Suit, anti-radiation drugs</td>\r\n                <td>1</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Low orbit (magnetically active planet)</td>\r\n                <td>2</td>\r\n                <td>Space ship, 1m concrete</td>\r\n                <td>2</td>\r\n            </tr>\r\n            <tr>\r\n                <td>High orbit (magnetically active planet)</td>\r\n                <td>3</td>\r\n                <td>Space ship (advanced), 2m concrete</td>\r\n                <td>3</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Stellar space</td>\r\n                <td>4</td>\r\n                <td>4m concrete</td>\r\n                <td>4</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Interstellar space</td>\r\n                <td>5</td>\r\n                <td>6m concrete</td>\r\n                <td>5</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Van allen belts</td>\r\n                <td>6</td>\r\n                <td>8m concrete</td>\r\n                <td>6</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Inside nuclear reactor (1 meter)</td>\r\n                <td>7</td>\r\n                <td>10m concrete</td>\r\n                <td>7</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Near meltdown site (50 meters)</td>\r\n                <td>8</td>\r\n                <td>15m concrete</td>\r\n                <td>8</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Near meltdown site (20 meters), </td>\r\n                <td>9</td>\r\n                <td>25m concrete</td>\r\n                <td>9</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Near meltdown site (5 meters), FTL core beam</td>\r\n                <td>10</td>\r\n                <td>40m concrete</td>\r\n                <td>10</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</Section>;\r\n\r\n\r\nexport default Radiation;","import React from 'react';\r\nimport Section from './Section';\r\nimport Indexer, { Indexed } from '../general/Indexer';\r\nimport Cooking from '../skills/cooking';\r\n\r\n\r\nconst Consumables = () => <Section title='Consumables'>\r\n    <Indexer title='Consumable Items'>\r\n        <Indexed title='Food'><Food /></Indexed>\r\n        <Indexed title='Medicine'><Medicine /></Indexed>\r\n        <Indexed title='Tools'><Tools /></Indexed>\r\n        <Indexed title='Weapons'><Weapons /></Indexed>\r\n    </Indexer>\r\n</Section>;\r\n\r\n\r\nexport default Consumables;\r\n\r\nconst Food = () => <>\r\n    <p>Food glorious food, keeps us alive. It also matters what you eat and how much you eat</p>\r\n    <h4>How much you eat</h4>\r\n    <p>Characters need to eat a certain amount to live, characters that don't eat enough will start to starve. Also characters that don't eat OR drink water dies after 72 hours of dehydration. Characters need</p>\r\n    <ul>\r\n        <li>Tiny: 2 meal</li>\r\n        <li>Small: 2.5 meals</li>\r\n        <li>Medium: 3 meals</li>\r\n        <li>Large: 3.5 meals</li>\r\n        <li>Huge: 4 meals</li>\r\n    </ul>\r\n    <p>After 2 days of not eating characters will see their life regeneration halved and -2 to all rolls</p>\r\n    <p>After 7 days of not eating characters life regeneration will stop, they take -8 to all rolls</p>\r\n    <p>After 14 days of not eating will start to lose their life, for each day beyond this point they lose 1 maximum life. When maximum life reaches 0 they become unconcious and die the next day.</p>\r\n    <h4>Quality food</h4>\r\n    <p>Good food quality gives improved mood and can even make you physically better</p>\r\n    <ul>\r\n        <li>Horrible food: 25% risk of food poisoning, -2 all rolls rest of the day</li>\r\n        <li>Bad food: -1 to all rolls rest of the day</li>\r\n        <li>Average food: no effect</li>\r\n        <li>Good food: +1 to all rolls for the rest of the day</li>\r\n        <li>Great food: +2 to all rolls for the rest of the day</li>\r\n        <li>Outstanding food: +2 to all rlls for the rest of the day, heal 1 life and mental health at the end of the day</li>\r\n    </ul>\r\n    <h5>Resturant food</h5>\r\n    <p>Resturant food works the same as home cooked food, except someone else bought the raw materials, cooked it and served it to you.</p>\r\n    <ul>\r\n        <li>Horrible food: 40 credits</li>\r\n        <li>Bad food: 60 credits</li>\r\n        <li>Average food: 80 credits</li>\r\n        <li>Good food: 150 credits (reservations 24h required, Savoir-Faire 15. Skip reservation 25)</li>\r\n        <li>Great food: 300 credits (reservations 48h required, Savoir-Faire 20. Skip reservation 30)</li>\r\n        <li>Outstanding food: 500 credits  (reservations 72h required, Savoir-Faire 25. Skip reservation 35)</li>\r\n    </ul>\r\n    <h5>Street food</h5>\r\n    <p>Street food works similar to resturant food with two modifications. Average quality is the highest quality easily available. The price is reduced by 25%.\r\n    You can find good street food with streetwise 20. Great streetfood with streetwise 30. Outstanding streetfood with streetwise 40.\r\n    </p>\r\n    <p>Note that you can only find resturant food and streetwise food in locations where they exist, a successful role may include travel.</p>\r\n    <h5>Home cooked food</h5>\r\n    <p>To cook food you need ingredients, you also need a kitchen, ingredients can be bought for 20 credits per meal or a survival check</p>\r\n    <ul>\r\n        <li>Low quality ingredients cost 10 credits, cause -5 to cooking roll</li>\r\n        <li>High quality ingredients costs 30 credits, cause +3 to cooking roll</li>\r\n        <li>Low quality kitchen causes -5 to cooking roll</li>\r\n        <li>High quality kitchen causes +3 to cooking roll</li>\r\n    </ul>\r\n    <p>You can create a kitchen with a survival check (2h), 20 low quality, 25 mid, 30 high quality. Survival kitchens are always grills</p>\r\n    <p>Hunting or gathering food requires a survival check and 8 hours (the 8 hours are committed whether you succeed or not). If a party of huntergatherers work together they must all roll survival together, the total meals are added up.</p>\r\n    <ul>\r\n        <li>Survival 20: ingredients for 1 meal</li>\r\n        <li>Survival 25: ingredients for 2 meals</li>\r\n        <li>Survival 30: ingredients for 3 meals</li>\r\n        <li>Survival 35: ingredients for 4 meals</li>\r\n        <li>Rush (4h): take -10 penalty to speed up the process. Still uses the effort of 8h</li>\r\n    </ul>\r\n    {Cooking.useCases.map(uc => {\r\n        return <><h6>{uc.name} ({uc.attribute})</h6><p>{uc.description}</p>\r\n            <ul>\r\n                {uc.results && uc.results.map(u => <li>{u}</li>)}\r\n            </ul>\r\n        </>\r\n    })}\r\n\r\n</>;\r\n\r\nconst Medicine = () => <>\r\n    <h4>Healing Medicine</h4>\r\n    <p>Healing medicine concerns all kinds of drugs that restore life, limb and damage, all these require medicine check.</p>\r\n    <p>Dosage matters for size, which means altered credit cost. Tiny: -20%, small: -10, large: +10%, huge: +20%</p>\r\n    <ul>\r\n        <li>Stempack: 200 credits, restores life </li>\r\n        <li>Antibiotics: 400 credits, cures bacterial infection </li>\r\n        <li>Antivirals: 800 credits, cures viral infection </li>\r\n        <li>Radioflush: 900 credits, removes radioactive materials from body (does not drop radiation level)</li>\r\n        <li>Gene therapy detox: 600 credits, accelerates radiation healing to 1 level per month.</li>\r\n        <li>Antivenom: 700 credits, neutralizes (specific) venom</li>\r\n    </ul>\r\n    <h4>Resillience Drugs</h4>\r\n    <p>Resillience drugs are similar to medicine in that they require medicine skill, however they don't heal damage. They prevent it</p>\r\n    <ul>\r\n        <li>Anti-Radiation drug: 200 credits, reduces accumulation of radiation damage for 30 days by 1 level</li>\r\n        <li>Active carbon: 10 credits, reduces effect of poisons recently consumed, neutralizes medicines and drugs</li>\r\n    </ul>\r\n    <h4>Performance Enhancing Drugs</h4>\r\n    <p>Performance enhancing drugs are often illegal and most carry negative effects, some are also addictive</p>\r\n    <p>Characters who become addicted become unable to resist the temptation to take more of the drug which tends to ruin their lives.</p>\r\n    <ul>\r\n        <li>Weak painkillers: 10 credits, reduces penalty from damage by 2 (no skill needed), lasts 8 hours</li>\r\n        <li>Intermediate painkiller: 50 credits, reduces penalty from damage by 6 (no skill needed, requires prescription), lasts 8 hours</li>\r\n        <li>Strong painkiller: 200 credits, reduces penalty from damage by 16, requires medicine skill, lasts 8 hours</li>\r\n        <li>Coffee: +1 to all intelligence and perception rolls for 6 hours, no effect if addicted</li>\r\n        <li>Alcohol (1 beer): 20 credits, reduces penalty from damage by 1, reduces all mental rolls by 1, increases bravery by 2, lasts 2 hours</li>\r\n        <li>Berzerker drops: 1500 credits, gain +1 strength, endurance, +3 to combat for 1 hour, high risk of addiction</li>\r\n        <li>Spirit Elixir: unknown credits, unknown effect</li>\r\n    </ul>\r\n</>;\r\n\r\ninterface ITool {\r\n    name: string;\r\n    description: string;\r\n    uses: number;\r\n    weightKg: number;\r\n    cost: number;\r\n}\r\n\r\nconst tools: ITool[] = [\r\n    {\r\n        name: 'med kit',\r\n        description: 'contains stempacks, antibotics, antivirals, diagnostic tools, antivenom, weak and strong painkillers',\r\n        uses: 20,\r\n        weightKg: 2.5,\r\n        cost: 4000,\r\n    },\r\n    {\r\n        name: 'Climing/Parkour gear',\r\n        description: 'contains traction cleats, anchors, rope, revo belay',\r\n        uses: 50,\r\n        weightKg: 3,\r\n        cost: 1500,\r\n    },\r\n    {\r\n        name: 'Sports gear',\r\n        description: 'contains pair of sneakers, towel, water bottle, headband, aerodynamic one-piece',\r\n        uses: 40,\r\n        weightKg: 2,\r\n        cost: 2000,\r\n    },\r\n    {\r\n        name: 'Sharpening tools',\r\n        description: 'Contains sharpening stick for blades',\r\n        uses: 1000,\r\n        weightKg: 0.5,\r\n        cost: 100,\r\n    },\r\n    {\r\n        name: 'Portable Cooking set',\r\n        description: 'contains a small pot, a large pot, a light frying pan, one electric stove, portable refrigerator, including batteries for up to 10 meals.',\r\n        uses: 100,\r\n        weightKg: 10,\r\n        cost: 5000,\r\n    },\r\n    {\r\n        name: 'Electronics toolkit',\r\n        description: 'contains multi meter, spare wires and cables, wireboard, universal screwdriver, soldering tools',\r\n        uses: 30,\r\n        weightKg: 4,\r\n        cost: 2000,\r\n    },\r\n    {\r\n        name: 'Ballistic kit',\r\n        description: 'contains universal screwdriver, spare screws, oil, small brush, protective eyewear',\r\n        uses: 40,\r\n        weightKg: .3,\r\n        cost: 400,\r\n    },\r\n    {\r\n        name: 'Forensics kit',\r\n        description: 'contains darklight, fingerprint duster, biosample collector, laser pointer',\r\n        uses: 40,\r\n        weightKg: 1,\r\n        cost: 1200,\r\n    },\r\n    {\r\n        name: 'Lockpick',\r\n        description: 'contains assortment of lockpicks',\r\n        uses: 100,\r\n        weightKg: .2,\r\n        cost: 500,\r\n    },\r\n    {\r\n        name: 'Electronic lockpick',\r\n        description: 'contains connector, IR coms, UV coms, micro-hologram projector, adaptor, cryptogram chip',\r\n        uses: 80,\r\n        weightKg: 2,\r\n        cost: 3500,\r\n    },\r\n    {\r\n        name: 'Mechanics kit',\r\n        description: 'contains universal screwdrivers, hammer, spare nuts, bolts, screws, nails, adjustable wrench',\r\n        uses: 1000,\r\n        weightKg: 5,\r\n        cost: 1500,\r\n    },\r\n    {\r\n        name: 'Batteries',\r\n        description: 'Rechargeble Lithium ion battery, can be used to recharge energy weapons, computers, tools, even vehicles',\r\n        uses: 10000,\r\n        weightKg: 1,\r\n        cost: 1000,\r\n    },\r\n    {\r\n        name: 'Personal solar array',\r\n        description: 'A 1x1 meter solar foldable panel, can charge one battery over the course of a day.',\r\n        uses: 10000,\r\n        weightKg: .5,\r\n        cost: 2000,\r\n    },\r\n    {\r\n        name: 'Motion sensor',\r\n        description: 'detects air movement and vibrations up to 100 meters, can be adjusted to less',\r\n        uses: 100,\r\n        weightKg: .2,\r\n        cost: 200,\r\n    },\r\n    {\r\n        name: 'Tiny tracker',\r\n        description: 'tiny tracker emits weak long band microwaves, adjustable to an exact frequency and pattern, trackable up to 100km. Illegal',\r\n        uses: 1,\r\n        weightKg: .01,\r\n        cost: 300,\r\n    },\r\n    {\r\n        name: 'Infrared googles',\r\n        description: 'Googles that track infra-red light, allows visible light to be seen too as an option.',\r\n        uses: 10000,\r\n        weightKg: 0.2,\r\n        cost: 900,\r\n    },\r\n    {\r\n        name: 'Ultraviolet googles',\r\n        description: 'Googles that track ultra-violet light, allows visible light to be seen too as an option.',\r\n        uses: 10000,\r\n        weightKg: 0.3,\r\n        cost: 1600,\r\n    },\r\n    {\r\n        name: 'Pocket Computer',\r\n        description: 'Basically a futuristic smartphone. Allows user to substitute computer roll for any knowledge roll. 10TB storage, 12x 5.5GH cpu cores, 512GB ram, 4 cameras, gyrometer, accelerometer, geigercounter, radiobooster. 48h battery',\r\n        uses: 1000,\r\n        weightKg: 1,\r\n        cost: 2000,\r\n    },\r\n    {\r\n        name: 'Jetpack',\r\n        description: 'Allows for short bursts which propel the user. Jump +50 meters up, +100 meters forward, requires athletics + agility 20 to safely land. Can hover if your total weight is 80kg or less',\r\n        uses: 100,\r\n        weightKg: 6,\r\n        cost: 14000,\r\n    },\r\n    {\r\n        name: 'Flightsuit',\r\n        description: 'Allows for gliding, flying if paired with jetpack. Landing safely requires acrobatics + agility 20. Not compatible with armor plating or power armor',\r\n        uses: 80,\r\n        weightKg: 10,\r\n        cost: 8000,\r\n    },\r\n    {\r\n        name: 'SCUBA suit',\r\n        description: 'Airbreathing underwater for 3 hours. Includes wetsuit which protects against cold oceanic water.',\r\n        uses: 10,\r\n        weightKg: 6,\r\n        cost: 12000,\r\n    },\r\n    {\r\n        name: 'Laser protection gear',\r\n        description: 'Protective gear against damage from laser, protects against blinding.',\r\n        uses: 1000,\r\n        weightKg: 0.1,\r\n        cost: 500,\r\n    },\r\n    {\r\n        name: 'Plasma protection gear',\r\n        description: 'Protective gear against damage from plasma weapons, protects against blinding and damage, does not offer protection if directly fired upon.',\r\n        uses: 1000,\r\n        weightKg: 1,\r\n        cost: 1600,\r\n    },\r\n    {\r\n        name: 'Spy drone',\r\n        description: '\tSmall drone, uses propellers to fly but causes virtually no noice, has a small mounted camera and comes with remote controll (can also be controlled via computer), range 1km.',\r\n        uses: 500,\r\n        weightKg: 0.2,\r\n        cost: 4000,\r\n    },\r\n    {\r\n        name: 'Carrier drone',\r\n        description: 'Medium sized drone, similar to spy drone but can carry 1kg and is not silent.',\r\n        uses: 500,\r\n        weightKg: 2,\r\n        cost: 9000,\r\n    },\r\n    {\r\n        name: 'Large carrier drone',\r\n        description: 'Large sized drone, similar to carrier drone, can carry 6kg.',\r\n        uses: 500,\r\n        weightKg: 10,\r\n        cost: 15000,\r\n    },\r\n    {\r\n        name: 'Industrial carrier drone',\r\n        description: 'Large sized drone, similar to large carrier but can carry 52kg.',\r\n        uses: 500,\r\n        weightKg: 80,\r\n        cost: 25000,\r\n    },\r\n    {\r\n        name: 'H.W. Industrial carrier drone',\r\n        description: 'Heavy weight indistrial carrier drone, capacity 175kg. Basically a small hellicopter',\r\n        uses: 500,\r\n        weightKg: 250,\r\n        cost: 35000,\r\n    },\r\n    {\r\n        name: 'Transport drone',\r\n        description: 'It\\'s a vehicle, capacity 3500kg.',\r\n        uses: 500,\r\n        weightKg: 5000,\r\n        cost: 90000,\r\n    },\r\n    {\r\n        name: 'Camping kit',\r\n        description: 'contains single person tent, bedroll, igniter, boiler',\r\n        uses: 50,\r\n        weightKg: 20,\r\n        cost: 4000,\r\n    },\r\n    {\r\n        name: 'Field physics kit',\r\n        description: 'Contains telescope, microscope, spectrometer, scale, thermometer, hydrometer, electrometer',\r\n        uses: 100,\r\n        weightKg: 6,\r\n        cost: 8000,\r\n    },\r\n    {\r\n        name: 'Field chemistry kit',\r\n        description: 'Contains microscope, ph-meter, tweesers, beakers, heater, condenser',\r\n        uses: 100,\r\n        weightKg: 3,\r\n        cost: 7000,\r\n    },\r\n    {\r\n        name: 'Field biology kit',\r\n        description: 'Contains high focus microscope, stereliser, sealed strong bags',\r\n        uses: 100,\r\n        weightKg: 3,\r\n        cost: 7000,\r\n    }\r\n];\r\n\r\nconst Tools = () => <>\r\n    <h3>Tools</h3>\r\n    <p>Many advanced skills require a tool. Uses is equal to uses + skill rank (if object is transfered then always use lowest rank in history of users). Tools without an obvious related skill simply has a set number of uses. Once the uses has been depleted the quality degrades by one level.</p>\r\n    <table>\r\n        <thead>\r\n            <tr>\r\n                <th>Name</th>\r\n                <th>uses</th>\r\n                <th>Weight (kg)</th>\r\n                <th>Cost</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {tools.map(tool => <>\r\n                <tr>\r\n                    <td><b>{tool.name}</b></td><td>{tool.uses}</td><td>{tool.weightKg}</td><td>{tool.cost}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className='univeralBorderBottom' colSpan={4}>{tool.description}</td>\r\n                </tr>\r\n            </>)}\r\n        </tbody>\r\n    </table>\r\n</>\r\n\r\nconst Weapons = () => <>\r\n    Hand grenade\r\n    Remote activated Bomb\r\n    Traps\r\n</>;","import React from 'react';\r\nimport Section from './Section';\r\n\r\nconst Cybernetics:React.FC = () => <Section title='Cybernetics'></Section>\r\n\r\n\r\nexport default Cybernetics;","import React, { useState } from 'react';\r\nimport MakeCharacter from '../components/playermanual/MakeCharacter';\r\nimport Combat from '../components/playermanual/Combat';\r\nimport Equipment from '../components/playermanual/Equipment';\r\nimport Wealth from '../components/playermanual/Wealth';\r\nimport Experience from '../components/playermanual/Experience';\r\nimport Vehicles from '../components/playermanual/Vehicles';\r\nimport Section from '../components/playermanual/Section';\r\nimport CharacterSheetOverview from '../components/playermanual/CharacterSheetOverview';\r\nimport { SpellsPerks } from '../components/perks/Spells';\r\nimport CarryingCapacity from '../components/playermanual/CarryingCapacity';\r\nimport CharacterSize from '../components/playermanual/CharacterSize';\r\nimport Radiation from '../components/playermanual/Radiation';\r\nimport Consumables from '../components/playermanual/Consumables';\r\nimport Cybernetics from '../components/playermanual/Cybernetics';\r\n\r\nconst PlayerManual: React.FC = () => {\r\n    return (<div>\r\n        <h1>The Player Manual</h1>\r\n        <p>This page is to help the player create characters and play the game, view each section below for more details.</p>\r\n        <hr />\r\n        <MakeCharacter key='pm1' />\r\n        <hr />\r\n        <CharacterSheetOverview key='pm2' />\r\n        <hr />\r\n        <RollingSkills key='pmrs' />\r\n        <hr />\r\n        <Experience key='pm4' />\r\n        <hr />\r\n        <CharacterSize key='pmcs' />\r\n        <hr />\r\n        <Combat key='pm5' />\r\n        <hr />\r\n        <HealthAndRest key='pm8' />\r\n        <hr />\r\n        <Wealth key='pm3' />\r\n        <hr />\r\n        <Equipment key='pm6' />\r\n        <hr />\r\n        <Consumables key='pmcons' />\r\n        <hr />\r\n        <CarryingCapacity key='pmcc' />\r\n        <hr />\r\n        <Cybernetics key='pmcyb' />\r\n        <hr />\r\n        <Vehicles key='pm7' />\r\n        <hr />\r\n        <Radiation key='pmr' />\r\n        <hr />\r\n        <Section title='Spell Roller'><SpellRoller key='pm9' /></Section>\r\n    </div>);\r\n}\r\n\r\nconst RollingSkills = () => \r\n    <Section title='Making a skill roll'>\r\n        <h3>Rolling a skill</h3>\r\n        <p>When you attempt to do anything that has a possibility of failure the GM will call on the player to make a skill roll. A skill roll involves two 10 sided dice, your skill rank and an appropriate ability (strength, agility, etc).</p>\r\n        <p>Roll the dice, add them up, add the skill and ability (and any relevant perk if you have it). This number will be compared with a target, some targets are defined in the skill's description, other's depend on other character's skills. If the total equals or exceeds the target then the skill roll is a success. Most often a failure does not result in a catastrophic result, rather there is a spectrum from critical failure, mild failure, success, great success and supreme success</p>\r\n        <p>In cases where there's no available table to check on the GM will choose an appropriate level of difficulty based on the attempted skill according to this table.</p>\r\n        <ul>\r\n            <li>Inconsequential: 0 </li>\r\n            <li>Trivial: 5</li>\r\n            <li>Easy: 10</li>\r\n            <li>Routine: 15</li>\r\n            <li>Challenging: 20</li>\r\n            <li>Hard: 25</li>\r\n            <li>Very hard: 30</li>\r\n            <li>Extremely hard: 35</li>\r\n            <li>Hellish: 40</li>\r\n            <li>Impossible: 45</li>\r\n            <li>Heroic: 50</li>\r\n            <li>Godmode: 55</li>\r\n            <li>Don't even try: 60</li>\r\n        </ul>\r\n        <h4>Take 4</h4>\r\n        <p>Players can always choose to Take 4, this means instead of rolling they use the number 4. In some cases the GM might say that players are not allowed to Take 4 but it is adviced to be rare.</p>\r\n        <h4>Take 10</h4>\r\n        <p>If there are no harmful consequences, the character is not under duress or stress then the player may choose to take 10. This works similarly to Take 4. Passive skills are encouraged to always use Take 10.</p>\r\n        <h4>Take 15</h4>\r\n        <p>If the situation is such that it allows for Take 10 then the player may opt to take 10 times as long and Take 15.</p>\r\n    </Section>\r\n\r\nconst HealthAndRest = () =>\r\n    <Section title='Health and Rest'>\r\n        <h3>Health</h3>\r\n        <i>There are two kinds of health, mental and physical. Injury to either will result in reduced ability and can lead to eventual death</i>\r\n        <h4>Physical Health</h4>\r\n        <p>\r\n            Physical health represents the integrity of body.\r\n        </p>\r\n        <p>If you are injured you take penalty to all physical activities with an equal amount of damage taken. Note that merely walking is an athletics + endurance roll, severe damage may impede your ability to walk a distance.</p>\r\n        <p>If your physical health (life) is reduced to zero you do not immediately die, rather you are partially incapacitated, any extraneous physical activity will cause you to take 1 damage</p>\r\n        <p>If your physical health reaches full negative (-100%) you become unconscious and start to die, you lose 1 life every x number of minutes (x = you endurance), once it hits -200% you are fully dead</p>\r\n        <h5>Pain and adrenaline</h5>\r\n        <p>When you receive an injury during combat your body will produce adrenaline, this prevents penalties to physical activities, it lasts 1 hour, each time it happens you lose 1 mental health.</p>\r\n        <h5>Painkillers</h5>\r\n        <p>Painkillers can reduce the penalty to physical activities by transfering them into mental penalties. The stronger the painkiller the more it dulls the mind.</p>\r\n        \r\n        <h4>Mental Health</h4>\r\n        <p>\r\n            Mental health represents the integrity of the mind.\r\n        </p>\r\n        <p>\r\n            If your mental health is injured you take a penalty to all mental activities equal to the amount of damage.\r\n        </p>\r\n        <p>Mental health injuries come from high levels of stress, over time it can accumulate.</p>\r\n        <p>While you can not directly die from mental health injury it can debilitate you, if you reach zero you enter a state of depression: mundane tasks require a roll, if you fail you lack the motivation to act and do nothing. Even in life threatening situations since your character has lost the will to live.</p>        \r\n        <h5>Ability damage</h5>\r\n        <p>Ability damage recovers 1 per rest, if you have ability damage in multiple abilities then the one with the most damage recovers.</p>\r\n        <p>Very few things cause direct ability damage, however if one ability is reduced to 0 or less then your character immediately falls unconscious</p>\r\n        <h4>Mana</h4>\r\n        <p>Mana is used for spells and activating mutations. A occations may let you expend mana for other purposes. There is no penalty to not having full mana, having below zero mana imposes a penalty equal to negative mana to all skill rolls. This stacks with other penalties.</p>\r\n        <h3>Recovery</h3>\r\n        <p>Recovery of life, mental health and mana generally happens when you rest. Life and mental health depends on the quality of sleep</p>\r\n        <ul>\r\n            <li>No sleep, work: if you stay up all night and work then you recover life at 50% rate and lose 2 mental health. Exhaustion increases by 1 level</li>\r\n            <li>No sleep, no work: if you stay up all night but do nothing then you recover life at 50% and lose 1 mental health.</li>\r\n            <li>Horrible sleep: you wake up with a headache and your body is sore and stiff, recover life at 50% and no mental health recovery. Exhaustion decreases by 1 level</li>\r\n            <li>Low quality sleep: you wake up with a mild headache, life recovery rate 100% and no mental health recovery. Exhaustion decreases by 2 levels</li>\r\n            <li>Adequate sleep: you wake up feeling rested, life recovery rate 100% and 1 mental health Recovery. Exhaustion decreases by 3 levels</li>\r\n            <li>Good sleep: you wake up feeling well rested, life recovery rate 100%, 1 mental health recovery and you gain the \"well rested\" buff. Exhaustion decreases by 4 levels</li>\r\n            <li>Fantastic sleep: you wake up full or energy, life recovery rate 150%, 2 mental health recovery and you gain the \"well rested\" buff. Exhaustion decreases by 5 levels</li>\r\n        </ul>\r\n        <p>Well rested: you have +1 to all skill rolls, if you are in a situation where you may lose mental health instead dispend this buff. Lasts 12 hours</p>\r\n        <p>The quality of your sleep depends on the quality of your situation, some things have positive effects, some negative. If the quality if dropped below horrible then you can't fall asleep</p>\r\n        <ul>\r\n            <li>Sleeping on the floor with no cover: horrible sleep</li>\r\n            <li>Sleeping on bad mattress or bedroll: low quality sleep</li>\r\n            <li>Sleeping on bed: adequate quality sleep</li>\r\n            <li>Sleeping on good bed: good sleep</li>\r\n            <li>Temperature ouside of comfort (16-26): drop quality one step</li>\r\n            <li>Extreme temperature: drop quality two steps</li>\r\n            <li>Bad ventilation: drop quality one step</li>\r\n            <li>Sleeping in body suit armor: drop quality one step</li>\r\n            <li>Sleeping in plated or power armor: drop quality two steps</li>\r\n            <li>Sleeping with 3 or more other people in room: drop quality one step</li>\r\n            <li>No noice or disturbances: raise quality one step</li>\r\n            <li>Sleeping medication: raise quality one step</li>\r\n        </ul>\r\n        <p>Life recovery rate is equal to endurance / 5 per day, fractions are carried over.</p>\r\n        <p>Mental health recovery is equal to 1 per day on adequate and good quality sleep, 2 on fantastic sleep quality. It can be accelerated through therapy and meditation</p>\r\n        <p>Mana recovers 1 per day night cycle. It is completely unaffected by quality of sleep or effort during the day.</p>\r\n    </Section>;\r\n\r\n\r\n\r\nconst SpellRoller: React.FC = (props) => {\r\n    const [rolls, setRolls] = useState<number[]>([]);\r\n    const DRollNot = (n: number[]) => {\r\n        while (true) {\r\n            let x = Math.floor(Math.random() * SpellsPerks.length);\r\n            if (n.filter(p => p === x).length === 0) return x;\r\n        }\r\n    }\r\n    const fractionOfSpells = 3;\r\n    const Roll = () => {\r\n        let numbers:number[] = [];\r\n        for (let counter = 0; counter < fractionOfSpells; counter++){\r\n            numbers.push(DRollNot(numbers));\r\n        }\r\n        setRolls(numbers);\r\n    };\r\n\r\n    return (<>\r\n        <p>When you want to acquire a supernatural ability, you roll over all spells and perks {fractionOfSpells} times and pick one. There are in total {SpellsPerks.length} spells and mutations.</p>\r\n        <button onClick={() => Roll()}>Roll</button>\r\n        <ol>\r\n            {rolls.map(r => <li>{SpellsPerks[r].name} ({r})</li>)}\r\n        </ol>\r\n    </>);\r\n}\r\n\r\n\r\nexport default PlayerManual;","import React from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport usePersistentState from \"../../utils/usePersistentState\";\r\n\r\ninterface ISection {\r\n    title: string;\r\n    tab?: number;\r\n    border?: boolean | undefined;\r\n}\r\n\r\nconst Section: React.FC<ISection> = ({ title, tab, border, children }) => {\r\n    const [isOpen, setIsOpen] = usePersistentState<boolean>(title + tab, false);\r\n    let tabSize = '0';\r\n    if (tab !== undefined)\r\n        tabSize = tab + 'px';\r\n    return <div className={border === true ? 'bordersection' : ''} style={{ paddingLeft: tabSize }}>\r\n        <Button onClick={() => setIsOpen(!isOpen)}>{title} {isOpen ? '-' : '+'}</Button>\r\n        {isOpen && children}\r\n    </div>;\r\n}\r\n\r\nexport default Section;","import React from 'react';\r\n\r\ninterface IIndexedProps {\r\n    title: string;\r\n    source?: string | undefined;\r\n}\r\n\r\nexport const Indexed: React.FC<IIndexedProps> = ({ title, children, source }) => {\r\n    return <>\r\n        <h3><a className='notalink' href={'#' + title} id={title}>{title}</a> <a href={'#' + source}>^</a></h3>\r\n        {children}\r\n    </>;\r\n}\r\n\r\n\r\n\r\ninterface IIndexerProps {\r\n    title: string;\r\n}\r\n\r\nconst Indexer: React.FC<IIndexerProps> = ({ children, title }) => {\r\n\r\n    let index: string[] = [];\r\n    const anyChildren: any = children;\r\n\r\n    const indexedItems: JSX.Element[] = [];\r\n\r\n    for (var child in anyChildren) {\r\n        var x = anyChildren[child];\r\n        if (x.props.title === undefined) {\r\n        }\r\n        else {\r\n            indexedItems.push(<Indexed title={x.props.title} source={title}>{x.props.children}</Indexed>);\r\n            index.push(x.props.title);\r\n        }\r\n    }\r\n\r\n    return <>\r\n        <h4><a className='notalink' href={'#' + title} id={title}>Table of contents </a></h4>\r\n        {index.map(i => <h5> <a href={'#' + i}>{i}</a> </h5>)}\r\n        <hr />\r\n        {indexedItems.map(js => js)}\r\n    </>;\r\n}\r\n\r\n\r\n\r\n\r\nexport default Indexer;","import React, { useState } from \"react\";\r\nimport EditText from \"../general/HideText\";\r\nimport { Character } from \"../Character\";\r\n\r\ninterface IDice {\r\n    sides: number;\r\n    numberOfDice: number;\r\n}\r\n\r\ninterface ICharacterRoller {\r\n    strength: IDice;\r\n    agility: IDice;\r\n    endurance: IDice;\r\n    perception: IDice;\r\n    willpower: IDice;\r\n    intelligence: IDice;\r\n}\r\n\r\ninterface ICharacterData {\r\n    strength: number[];\r\n    agility: number[];\r\n    endurance: number[];\r\n    perception: number[];\r\n    willpower: number[];\r\n    intelligence: number[];\r\n}\r\n\r\nconst CharacterRoller: React.FC<ICharacterRoller> = (props) => {\r\n    const [characterData, setCharacterData] = useState<ICharacterData[]>([]);\r\n\r\n    return (<div className=\"flexbox\">\r\n        <button onClick={() => rollCharacterData(props, setCharacterData)}>Roll</button>\r\n\r\n        {characterData.length > 0 ? <div className=\"flexContainer\">\r\n            Strength<br />\r\n            Endurance<br />\r\n            Agility<br />\r\n            Perception<br />\r\n            Intelligence<br />\r\n            Willpower<br />\r\n        </div> : null}\r\n\r\n        {characterData.map(cd => {\r\n            return <div className=\"flexContainer\">\r\n                {sumN(cd.strength)}<br />\r\n                {sumN(cd.endurance)}<br />\r\n                {sumN(cd.agility)}<br />\r\n                {sumN(cd.perception)}<br />\r\n                {sumN(cd.intelligence)}<br />\r\n                {sumN(cd.willpower)}<br />\r\n            </div>\r\n        })}\r\n    </div>);\r\n}\r\n\r\nconst sumN = (n: number[]) => ` ${n.join(', ')} = ${n.reduce(function (a, b) { return a + b; }, 0)}`;\r\n\r\nconst rollCharacterData = (dice: ICharacterRoller, setter: React.Dispatch<React.SetStateAction<ICharacterData[]>>) => {\r\n    let charData: ICharacterData[] = [];\r\n\r\n    for (let counter = 0; counter < 4; counter++) {\r\n        charData.push({\r\n            strength: roll(dice.strength),\r\n            agility: roll(dice.agility),\r\n            endurance: roll(dice.endurance),\r\n            perception: roll(dice.perception),\r\n            willpower: roll(dice.willpower),\r\n            intelligence: roll(dice.intelligence),\r\n        });\r\n    }\r\n    setter(charData);\r\n}\r\n\r\nconst roll = (dice: IDice) => {\r\n    let numbers: number[] = [];\r\n    for (let counter = 0; counter < dice.numberOfDice; counter++) {\r\n        numbers.push(Math.floor((Math.random() * dice.sides)) + 1);\r\n    }\r\n    return numbers;\r\n}\r\n\r\n\r\n\r\nconst getStrengthHuman = (age: number) => {\r\n    if (age > 80) return { sides: 8, numberOfDice: 1 };\r\n    if (age > 26) return { sides: 10, numberOfDice: 1 };\r\n    return { sides: 8, numberOfDice: 1 };\r\n\r\n}\r\nconst getAgilityHuman = (age: number) => {\r\n    if (age > 80) return { sides: 6, numberOfDice: 1 };\r\n    if (age > 40) return { sides: 8, numberOfDice: 1 };\r\n    return { sides: 10, numberOfDice: 1 };\r\n}\r\nconst getEnduranceHuman = (age: number) => {\r\n    if (age > 80) return { sides: 8, numberOfDice: 1 };\r\n    if (age > 40) return { sides: 10, numberOfDice: 1 };\r\n    return { sides: 12, numberOfDice: 1 };\r\n}\r\nconst getPerceptionHuman = (age: number) => {\r\n    if (age > 80) return { sides: 6, numberOfDice: 1 };\r\n    if (age > 40) return { sides: 8, numberOfDice: 1 };\r\n    if (age > 26) return { sides: 10, numberOfDice: 1 };\r\n    return { sides: 12, numberOfDice: 1 };\r\n\r\n}\r\nconst getIntelligenceHuman = (age: number) => {\r\n    if (age > 80) return { sides: 8, numberOfDice: 1 };\r\n    return { sides: 10, numberOfDice: 1 };\r\n}\r\nconst getWillpowerHuman = (age: number) => {\r\n    if (age > 80) return { sides: 8, numberOfDice: 1 };\r\n    if (age > 40) return { sides: 10, numberOfDice: 1 };\r\n    if (age > 26) return { sides: 8, numberOfDice: 1 };\r\n    return { sides: 6, numberOfDice: 1 };\r\n}\r\n\r\n\r\nexport const CharacterRollerHuman = () => {\r\n    const [age, setAge] = useState(24);\r\n    return <>\r\n        Age: {age}<br />\r\n    Starting Exp: {Character.CharacterPointsHuman(age)}<br />\r\n    Multiplier Exp: {Character.ExperienceMultiplerHuman(age)}<br />\r\n        <EditText isEdit=\"edit\" onChange={(str) => setAge(parseInt(str))} txt={age} explain=\"\" />\r\n        <CharacterRoller\r\n            strength={getStrengthHuman(age)}\r\n            agility={getAgilityHuman(age)}\r\n            endurance={getEnduranceHuman(age)}\r\n            intelligence={getIntelligenceHuman(age)}\r\n            willpower={getWillpowerHuman(age)}\r\n            perception={getPerceptionHuman(age)}\r\n        />\r\n    </>\r\n}\r\n\r\nconst getStrengthShambra = (age: number) => {\r\n    if (age > 100) return { sides: 12, numberOfDice: 1 };\r\n    if (age > 50) return { sides: 10, numberOfDice: 1 };\r\n    if (age > 25) return { sides: 8, numberOfDice: 1 };\r\n    return { sides: 6, numberOfDice: 1 };\r\n}\r\nconst getAgilityShambra = (age: number) => {\r\n    if (age > 100) return { sides: 4, numberOfDice: 1 };\r\n    if (age > 50) return { sides: 6, numberOfDice: 1 };\r\n    if (age > 25) return { sides: 8, numberOfDice: 1 };\r\n    return { sides: 10, numberOfDice: 1 };\r\n}\r\nconst getEnduranceShambra = (age: number) => {\r\n    if (age > 50) return { sides: 10, numberOfDice: 1 };\r\n    if (age > 25) return { sides: 8, numberOfDice: 1 };\r\n    return { sides: 6, numberOfDice: 1 };\r\n}\r\nconst getPerceptionShambra = (age: number) => {\r\n    if (age > 50) return { sides: 10, numberOfDice: 1 };\r\n    return { sides: 12, numberOfDice: 1 };\r\n}\r\nconst getIntelligenceShambra = (age: number) => {\r\n    if (age > 100) return { sides: 10, numberOfDice: 1 };\r\n    if (age > 35) return { sides: 8, numberOfDice: 1 };\r\n    if (age > 25) return { sides: 6, numberOfDice: 1 };\r\n    return { sides: 4, numberOfDice: 1 };\r\n}\r\nconst getWillpowerShambra = (age: number) => {\r\n    if (age > 25) return { sides: 10, numberOfDice: 1 };\r\n    if (age > 15) return { sides: 8, numberOfDice: 1 };\r\n    return { sides: 6, numberOfDice: 1 };\r\n}\r\n\r\n\r\nexport const CharacterRollerShambra = () => {\r\n    const [age, setAge] = useState(24);\r\n    return <>\r\n        Age: {age}<br />\r\n    Starting Exp: {Character.CharacterPointsShambras(age)}<br />\r\n    Multiplier Exp: {Character.ExperienceMultiplerShambras(age)}<br />\r\n        <EditText isEdit=\"edit\" onChange={(str) => setAge(parseInt(str))} txt={age} explain=\"\" />\r\n        <CharacterRoller\r\n            strength={getStrengthShambra(age)}\r\n            agility={getAgilityShambra(age)}\r\n            endurance={getEnduranceShambra(age)}\r\n            intelligence={getIntelligenceShambra(age)}\r\n            willpower={getWillpowerShambra(age)}\r\n            perception={getPerceptionShambra(age)}\r\n        />\r\n    </>\r\n}\r\n\r\nconst getStrengthMerlion = (age: number) => {\r\n    if (age > 40) return { sides: 8, numberOfDice: 1 };\r\n    return { sides: 6, numberOfDice: 1 };\r\n}\r\nconst getAgilityMerlion = (age: number) => {\r\n    if (age > 40) return { sides: 8, numberOfDice: 1 };\r\n    return { sides: 10, numberOfDice: 1 };\r\n}\r\nconst getEnduranceMerlion = (age: number) => {\r\n    if (age > 40) return { sides: 6, numberOfDice: 1 };\r\n    return { sides: 8, numberOfDice: 1 };\r\n}\r\nconst getPerceptionMerlion = (age: number) => {\r\n    if (age > 40) return { sides: 8, numberOfDice: 1 };\r\n    return { sides: 10, numberOfDice: 1 };\r\n}\r\nconst getIntelligenceMerlion = (age: number) => {\r\n    return { sides: 4, numberOfDice: 4 };\r\n}\r\nconst getWillpowerMerlion = (age: number) => {\r\n    return { sides: 10, numberOfDice: 1 };\r\n}\r\n\r\nexport const CharacterRollerMerlion = () => {\r\n    const [age, setAge] = useState(24);\r\n    return <>\r\n        Age: {age}<br />\r\n    Starting Exp: {Character.CharacterPointsMerlion(age)}<br />\r\n    Multiplier Exp: {Character.ExperienceMultiplerMerlion(age)}<br />\r\n        <EditText isEdit=\"edit\" onChange={(str) => setAge(parseInt(str))} txt={age} explain=\"\" />\r\n        <CharacterRoller\r\n            strength={getStrengthMerlion(age)}\r\n            agility={getAgilityMerlion(age)}\r\n            endurance={getEnduranceMerlion(age)}\r\n            intelligence={getIntelligenceMerlion(age)}\r\n            willpower={getWillpowerMerlion(age)}\r\n            perception={getPerceptionMerlion(age)}\r\n        />\r\n    </>\r\n}\r\n\r\nconst getStrengthNekovian = (age: number) => {\r\n    if (age > 36) return { sides: 10, numberOfDice: 1 };\r\n    return { sides: 12, numberOfDice: 1 };\r\n}\r\nconst getAgilityNekovian = (age: number) => {\r\n    if (age > 60) return { sides: 8, numberOfDice: 1 };\r\n    if (age > 24) return { sides: 10, numberOfDice: 1 };\r\n    return { sides: 12, numberOfDice: 1 };\r\n}\r\nconst getEnduranceNekovian = (age: number) => {\r\n    if (age > 60) return { sides: 8, numberOfDice: 1 };\r\n    if (age > 36) return { sides: 10, numberOfDice: 1 };\r\n    if (age > 24) return { sides: 12, numberOfDice: 1 };\r\n    return { sides: 10, numberOfDice: 1 };\r\n}\r\nconst getPerceptionNekovian = (age: number) => {\r\n    if (age > 60) return { sides: 4, numberOfDice: 1 };\r\n    if (age > 36) return { sides: 6, numberOfDice: 1 };\r\n    return { sides: 8, numberOfDice: 1 };\r\n}\r\nconst getIntelligenceNekovian = (age: number) => {\r\n    if (age > 36) return { sides: 8, numberOfDice: 1 };\r\n    if (age > 24) return { sides: 10, numberOfDice: 1 };\r\n    return { sides: 8, numberOfDice: 1 };\r\n}\r\nconst getWillpowerNekovian = (age: number) => {\r\n    return { sides: 12, numberOfDice: 1 };\r\n}\r\n\r\nexport const CharacterRollerNekovian = () => {\r\n    const [age, setAge] = useState(24);\r\n    return <>\r\n        Age: {age}<br />\r\n    Starting Exp: {Character.CharacterPointsNekovian(age)}<br />\r\n    Multiplier Exp: {Character.ExperienceMultiplerNekovian(age)}<br />\r\n        <EditText isEdit=\"edit\" onChange={(str) => setAge(parseInt(str))} txt={age} explain=\"\" />\r\n        <CharacterRoller\r\n            strength={getStrengthNekovian(age)}\r\n            agility={getAgilityNekovian(age)}\r\n            endurance={getEnduranceNekovian(age)}\r\n            intelligence={getIntelligenceNekovian(age)}\r\n            willpower={getWillpowerNekovian(age)}\r\n            perception={getPerceptionNekovian(age)}\r\n        />\r\n    </>\r\n}\r\n\r\nexport default CharacterRoller;","import React, { useState, CSSProperties } from \"react\";\r\n\r\ninterface IEllipsisProps {\r\n    text: string | undefined;\r\n    cutOff: number;\r\n}\r\n\r\nconst cursorStyle: CSSProperties = {\r\n    cursor: 'pointer'\r\n}\r\n\r\nconst Ellipsis: React.FC<IEllipsisProps> = ({ text, cutOff }) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    if (text === undefined) return null;\r\n    if (text.length < cutOff)\r\n        return <p>{text}</p>\r\n    else if (!isOpen && text.length >= cutOff)\r\n        return <p style={cursorStyle} onClick={() => setIsOpen(true)}>{text.substring(0, cutOff)}...</p>\r\n    else return <p style={cursorStyle} onClick={() => setIsOpen(false)}>{text}</p>\r\n}\r\n\r\nexport default Ellipsis;"],"sourceRoot":""}