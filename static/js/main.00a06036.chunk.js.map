{"version":3,"sources":["components/Label.tsx","components/Field.tsx","components/CharacterSheet.tsx","components/Skills.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Label","children","style","display","minWidth","Field","label","value","onChange","max","min","modifier","ma","undefined","mi","total","Paper","Button","onClick","fSum","n","x","i","CharacterSheet","props","useReducer","useCharacter","strength","agility","endurance","perception","willpower","intelligence","skills","name","attribute","level","techniques","character","dispatch","calculatedPointUse","map","s","reduce","a","b","hitpoints","mana","damageBonusSmall","Math","floor","damageBonusMedium","damageBonusLarge","textAlign","Grid","container","spacing","item","xs","sm","action","substring","toUpperCase","state","r","findIndex","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.00a06036.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Label: React.FC<{}> = ({children}) => {\r\n    return <label style={{display:'inline-block', minWidth:'160px'}}>{children}</label>;\r\n}\r\n\r\n","import React from 'react';\r\nimport { Paper, Button } from '@material-ui/core';\r\nimport { Label } from './Label';\r\n\r\ninterface FieldProps {\r\n    label: string;\r\n    value: number;\r\n    max?: number;\r\n    min?: number;\r\n    modifier?: number;\r\n    onChange: (n: number) => void;\r\n}\r\n\r\nexport const Field: React.FC<FieldProps> = ({ label, value, onChange, max, min, modifier }) => {\r\n    let ma = max !== undefined ? max : 10;\r\n    let mi = min !== undefined ? min : 1;\r\n    let total = modifier !== undefined ? value + modifier : value;\r\n    return <Paper>\r\n        <Label>{label}: {value} {modifier !== undefined ? '+ ' + modifier + ' = ' + total : null}</Label>\r\n        <Button onClick={() => onChange(ma <= value ? value : value + 1)}>+</Button>\r\n        <Button onClick={() => onChange(mi >= value ? value : value - 1)}>-</Button>\r\n    </Paper>\r\n}","import React, { useState, useReducer } from 'react';\r\nimport { Field } from './Field';\r\nimport { Label } from './Label';\r\nimport { Paper, Grid } from '@material-ui/core';\r\nimport { Skill, GetSkillList } from './Skills';\r\nimport { normalize } from 'path';\r\n\r\ninterface CharacterSheetProps {\r\n\r\n}\r\n\r\nconst fSum = (n: number): number => {\r\n    let x = 0;\r\n    for (let i = 0; i <= n; i++) {\r\n        x += i;\r\n    }\r\n    return x;\r\n};\r\n\r\n\r\ninterface Technique {\r\n    name: string;\r\n    bonus: string;\r\n    cost: number;\r\n}\r\n\r\ninterface Character {\r\n    strength: number;\r\n    agility: number;\r\n    endurance: number;\r\n    perception: number;\r\n    willpower: number;\r\n    intelligence: number;\r\n    skills: Skill[];\r\n    techniques: Technique[];\r\n}\r\n\r\nexport const CharacterSheet: React.FC<CharacterSheetProps> = (props) => {\r\n    const [character, dispatch] = useReducer(useCharacter, {\r\n        strength: 5,\r\n        agility: 5,\r\n        endurance: 5,\r\n        perception: 5,\r\n        willpower: 5,\r\n        intelligence: 5,\r\n        skills: GetSkillList(),\r\n        techniques: []\r\n    });\r\n\r\n\r\n    let maxPoints = 1000;\r\n    let calculatedPointUse = fSum(character.strength) * 4\r\n        + fSum(character.agility) * 4\r\n        + fSum(character.endurance) * 4\r\n        + fSum(character.perception) * 4\r\n        + fSum(character.willpower) * 4\r\n        + fSum(character.intelligence) * 4\r\n        + character.skills.map(s => fSum(s.level)).reduce((a, b) => a + b, 0);\r\n\r\n    let hitpoints = character.strength + character.endurance * 2;\r\n\r\n    let mana = character.endurance + character.willpower * 2;\r\n\r\n    let damageBonusSmall = Math.floor(character.strength / 4);\r\n    let damageBonusMedium = Math.floor(character.strength / 3);\r\n    let damageBonusLarge = Math.floor(character.strength / 2);\r\n\r\n\r\n    return <Paper style={{ textAlign: 'left' }}>\r\n        <Grid container spacing={3} >\r\n            <Grid item xs={12} sm={6}>\r\n                Character points used {calculatedPointUse} / {maxPoints}\r\n                <Field label='strength' value={character.strength} onChange={n => dispatch({ action: 'strength', value: n })}></Field>\r\n                <Field label='agility' value={character.agility} onChange={n => dispatch({ action: 'agility', value: n })}></Field>\r\n                <Field label='endurance' value={character.endurance} onChange={n => dispatch({ action: 'endurance', value: n })}></Field>\r\n                <Field label='perception' value={character.perception} onChange={n => dispatch({ action: 'perception', value: n })}></Field>\r\n                <Field label='willpower' value={character.willpower} onChange={n => dispatch({ action: 'willpower', value: n })}></Field>\r\n                <Field label='intelligence' value={character.intelligence} onChange={n => dispatch({ action: 'intelligence', value: n })}></Field>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n                <Paper>Hit points: {hitpoints}</Paper>\r\n                <Paper>mana: {mana}</Paper>\r\n                <Paper>damage bonus small: {damageBonusSmall}</Paper>\r\n                <Paper>damage bonus medium: {damageBonusMedium}</Paper>\r\n                <Paper>damage bonus large: {damageBonusLarge}</Paper>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n                {character.skills.map(s => {\r\n                    let modifier: number = 0;\r\n                    switch (s.attribute) {\r\n                        case 'strength': modifier = character.strength; break;\r\n                        case 'agility': modifier = character.agility; break;\r\n                        case 'endurance': modifier = character.endurance; break;\r\n                        case 'perception': modifier = character.perception; break;\r\n                        case 'willpower': modifier = character.willpower; break;\r\n                        case 'intelligence': modifier = character.intelligence; break;\r\n                    }\r\n                    return <Field modifier={modifier} max={30} min={0} label={s.name + ' ' + s.attribute.substring(0,3).toUpperCase()} value={s.level} onChange={(n => dispatch({ action: 'skill', name: s.name, value: n }))}></Field>\r\n                })}\r\n            </Grid>\r\n        </Grid>\r\n    </Paper>;\r\n}\r\n\r\ninterface dispatcher {\r\n    action: string;\r\n    name?: string;\r\n    value: number;\r\n}\r\n\r\nconst useCharacter = (state: Character, action: dispatcher) => {\r\n    switch (action.action) {\r\n        case 'strength': return { ...state, strength: action.value };\r\n        case 'agility': return { ...state, agility: action.value };\r\n        case 'endurance': return { ...state, endurance: action.value };\r\n        case 'willpower': return { ...state, willpower: action.value };\r\n        case 'perception': return { ...state, perception: action.value };\r\n        case 'intelligence': return { ...state, intelligence: action.value };\r\n        case 'skill':\r\n            let r = {\r\n                ...state\r\n            };\r\n            r.skills[state.skills.findIndex(s => s.name === action.name)].level = action.value;\r\n            return r;\r\n    }\r\n    return state;\r\n}","export interface Skill {\r\n    name: string;\r\n    attribute: string|'strength'|'agility'|'endurance'|'perception'|'willpower'|'intelligence';\r\n    level: number;\r\n}\r\n\r\nexport const GetSkillList = ():Skill[] => {\r\n    return [\r\n        {\r\n            name:'combat',\r\n            attribute:'agility',\r\n            level:0\r\n        },\r\n    ];\r\n}","import React from 'react';\nimport {CharacterSheet} from './components/CharacterSheet';\nimport './App.css';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n     <CharacterSheet ></CharacterSheet>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}