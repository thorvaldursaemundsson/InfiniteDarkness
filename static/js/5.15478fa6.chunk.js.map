{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/inherits.js","components/gamemaster/Battlemat.tsx","views/Battleview.tsx"],"names":["_possibleConstructorReturn","self","call","_getPrototypeOf","o","Object","setPrototypeOf","getPrototypeOf","__proto__","_setPrototypeOf","p","_inherits","subClass","superClass","TypeError","prototype","create","constructor","value","writable","configurable","Battlemap","props","state","outputData","currentIcons","initialIcons","isVisible","currentEdit","undefined","currentIconsTurns","this","length","setState","boardHeight","boardWidth","map","char","key","id","onClick","symbol","onChange","i","editIcon","icon","icons","index","sequence","speed","forceUpdate","showHexmat","showEditor","React","Component","Sequencer","onNext","useState","currentRound","setCurrentRound","currentSequence","setCurrentSequence","iconsBySequence","sort","a","b","maxSequence","nextRound","nextRoundAt","roundNumber","filter","remainingIcons","next","inputCss","width","IconEditor","setSymbol","setSpeed","setSequence","type","style","e","target","parseInt","Hexmat","mount","hexagonAngle","sideLength","hexHeight","hexRadius","hexRectangleHeight","hexRectangleWidth","initializeBoard","canvas","iconAtHex","hasmoved","mouseStartX","mouseStartY","mouseEndX","mouseEndY","addEventListener","mouseEvent","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","Math","floor","screenX","screenY","ctx","getContext","clearRect","fillStyle","strokeStyle","lineWidth","drawBoard","drawHexagon","xR","yR","distanceBetweenPositions","startX","startY","drawIconsOnBoard","findIconAtHex","ic","x1","y1","x2","y2","dx","abs","dy","z1","z2","setVariables","ix","iy","sin","cos","canvasContext","getIconPosition","font","fillText","height","convertXyToXYZ","fill","str","beginPath","moveTo","lineTo","closePath","stroke","background","overflow","onContextMenu","preventDefault","ref","n","inputCssTiny","alpha","randId","rand","counter","random","Battleview","setWidth","setHeight","currentAddingIcon","setCurrentAddingIcon","currentAddingIconSqs","setCurrentAddingIconSqs","currentAddingIconSpeed","setCurrentAddingIconSpeed","setIcons","title"],"mappings":"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","file":"static/js/5.15478fa6.chunk.js","sourcesContent":["import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import React, { CSSProperties, useState } from 'react';\r\n\r\ninterface IBattlemapState {\r\n    outputData: string;\r\n    currentIcons: Icon[];\r\n    currentIconsTurns: Icon | undefined;\r\n}\r\n\r\ninterface IBattlemapWrapperState extends IBattlemapState {\r\n    isVisible: boolean;\r\n    currentEdit: Icon | undefined;\r\n}\r\n\r\ninterface IBattlematProps {\r\n    boardHeight: number;\r\n    boardWidth: number;\r\n    initialIcons: Icon[];\r\n}\r\n\r\ninterface Icon {\r\n    symbol: string;\r\n    startX: number;\r\n    startY: number;\r\n    id: string;\r\n    sequence: number;\r\n    speed: number;\r\n}\r\n\r\n\r\nexport default class Battlemap extends React.Component<IBattlematProps, IBattlemapWrapperState> {\r\n\r\n    constructor(props: Readonly<IBattlematProps>) {\r\n        super(props);\r\n        this.state = {\r\n            outputData: ':)',\r\n            currentIcons: props.initialIcons,\r\n            isVisible: false,\r\n            currentEdit: undefined,\r\n            currentIconsTurns: undefined,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.initialIcons.length !== this.state.currentIcons.length)\r\n            this.setState({ currentIcons: this.props.initialIcons });\r\n    }\r\n\r\n    showHexmat() {\r\n        if (this.state.isVisible === false) return null;\r\n        return <Hexmat initialIcons={this.state.currentIcons} boardHeight={this.props.boardHeight} boardWidth={this.props.boardWidth} />;\r\n    }\r\n\r\n    showEditor() {\r\n        if (this.state.isVisible !== false) return null;\r\n\r\n        return <><h5>Character editor</h5><ul>\r\n            {this.state.currentIcons.map(char => {\r\n                return <li key={`bmceitems_${char.id}`} onClick={() => this.setState({ currentEdit: char })}>{char.symbol}</li>\r\n            })}\r\n        </ul>\r\n            {this.state.currentEdit !== undefined ? <IconEditor onChange={(i) => this.editIcon(i)} icon={this.state.currentEdit} /> : null}\r\n        </>;\r\n    }\r\n\r\n    editIcon(i: Icon) {\r\n        let icons = this.state.currentIcons;\r\n        for (var index in icons) {\r\n            var icon = icons[index];\r\n            if (icon.id === i.id) {\r\n                icon.sequence = i.sequence;\r\n                icon.speed = i.speed;\r\n                icon.symbol = i.symbol;\r\n            }\r\n        }\r\n        this.setState({ currentIcons: icons, currentEdit: undefined });\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <button onClick={() => { this.setState({ isVisible: !this.state.isVisible }); this.forceUpdate(); }}>show</button>\r\n            {this.showHexmat()}\r\n            {this.showEditor()}\r\n        </>;\r\n    }\r\n}\r\n\r\ninterface ISequencerProps {\r\n    icons: Icon[];\r\n    onNext: (next: Icon) => void;\r\n}\r\n\r\nconst Sequencer: React.FC<ISequencerProps> = ({ icons, onNext }) => {\r\n    const [currentRound, setCurrentRound] = useState(0);\r\n    const [currentSequence, setCurrentSequence] = useState(0);\r\n    const iconsBySequence = icons.sort((a, b) => b.sequence - a.sequence);\r\n    const maxSequence = icons.length >= 1 ? iconsBySequence[0].sequence : 0;\r\n    const nextRound = currentRound + 1;\r\n\r\n    const nextRoundAt = (roundNumber: number) => {\r\n        setCurrentSequence(maxSequence);\r\n        setCurrentRound(roundNumber);\r\n        if (iconsBySequence.length > 0) {\r\n            onNext(iconsBySequence[0]);\r\n        }\r\n    };\r\n\r\n    const next = () => {\r\n        const remainingIcons = iconsBySequence.filter(i => i.sequence < currentSequence);\r\n        if (remainingIcons.length > 0) {\r\n            setCurrentSequence(remainingIcons[0].sequence);\r\n            onNext(remainingIcons[0]);\r\n        }\r\n        else {\r\n            nextRoundAt(currentRound + 1);\r\n        }\r\n    };\r\n\r\n    return <>\r\n        <button onClick={() => nextRoundAt(1)}>Begin/restart</button>\r\n        <h5>Round {currentRound}</h5>\r\n        <ul>\r\n            {iconsBySequence.filter(i => i.sequence <= currentSequence).map(i => {\r\n                return <li key={`bmsqeuencer_${i.id}`}>{i.symbol} ({i.sequence})\r\n                {i.sequence === currentSequence ? <button onClick={() => next()}>Done</button> : null}\r\n                </li>\r\n            })}\r\n        </ul>\r\n        <h5>Round {nextRound}</h5>\r\n        <ul>\r\n            {iconsBySequence.filter(i => i.sequence > currentSequence).map(i => {\r\n                return <li key={`bmsqeuencer_${i.id}`}>{i.symbol} ({i.sequence})</li>\r\n            })}\r\n        </ul>\r\n    </>;\r\n}\r\n\r\n\r\ninterface IconEditorProps {\r\n    icon: Icon;\r\n    onChange: (i: Icon) => void;\r\n}\r\nconst inputCss: CSSProperties = {\r\n    width: '60px'\r\n};\r\nconst IconEditor: React.FC<IconEditorProps> = ({ icon, onChange }) => {\r\n    const [symbol, setSymbol] = useState(icon.symbol);\r\n    const [speed, setSpeed] = useState(icon.speed);\r\n    const [sequence, setSequence] = useState(icon.sequence);\r\n    return <>\r\n        Symbol: <input type='text' style={inputCss} value={symbol} onChange={(e) => setSymbol(e.target.value)} /><br />\r\n        Speed: <input type='text' style={inputCss} value={speed} onChange={(e) => setSpeed(parseInt(e.target.value))} /><br />\r\n        Sequence: <input type='text' style={inputCss} value={sequence} onChange={(e) => setSequence(parseInt(e.target.value))} /><br />\r\n        <button onClick={() => onChange({ ...icon, symbol: symbol, speed: speed, sequence: sequence })}>Save</button>\r\n\r\n    </>;\r\n}\r\n\r\nclass Hexmat extends React.Component<IBattlematProps, IBattlemapState> {\r\n\r\n    mount: HTMLCanvasElement | undefined | null;\r\n    hexagonAngle: number = 0;\r\n    sideLength: number = 25;\r\n    hexHeight: number = 0;\r\n    hexRadius: number = 0;\r\n    hexRectangleHeight: number = 0;\r\n    hexRectangleWidth: number = 0;\r\n\r\n\r\n    constructor(props: Readonly<IBattlematProps>) {\r\n        super(props);\r\n        this.state = {\r\n            outputData: ':)',\r\n            currentIcons: props.initialIcons,\r\n            currentIconsTurns: undefined\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.initializeBoard();\r\n\r\n        var canvas = this.mount;\r\n        if (canvas !== null && canvas !== undefined) {\r\n            let hasmoved = false;\r\n            let mouseStartX = 0;\r\n            let mouseStartY = 0;\r\n            let mouseEndX = 0;\r\n            let mouseEndY = 0;\r\n            let iconAtHex: Icon | undefined;\r\n            canvas.addEventListener(\"mousemove\", (mouseEvent) => {\r\n                var canvas = this.mount;\r\n                if (canvas !== null && canvas !== undefined) {\r\n                    const rect = canvas.getBoundingClientRect();\r\n                    const x = mouseEvent.clientX - rect.left;\r\n                    const y = mouseEvent.clientY - rect.top;\r\n                    mouseEndX = Math.floor(y / (this.hexHeight + this.sideLength));\r\n                    mouseEndY = Math.floor((x - (mouseEndX % 2) * this.hexRadius) / this.hexRectangleWidth);\r\n\r\n                    const screenX = mouseEndY * this.hexRectangleWidth + ((mouseEndX % 2) * this.hexRadius);\r\n                    const screenY = mouseEndX * (this.hexHeight + this.sideLength);\r\n\r\n                    var ctx = canvas.getContext('2d');\r\n                    if (ctx === null) return;\r\n                    ctx.clearRect(0, 0, this.props.boardWidth * 2 * this.sideLength, this.props.boardHeight * 2 * this.sideLength);\r\n\r\n\r\n                    ctx.fillStyle = \"#000000\";\r\n                    ctx.strokeStyle = \"#666666\";\r\n                    ctx.lineWidth = 1;\r\n                    this.drawBoard(ctx, this.props.boardWidth, this.props.boardHeight);\r\n\r\n                    if (mouseEndX >= 0 && mouseEndX < this.props.boardWidth && mouseEndY >= 0 && mouseEndY < this.props.boardHeight && ctx !== undefined) {\r\n                        ctx.strokeStyle = \"#FF0000\";\r\n                        ctx.lineWidth = 3;\r\n                        this.drawHexagon(ctx, screenX, screenY, false);\r\n                        ctx.strokeStyle = \"#666666\";\r\n                        ctx.lineWidth = 1;\r\n                    }\r\n                    if (iconAtHex !== undefined && ctx !== undefined) {\r\n                        for (var xR = 0; xR < this.props.boardWidth; ++xR) {\r\n                            for (var yR = 0; yR < this.props.boardHeight; ++yR) {\r\n                                if (this.distanceBetweenPositions(xR, yR, iconAtHex.startX, iconAtHex.startY) <= iconAtHex.speed) {\r\n                                    ctx.fillStyle = \"#9999FF\";\r\n                                    this.drawHexagon(\r\n                                        ctx,\r\n                                        xR * this.hexRectangleWidth + ((yR % 2) * this.hexRadius),\r\n                                        yR * (this.sideLength + this.hexHeight),\r\n                                        true//, `${x};${y}`\r\n                                    );\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    this.drawIconsOnBoard(ctx);\r\n                    hasmoved = true;\r\n                }\r\n            });\r\n\r\n            canvas.addEventListener(\"mousedown\", (mouseEvent) => {\r\n                hasmoved = false;\r\n                if (canvas !== null && canvas !== undefined) {\r\n                    const rect = canvas.getBoundingClientRect();\r\n                    const x = mouseEvent.clientX - rect.left;\r\n                    const y = mouseEvent.clientY - rect.top;\r\n                    mouseStartY = Math.floor(y / (this.hexHeight + this.sideLength));\r\n                    mouseStartX = Math.floor((x - (mouseStartY % 2) * this.hexRadius) / this.hexRectangleWidth);\r\n                    iconAtHex = this.findIconAtHex(mouseStartX, mouseStartY);\r\n                }\r\n            });\r\n            canvas.addEventListener(\"mouseup\", () => {\r\n                if (iconAtHex !== undefined && hasmoved === true) {\r\n                    let icons = this.state.currentIcons;\r\n                    for (var index in icons) {\r\n                        var ic = icons[index];\r\n                        if (ic.id === iconAtHex.id) {\r\n                            ic.startY = mouseEndX;\r\n                            ic.startX = mouseEndY;\r\n                            break;\r\n                        }\r\n                    }\r\n                    this.setState({ currentIcons: icons });\r\n                    this.initializeBoard();\r\n                }\r\n\r\n                iconAtHex = undefined;\r\n                hasmoved = false;\r\n            });\r\n            canvas.addEventListener(\"mouseleave\", () => {\r\n                iconAtHex = undefined;\r\n            });\r\n        }\r\n    }\r\n\r\n    distanceBetweenPositions(x1: number, y1: number, x2: number, y2: number) {\r\n        const dx = Math.abs(x1 - x2);\r\n        const dy = Math.abs(y1 - y2);\r\n        const z1 = 0 - x1 - y1;\r\n        const z2 = 0 - x2 - y2;\r\n        const dz = Math.abs(z1 - z2);\r\n\r\n        return dx + dy;\r\n    }\r\n\r\n    getIconPosition(icon: Icon) {\r\n        var x = this.hexRadius * 2 * (icon.startX + .25) + (icon.startY % 2 * this.hexRectangleWidth / 2);\r\n        var y = this.hexRectangleHeight * 0.75 * (icon.startY + 0) + this.hexRectangleHeight / 2;\r\n\r\n        return { x: x, y: y };\r\n    }\r\n    componentDidUpdate() {\r\n        if (this.props.initialIcons.length !== this.state.currentIcons.length)\r\n            this.setState({ currentIcons: this.props.initialIcons });\r\n        const canvas = this.mount;\r\n        if (canvas === null || canvas === undefined) {\r\n            return;\r\n        }\r\n        var ctx = canvas.getContext('2d');\r\n        if (ctx === null) return;\r\n        this.initializeBoard();\r\n    }\r\n\r\n    initializeBoard() {\r\n        this.setVariables();\r\n        const canvas = this.mount;\r\n        if (canvas === null || canvas === undefined) {\r\n            return;\r\n        }\r\n        var ctx = canvas.getContext('2d');\r\n        if (ctx === null) return;\r\n        ctx.clearRect(0, 0, this.props.boardWidth * 2 * this.sideLength, this.props.boardHeight * 2 * this.sideLength);\r\n\r\n\r\n        ctx.fillStyle = \"#000000\";\r\n        ctx.strokeStyle = \"#666666\";\r\n        ctx.lineWidth = 1;\r\n        this.drawBoard(ctx, this.props.boardWidth, this.props.boardHeight);\r\n        this.drawIconsOnBoard(ctx);\r\n        return ctx;\r\n    }\r\n    findIconAtHex(x: number, y: number): Icon | undefined {\r\n        for (var index in this.state.currentIcons) {\r\n            var icon = this.state.currentIcons[index];\r\n            var ix = icon.startX;\r\n            var iy = icon.startY;\r\n            if (x === ix && y === iy) return icon;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    setVariables() {\r\n        this.hexagonAngle = 0.523598776; // 30 degrees in radians\r\n        this.hexHeight = Math.sin(this.hexagonAngle) * this.sideLength;\r\n        this.hexRadius = Math.cos(this.hexagonAngle) * this.sideLength;\r\n        this.hexRectangleHeight = this.sideLength + 2 * this.hexHeight;\r\n        this.hexRectangleWidth = 2 * this.hexRadius;\r\n    }\r\n\r\n    drawIconsOnBoard(canvasContext: CanvasRenderingContext2D) {\r\n        for (var index in this.state.currentIcons) {\r\n            var icon = this.state.currentIcons[index];\r\n\r\n            const { x, y } = this.getIconPosition(icon);\r\n\r\n            if (this.state.currentIconsTurns === undefined) {\r\n            }\r\n            else if (icon.id === this.state.currentIconsTurns.id) {\r\n                canvasContext.fillStyle = 'red';\r\n                this.drawHexagon(canvasContext,\r\n                    icon.startX * this.hexRectangleWidth + ((icon.startY % 2) * this.hexRadius),\r\n                    icon.startY * (this.sideLength + this.hexHeight),\r\n                    true);\r\n            }\r\n\r\n            canvasContext.font = \"11px arial\";\r\n            canvasContext.fillStyle = \"black\";\r\n            canvasContext.fillText(`${icon.symbol}`, x, y);\r\n\r\n        }\r\n    }\r\n\r\n    convertXyToXYZ(x: number, y: number): string {\r\n        return \"\";\r\n    }\r\n\r\n    drawBoard(ctx: CanvasRenderingContext2D, width: number, height: number) {\r\n        for (var x = 0; x < width; ++x) {\r\n            for (var y = 0; y < height; ++y) {\r\n                this.drawHexagon(\r\n                    ctx,\r\n                    x * this.hexRectangleWidth + ((y % 2) * this.hexRadius),\r\n                    y * (this.sideLength + this.hexHeight),\r\n                    false, this.convertXyToXYZ(x, y)\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    drawHexagon(canvasContext: CanvasRenderingContext2D, x: number, y: number, fill: boolean, str: string = '') {\r\n        canvasContext.beginPath();\r\n        canvasContext.moveTo(x + this.hexRadius, y);\r\n        canvasContext.lineTo(x + this.hexRectangleWidth, y + this.hexHeight);\r\n        canvasContext.lineTo(x + this.hexRectangleWidth, y + this.hexHeight + this.sideLength);\r\n        canvasContext.lineTo(x + this.hexRadius, y + this.hexRectangleHeight);\r\n        canvasContext.lineTo(x, y + this.sideLength + this.hexHeight);\r\n        canvasContext.lineTo(x, y + this.hexHeight);\r\n        canvasContext.closePath();\r\n\r\n        if (str !== '') {\r\n            canvasContext.fillStyle = '#CCCCCC';\r\n            canvasContext.fillText(str, x + this.hexRadius / 2, y + this.hexRadius * 1.5);\r\n        }\r\n        if (fill) {\r\n            canvasContext.fill();\r\n        }\r\n        canvasContext.stroke();\r\n    }\r\n\r\n    render() {\r\n        return <table ><tbody>\r\n            <tr><td>\r\n                <div style={{ background: 'white', width: '650px', height: '600px', overflow: 'scroll' }}>\r\n                    <canvas height={this.props.boardHeight * this.sideLength * 1.5} width={this.props.boardWidth * this.sideLength * 1.8} onContextMenu={(e) => e.preventDefault()} ref={ref => (this.mount = ref)}></canvas>\r\n                </div></td>\r\n                <td>\r\n                    <Sequencer icons={this.props.initialIcons} onNext={(n) => { this.forceUpdate(); this.setState({ currentIconsTurns: n }); }} />\r\n                </td>\r\n            </tr></tbody></table>;\r\n    }\r\n}","import { CSSProperties } from '@material-ui/core/styles/withStyles';\r\nimport React, { useState } from 'react';\r\nimport Battlemap from '../components/gamemaster/Battlemat';\r\n\r\nconst inputCss: CSSProperties = {\r\n    width: '60px'\r\n};\r\n\r\nconst inputCssTiny: CSSProperties = {\r\n    width: '40px'\r\n};\r\n\r\ninterface Icon {\r\n    symbol: string;\r\n    startX: number;\r\n    startY: number;\r\n    id: string;\r\n    sequence: number;\r\n    speed: number;\r\n}\r\nconst alpha = 'qwertyuiopasdfghjklzxcvbnm';\r\nconst randId = () => {\r\n    let rand = '';\r\n    for (var counter = 0; counter < 10; counter++) {\r\n        rand += alpha[Math.floor(Math.random() * alpha.length)];\r\n    }\r\n    return rand;\r\n}\r\n\r\nconst Battleview: React.FC = () => {\r\n    const [width, setWidth] = useState(18);\r\n    const [height, setHeight] = useState(15);\r\n    const [currentAddingIcon, setCurrentAddingIcon] = useState('');\r\n    const [currentAddingIconSqs, setCurrentAddingIconSqs] = useState(0);\r\n    const [currentAddingIconSpeed, setCurrentAddingIconSpeed] = useState(0);\r\n    const [icons, setIcons] = useState<Icon[]>([]);\r\n\r\n\r\n\r\n    const addIcon = () => {\r\n        setIcons([...icons, { symbol: currentAddingIcon, startX: icons.length, startY: 0, sequence: currentAddingIconSqs, speed: currentAddingIconSpeed, id: randId() }]);\r\n        setCurrentAddingIcon('');\r\n        setCurrentAddingIconSpeed(0);\r\n        setCurrentAddingIconSqs(0);\r\n    };\r\n\r\n    return <>\r\n        <input type='text' title='width' style={inputCssTiny} value={width} onChange={(e) => setWidth(parseInt(e.target.value))} />\r\n        <input type='text' title='height' style={inputCssTiny} value={height} onChange={(e) => setHeight(parseInt(e.target.value))} /> |\r\n        <input type='text' title='sequence' style={inputCssTiny} value={currentAddingIconSqs} onChange={(e) => setCurrentAddingIconSqs(parseInt(e.target.value))} />\r\n        <input type='text' title='speed' style={inputCssTiny} value={currentAddingIconSpeed} onChange={(e) => setCurrentAddingIconSpeed(parseInt(e.target.value))} />\r\n        <input type='text' title='add icon' style={inputCss} value={currentAddingIcon} onChange={(e) => setCurrentAddingIcon(e.target.value)} />\r\n        <button onClick={() => addIcon()} >Add</button>\r\n\r\n        <br />\r\n        <Battlemap initialIcons={icons} boardHeight={height} boardWidth={width} />\r\n    </>;\r\n}\r\n\r\n\r\nexport default Battleview;"],"sourceRoot":""}