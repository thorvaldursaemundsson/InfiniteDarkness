{"version":3,"sources":["components/Lore/History.tsx","components/Lore/Merlions.tsx","components/Lore/Shambra.tsx","components/Threejs.tsx","components/Lore/StarSystem.tsx","components/Lore/SolSystem.tsx","components/Lore/CenturiSystem.tsx","components/Lore/Humans.tsx","components/Lore/FringeWorlds.tsx","components/Lore/Nekovian.tsx","components/Lore/FTLHyperDrive.tsx","components/Lore/Credits.tsx","components/Lore/Robotics.tsx","views/WorldAndLore.tsx","components/playermanual/Section.tsx","components/general/Ellipsis.tsx","components/Lore/CharacterRoller.tsx"],"names":["HistorySection","title","children","History","experienceAges","Array","map","v","index","arr","age","exp","Character","CharacterPointsMerlion","mult","ExperienceMultiplerMerlion","Merlions","Section","slice","ex","CharacterPointsShambras","ExperienceMultiplerShambras","Shambras","CharacterRoller","speedOfTimeMax","Threejs","props","mount","mouseMoving","rotationEuler","mouseStartCoordinates","zoomEuler","speedOfTime","THREE","x","y","star","undefined","imageURL","classification","planet","parentMesh","source","this","makeSphere","calculateStarSize","name","getColorFromStar","axialTilt","starContainer","starSphere","label","rotation","attach","starRot","mesh","body","satelite","periodFactor","distanceMod","push","planetoids","makePlanet","mass","parent","isSatelite","bodyType","makeBelt","makeRings","calculatePlanetSize","getColorFromPlanet","planetContainer","planetSphere","rotPlan","calculateOrbitalPeriod","orbitDistance","getOritalDistanceMod","satelites","sat","belt","Error","innerRadius","outerRadius","beltDisk","makeHolyDisk","beltPlan","ring","inner","outer","rings","rotator","base","starSystem","stars","makeStar","baseWidth","size","ctx","document","createElement","getContext","font","textWidth","measureText","width","borderSize","height","canvas","textBaseline","textAlign","fillStyle","fillRect","scaleFactor","Math","min","translate","scale","fillText","texture","labelMaterial","transparent","root","position","add","radius","img","negativeTilt","sphere","load","length","makeLabelCanvas","tilt","wrapS","wrapT","repeat","set","needsUpdate","bigDisk","material","side","e","offsetX","offsetY","button","preventDefault","scene","camera","renderer","setSize","appendChild","domElement","addEventListener","startMoveMouse","moveMouse","endMoveMouse","rotatorList","system","makeSystem","z","counter","animate","requestAnimationFrame","forEach","s","i","ar","distMod","par","sin","getPosX","cos","getPosY","dayPeriod","max","render","rot","onClick","onContextMenu","ref","React","Component","sourceMass","orbitalRadius","sqrt","distance","PI","dist","exponent","factor","unit","pow","Star","className","description","key","gen","Planet","HGen","Ellipsis","text","cutOff","surfaceGravity","temperatureRange","atmosphericPressure","floor4","atmosphere","hydrosphere","feature","n","floor","toPrecision","PlanetRings","StarSystem","roguePlanetoids","p","SolSystem","CentauriStarSystem","CentauriSystem","CharacterPointsHuman","ExperienceMultiplerHuman","Humans","Tonati","Ashra","FringeWorlds","CharacterPointsNekovian","ExperienceMultiplerNekovian","Nekovian","FTLHyperDrive","src","alt","Credits","Robotics","WorldAndLore","Shambra","tab","border","usePersistentState","isOpen","setIsOpen","tabSize","style","paddingLeft","cursorStyle","cursor","useState","substring","characterData","setCharacterData","rollCharacterData","cd","sumN","strength","agility","endurance","perception","willpower","intelligence","join","reduce","a","b","dice","setter","charData","roll","numbers","numberOfDice","random","sides","getStrengthHuman","getAgilityHuman","getEnduranceHuman","getPerceptionHuman","getIntelligenceHuman","getWillpowerHuman","CharacterRollerHuman","setAge","isEdit","onChange","str","parseInt","txt","explain","getStrengthShambra","getAgilityShambra","getEnduranceShambra","getPerceptionShambra","getIntelligenceShambra","getWillpowerShambra","CharacterRollerShambra","getStrengthMerlion","getAgilityMerlion","getEnduranceMerlion","getPerceptionMerlion","CharacterRollerMerlion","getStrengthNekovian","getAgilityNekovian","getEnduranceNekovian","getPerceptionNekovian","getIntelligenceNekovian","CharacterRollerNekovian"],"mappings":"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","file":"static/js/6.6a2a495c.chunk.js","sourcesContent":["import React from \"react\";\r\nconst History: React.FC = () => {\r\n    return <>\r\n\r\n        <p>\r\n            This section outlines the major events that shaped the world of Infinite Darkness\r\n    </p>\r\n        <HistorySection title='2039'>First permanent moon base, main purpose was to serve as a refueling station, this promised to open up most of the solar system</HistorySection>\r\n        <HistorySection title='2046'>First human sets foot on Mars with help of the moon base, after two years the small screw returns home. They leave behind them the first parts that will later become the Mars colony</HistorySection>\r\n        <HistorySection title='2052'>First human on Ceres, since they have to stay for four years a base is setup beforehand where a large crew can live</HistorySection>\r\n        <HistorySection title='2061'>The first fusion rocket is used in space, many space ships are now built in space</HistorySection>\r\n        <HistorySection title='2072'>Most of solar system colonized, the asteroid belt, rings of saturn, planets and moon are exploited for profit and advancement of humanity</HistorySection>\r\n        <HistorySection title='2091'>Alien spacecraft from outside the solar system arrive, the alien craft seems to be capable of traveling faster than light, something previously believed impossible.\r\n        A message is communicated from it, \"we have translated your language, you may refer to us as the Merlions and we come here seeking refuge\".\r\n    Eventually aproximately 20 000 Merlions settle on Mars in exchange that they will help the terraforming project.</HistorySection>\r\n        <HistorySection title='2121'>Humans reverse engineer the Merlion faster than light propulsion but it will be many years and discoveries before it can be put to use.</HistorySection>\r\n        <HistorySection title='2123'>Merlions explain their origins, a star 2160 light years away called Sakrak where they were fleeing a war.\r\n    It had taken them 10 years to reach Sol, choosing it because they believed humans could one day become their allies.</HistorySection>\r\n        <HistorySection title='2137'>Growing discontent on Mars leads to a referendum to declare Mars independent from Earth. The referendum passes and Sovereignty of Mars is formed.</HistorySection>\r\n        <HistorySection title='2139'>Inspired by Mars efforts Ceres, Ganymede, Callisto, Io and Europa declare independence too, the moons of Jupiter form a coalition called \"Free worlds of Jupiter\".\r\n    Ceres later becomes a protectorate of Mars.</HistorySection>\r\n        <HistorySection title='2151'>The first exotic hypermatter factory goes online, this marks the start where humans will be able to create fuel for hyperdrives.</HistorySection>\r\n        <HistorySection title='2162'>Humans build first space ship equipped with a hyperdrive, this will close the distance between the planets and make interstellar travel possible.</HistorySection>\r\n        <HistorySection title='2174'>Coalition of Sol is formed, a loose trade and regulatory organization whos headquarters are located on Mercury. This will later grow into a fully fledged government.</HistorySection>\r\n        <HistorySection title='2182'>Humans leave solar system in FTL vessel for the first time, a compliment of over a hundred set off for Proxima Centauri- the closest star.\r\n    It will take two years in FTL travel to reach  the system.</HistorySection>\r\n        <HistorySection title='2184'>Humans visit the Alpha Centauri system (a trinary system, Rigil Kentaurus, Toliman, Proxima Centauri), colonizable planets are found on all three stars, half the crew decide to stay behind on one of the planet, the other go home.</HistorySection>\r\n        <HistorySection title='2190'>Improvements in effiency and speed have been made to the hyperdrive, as such a space race begins to alpha centauri, it is not long before a thriving community is established on the closest star.</HistorySection>\r\n        <HistorySection title='2201'>The most habitable planet- dubbed Nefertiti (orbiting Toliman) hosts many colonies.</HistorySection>\r\n        <HistorySection title='2229'>By this time most of the planets and moons in the Alpha Centauri system have some form of permanent presence, the population finally reach one hundred thousand</HistorySection>\r\n        <HistorySection title='2240'>Deep in interstellar space Humans find a probe, it contains a message to come to a set of coordinates according to the galaxy, it's 180 light years from Sol.\r\n        It will take 12 years to reach, an automated ship is built programmed to represent humanity, 16 years later a ship arrives at Sol where again aliens send a message\r\n    \"Greetings Humans, we come in peace, we are Shambra, we are delighted to make contact, we seek to know you\"</HistorySection>\r\n        <HistorySection title='2246'>Humans are welcome in the Shambra home world, having travelled on the much faster Shambra ship</HistorySection>\r\n        <HistorySection title='2257'>Marks the date when half of humanity lives outside of the planet Earth.</HistorySection>\r\n        <HistorySection title='2261'>Centauri system declares independence from the Coalition of Sol, Centauri Imperium is formed, due to severe isolation between the two systems relations are becoming more strained over time.</HistorySection>\r\n        <HistorySection title='2284'>A deep space exploration craft arrives at Alpha Herculis, there they discover a small yet extremely advanced outpost, it sends communications in an alien langauge, after they decipher it they are able to communicate. From there it is revealed that the outpost belongs to Merlions.\r\n    The Merlions warn the humans to never return or they will be destroyed.</HistorySection>\r\n        <HistorySection title='2301'>Centauri Imperium shut down their borders from Sol, 90 million people live scattered in the Centauri system, the cold war starts</HistorySection>\r\n        <HistorySection title='2317'>A tomb world named Agros orbiting Spica is discovered, it seems to have once had a huge population, now all that remains is fossilised remains.</HistorySection>\r\n        <HistorySection title='2327'>Humanity now exist on self sufficient colonies on planets from 17 star systems</HistorySection>\r\n        <HistorySection title='2328'>Planet Agros is destroyed when the star undergoes supernova, in 260 years this will be visible on the planet Earth.</HistorySection>\r\n    </>\r\n}\r\ninterface IHistorySection {\r\n    title: String;\r\n}\r\nconst HistorySection: React.FC<IHistorySection> = ({ title, children }) => {\r\n    return <><h4>Year {title}</h4><p>{children}</p></>\r\n}\r\n\r\nexport default History;","import React from \"react\";\r\nimport { Character } from \"../Character\";\r\nimport Section from \"../playermanual/Section\";\r\n\r\nconst experienceAges = [...Array(90)]\r\n    .map((v: any, index: number, arr: any[]) => {\r\n        return { age: index, exp: Character.CharacterPointsMerlion(index), mult: Character.ExperienceMultiplerMerlion(index) };\r\n    });\r\n\r\nconst Merlions: React.FC = () => {\r\n    return <>\r\n        <h2>Merlions</h2>\r\n        <h3>The Merlion homeworld</h3>\r\n        <p>Very little is known about the merlion homeworld other than the fact that it was destroyed some time around Earth date 2060 in a cataclysmic event believed to been driven by some kind of religious war.</p>\r\n        <h3>Furs, tails and claws</h3>\r\n        <p>Merlions are bipedal aliens, generally between 130-160cm tall, weighing at 35-60kg, covered in brown or green furr with blue stripes across their back, they have big pointy ears and black eyes and a tail that reaches the ground.</p>\r\n        <p>Merlions have a special ability known as \"redolex\", where they fly into a serene rage that deepens their intellectual creativity, it allows them to connect ideas but blocks them from using it.</p>\r\n        <p>Though they do not typically wear clothes they do often wear powered exoskeleton with integrated tools or armor, often brandishing symbols on their exoskeleton which signifies their clan and rank, some apply vibrant dyes to their furr for the same reason.</p>\r\n        <p>Clans are made up of children, three parents and nine grandparents, when a child old enough to become a parent the grandparents are released from their clan and duties.</p>\r\n        <p>Merlions do not have male or female genders or sexes, instead they have three genders: linon, caion, vekon, to reproduce each contributes and all three can become pregnant. Depending on which gender the merlion is born from it will have slightly different morphology.</p>\r\n        <p>Linons tend to be bigger, protective and highly logical, merlions born from linons often have short tempers and use short bursts of redolex to help them think</p>\r\n        <p>Caions have longer, sharper claws and fangs, they have exceptional spacial awareness and senses, merlions born from caions often have purple stripes instead of blue ones.</p>\r\n        <p>Vekons are slightly smaller, have good social awareness and empathy, merlions born from vekons are natural leaders.</p>\r\n        <h3>Playing a Merlion</h3>\r\n        <p>Merlions are a playable species but not recommended for new players, their stats are slightly affected by their age</p>\r\n        <p>Merlions gain trait \"redolex\" which increases all mental skills by +1 during combat</p>\r\n        <p>Merlions gain trait \"manaless\" which locks them out of spells, they gain +2 to all resistence against spells</p>\r\n        <p>Merlions may choose between small and medium size</p>\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th> </th> <th>Age 18-24</th> <th>Age 25-40</th> <th>Age 41-80</th> <th>Age 81+</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td> STR</td> <td> 1d6</td> <td> 1d6</td> <td> 1d8</td>  <td> 1d8</td>\r\n                </tr>\r\n                <tr>\r\n                    <td> AGI</td>  <td> 1d10</td> <td> 1d10</td> <td> 1d8</td>  <td> 1d8</td>\r\n                </tr>\r\n                <tr>\r\n                    <td> END</td>  <td> 1d8</td> <td> 1d8</td> <td> 1d6</td>  <td> 1d6</td>\r\n                </tr>\r\n                <tr>\r\n                    <td> PER</td>  <td> 1d10</td> <td> 1d10</td> <td> 1d8</td>  <td> 1d8</td>\r\n                </tr>\r\n                <tr>\r\n                    <td> INT</td>  <td> 4d4</td> <td> 4d4</td> <td> 4d4</td>  <td> 4d4</td>\r\n                </tr>\r\n                <tr>\r\n                    <td> WILL</td>  <td> 1d10</td> <td> 1d10</td> <td> 1d10</td>  <td> 1d10</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n        <Section title='Merlion experience per age is as following'>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Age</th> <th>Starting experience</th> <th>Experience Multiplier</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {experienceAges.slice(16, 81).map(ex => <tr><td>{ex.age}</td> <td>{ex.exp}</td> <td>{ex.mult}</td> </tr>)}\r\n                </tbody>\r\n            </table>\r\n        </Section>\r\n    </>\r\n}\r\n\r\nexport default Merlions;","import React from 'react';\r\nimport { Character } from '../Character';\r\nimport { CharacterRollerShambra } from './CharacterRoller';\r\nimport Section from '../playermanual/Section';\r\n\r\nconst experienceAges = [...Array(90)]\r\n    .map((v: any, index: number, arr: any[]) => {\r\n        return { age: index, exp: Character.CharacterPointsShambras(index), mult: Character.ExperienceMultiplerShambras(index) };\r\n    });\r\n\r\nconst Shambras: React.FC = () => {\r\n    return <>\r\n        <h2>Shambras</h2>\r\n        <h3>Shambra homeworld</h3>\r\n        <p>The shambra homeworld is an inhospitable place for humans, the atmosphere containing lethal levels of chlorine gas at sea level. This is because billions of years ago when there were only single celled organisms deep in the ocean some evolved to use chlorine as an attack mechanism, over time the chlorine built up in the atmosphere. As a result every life form on the planet has evolved to resist chlorine.</p>\r\n        <p>To protect themselves the flora had to evolve to produce PVC plastic, some fauna evolved to have polytetrafluoroethylene (teflon) embedded in their furr or armor. Additionally shambras exhale small amounts of chlorine as a result of their immune system using chlorine to attack infections.</p>\r\n        <h3>Biology and optics</h3>\r\n        <p>Shambras are coverd in a nail like armor embedded with teflon that starts out rainbow refractory color and gets darker and matter over time, it hardens and eventually has to be shed, revealing underneath a new shiny colorful flexible armor</p>\r\n        <p>Shambras have 4 eyes and 6 limbs, their legs tend to grow in proportion over time, they have two large upper arms equipped with pincers and two smaller lower arms equipped with a hand-like double pincer. The upper arms have strength and stability, the lower arms have fine motor control</p>\r\n        <p>The Shambras' 4 eyes are located in a square pattern, the lower pair can see in blue and low ultra violet, the upper in green, red and high infra-red, as such the shambras can see 5 base colors, their infra-red allows them to see life forms even in absolute pitch black darkness</p>\r\n        <p>As Shambras grow older they grow in size</p>\r\n        <p>Shambras have no maximum age and grow bigger and smarter as they grow older</p>\r\n        <p>They are hatched from eggs that are about 20cm tall, when they are young they shed every 6-9 months, as they reach adolescence it slows down to once per year, when they are adult it's once every few years. Old shambras only shed around every 10th year</p>\r\n        <p>The oldest shambras are several hundred years old and stand 4 meters tall, they can only move around using both their legs and upper arms due to their sheer mass</p>\r\n        <h3>Playing as a shambra</h3>\r\n        <p>Shambras are a playable species, their stats depend greatly on their age</p>\r\n        <p>Shambras take certain penalties as they grow older and bigger, players that are close to a previous or next age limit may choose to take adjecent effects instead</p>\r\n        <ul>\r\n            <li>Age 26-35: -2 climb and swim -3 jump, size: small or medium</li>\r\n            <li>Age 36-50: -4 climb and swim -6 jump, size: small, medium or large</li>\r\n            <li>Age 51-70: -6 climb and swim -9 jump, size: medium or large</li>\r\n            <li>Age 71-100: -8 climb and swim -12 jump, size: medium, large or huge</li>\r\n            <li>Age 101+: -10 climb and swim -15 jump, size: large or huge</li>\r\n        </ul>\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th> </th> <th>Age 15-20</th> <th>Age 21-25</th> <th>Age 26-35</th> <th>Age 36-50</th> <th>Age 51-70</th> <th>Age 71-100</th> <th>Age 101+</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td> STR</td> <td> 1d6</td> <td> 1d6</td> <td> 1d8</td>  <td> 1d8</td>  <td> 1d10</td> <td> 1d10</td> <td> 1d12</td>\r\n                </tr>\r\n                <tr>\r\n                    <td> AGI</td> <td> 1d10</td>  <td> 1d10</td> <td> 1d8</td> <td> 1d8</td> <td> 1d6</td>  <td> 1d6</td> <td> 1d4</td>\r\n                </tr>\r\n                <tr>\r\n                    <td> END</td> <td> 1d6</td>  <td> 1d6</td>  <td> 1d8</td> <td> 1d8</td> <td> 1d10</td> <td> 1d10</td> <td> 1d10</td>\r\n                </tr>\r\n                <tr>\r\n                    <td> PER</td> <td> 1d12</td> <td> 1d12</td>  <td> 1d12</td> <td> 1d12</td> <td> 1d10</td> <td> 1d10</td> <td> 1d10</td>\r\n                </tr>\r\n                <tr>\r\n                    <td> INT</td> <td> 1d4</td>  <td> 1d6</td> <td> 1d6</td>  <td> 1d8</td>  <td> 1d8</td> <td> 1d8</td>  <td> 1d10</td>\r\n                </tr>\r\n                <tr>\r\n                    <td> WILL</td>  <td> 1d6</td>  <td> 1d8</td>  <td> 1d10</td>  <td> 1d10</td> <td> 1d10</td> <td> 1d10</td>  <td> 1d10</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n        <CharacterRollerShambra />\r\n\r\n        <Section title='Shambra experience per age is as following'>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Age</th> <th>Starting experience</th> <th>Experience Multiplier</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {experienceAges.slice(16, 81).map(ex => <tr><td>{ex.age}</td> <td>{ex.exp}</td> <td>{ex.mult}</td> </tr>)}\r\n                </tbody>\r\n            </table>\r\n        </Section>\r\n    </>\r\n};\r\n\r\nexport default Shambras;","import React from 'react';\r\nimport * as THREE from \"three\";\r\nimport { IStarSystem, IStar, IPlanetoid, IHeavelyBody, Distance } from './Lore/IStarSystem';\r\n\r\ninterface IThreejsProps {\r\n    starSystem: IStarSystem\r\n}\r\n\r\ninterface Coordinates {\r\n    x: number;\r\n    y: number;\r\n}\r\nconst speedOfTimeMax = 15;\r\nclass Threejs extends React.Component<IThreejsProps, {}> {\r\n    mount: any;\r\n    mouseMoving: 'none' | 'left' | 'right';\r\n    rotationEuler: THREE.Euler;\r\n    mouseStartCoordinates: Coordinates;\r\n    zoomEuler: THREE.Euler;\r\n\r\n    speedOfTime: number = speedOfTimeMax;\r\n\r\n    constructor(props: IThreejsProps) {\r\n        super(props);\r\n        this.mouseMoving = 'none';\r\n        this.rotationEuler = new THREE.Euler(0, 0, 0);\r\n        this.mouseStartCoordinates = { x: 0, y: 0 };\r\n        this.zoomEuler = new THREE.Euler(0, 0, 0);\r\n    }\r\n\r\n    getColorFromStar(star: IStar): string {\r\n        if (star.imageURL !== undefined && star.imageURL !== '') return star.imageURL;\r\n        switch (star.classification) {\r\n            case 'A': return 'texture_star_class_a.jpg';\r\n            case 'F': return 'texture_star_class_f.jpg';\r\n            case 'G': return 'texture_star_class_g.jpg';\r\n            case 'K': return 'texture_star_class_k.jpg';\r\n            case 'M': return 'texture_star_class_m.jpg';\r\n            default: return 'white.jpg';\r\n        }\r\n    }\r\n\r\n    getColorFromPlanet(planet: IPlanetoid): string {\r\n        if (planet.imageURL !== undefined) return planet.imageURL;\r\n        return 'white.jpg'\r\n    }\r\n\r\n\r\n\r\n    makeStar(star: IStar, parentMesh: THREE.Mesh<THREE.SphereGeometry, THREE.MeshBasicMaterial>, source: IRotator[]) {\r\n        var [starContainer, starSphere, label] = this.makeSphere(this.calculateStarSize(star), star.name, this.getColorFromStar(star), star.axialTilt);\r\n        starSphere.rotation.x = star.axialTilt;\r\n        parentMesh.attach(starContainer);\r\n        let starRot: IRotator = { mesh: starSphere, body: star, star: true, satelite: false, periodFactor: 0, label: label, distanceMod: 0 };\r\n        source.push(starRot);\r\n        star.planetoids.map(planet => this.makePlanet(planet, starRot, parentMesh, source));\r\n        return starRot;\r\n    }\r\n\r\n    calculateStarSize(star: IStar) {\r\n        return 0.6 + star.mass / 20;\r\n    }\r\n\r\n    calculatePlanetSize(planet: IPlanetoid) {\r\n        return 0.1 + planet.mass / 60;\r\n    }\r\n\r\n    makePlanet(planet: IPlanetoid, parent: IRotator, parentMesh: THREE.Mesh<THREE.SphereGeometry, THREE.MeshBasicMaterial>, source: IRotator[], isSatelite: boolean = false) {\r\n        if (planet.bodyType === 'belt') return this.makeBelt(planet, parent, parentMesh, source);\r\n        if (planet.bodyType === 'ring') return this.makeRings(planet, parent);\r\n        var [planetContainer, planetSphere, label] = this.makeSphere(this.calculatePlanetSize(planet), planet.name, this.getColorFromPlanet(planet), planet.axialTilt);\r\n        parentMesh.attach(planetContainer);\r\n        let rotPlan: IRotator = {\r\n            mesh: planetSphere,\r\n            body: planet, star: false, satelite: isSatelite, parent: parent, periodFactor: calculateOrbitalPeriod(parent.body.mass, planet.orbitDistance),\r\n            label: label, distanceMod: getOritalDistanceMod(planet.orbitDistance)\r\n        };\r\n        planetSphere.rotation.x = planet.axialTilt;\r\n        source.push(rotPlan);\r\n        planet.satelites.map(sat => this.makePlanet(sat, rotPlan, parentMesh, source, true));\r\n        return rotPlan;\r\n    }\r\n\r\n    makeBelt(belt: IPlanetoid, parent: IRotator, parentMesh: THREE.Mesh<THREE.SphereGeometry, THREE.MeshBasicMaterial>, source: IRotator[]) {\r\n        if (belt.bodyType !== 'belt') throw new Error('whoops');\r\n        let innerRadius = getOritalDistanceMod(belt.orbitDistance) - 0.5;\r\n        let outerRadius = innerRadius * 1.25 + 1;\r\n        var beltDisk = this.makeHolyDisk(innerRadius, outerRadius, 'texture_planet_belt.png', 0);\r\n        let beltPlan: IRotator = {\r\n            mesh: beltDisk, body: belt, star: false,\r\n            satelite: false, parent: parent, periodFactor: calculateOrbitalPeriod(parent.body.mass, belt.orbitDistance),\r\n            label: undefined, distanceMod: 0\r\n        };\r\n        source.push(beltPlan);\r\n        parentMesh.attach(beltDisk);\r\n        return beltPlan;\r\n    }\r\n\r\n    makeRings(ring: IPlanetoid, parent: IRotator) {\r\n        if (ring.bodyType !== 'ring') throw new Error('whoops');\r\n        const inner = 0.2 + parent.body.mass / 120;\r\n        const outer = inner + 0.2;\r\n        let rings = this.makeHolyDisk(inner, outer, 'texture_planet_rings.png', parent.body.axialTilt);\r\n        rings.rotation.x = 90;\r\n        rings.rotation.y = parent.body.axialTilt;\r\n        parent.mesh.attach(rings);\r\n    }\r\n\r\n    makeSystem(rotator: IRotator[]) {\r\n        let base: THREE.Mesh<THREE.SphereGeometry, THREE.MeshBasicMaterial> = new THREE.Mesh();\r\n        this.props.starSystem.stars.map((star) => this.makeStar(star, base, rotator));\r\n        return base;\r\n    }\r\n\r\n\r\n    makeLabelCanvas(x: number, baseWidth: number, size: number, name: string) {\r\n        const borderSize = 1;\r\n        const ctx = document.createElement('canvas').getContext('2d');\r\n        if (ctx === null) throw new Error('something went terribly wrong sorry');\r\n        const font = `${size}px bold sans-serif`;\r\n        ctx.font = font;\r\n        // measure how long the name will be\r\n        const textWidth = ctx.measureText(name).width;\r\n\r\n        const doubleBorderSize = borderSize * 2;\r\n        const width = baseWidth + doubleBorderSize;\r\n        const height = size + doubleBorderSize;\r\n        ctx.canvas.width = width;\r\n        ctx.canvas.height = height;\r\n\r\n        // need to set font again after resizing canvas\r\n        ctx.font = font;\r\n        ctx.textBaseline = 'middle';\r\n        ctx.textAlign = 'center';\r\n\r\n        ctx.fillStyle = 'blue';\r\n        ctx.fillRect(0, 0, width, height);\r\n\r\n        // scale to fit but don't stretch\r\n        const scaleFactor = Math.min(1, baseWidth / textWidth);\r\n        ctx.translate(width / 2, height / 2);\r\n        ctx.scale(scaleFactor, 1);\r\n        ctx.fillStyle = 'white';\r\n        ctx.fillText(name, 0, 0);\r\n        const canvas = ctx.canvas;\r\n        const texture = new THREE.CanvasTexture(canvas);\r\n\r\n        const labelMaterial = new THREE.SpriteMaterial({\r\n            map: texture,\r\n            transparent: true,\r\n        });\r\n\r\n        const label = new THREE.Sprite(labelMaterial);\r\n\r\n        const root = new THREE.Object3D();\r\n        root.position.x = x;\r\n        root.add(label);\r\n        label.position.y = 1;\r\n        //label.position.z = .4 * 1.01;\r\n\r\n        // if units are meters then 0.01 here makes size\r\n        // of the label into centimeters.\r\n        const labelBaseScale = 0.01;\r\n        label.scale.x = canvas.width * labelBaseScale;\r\n        label.scale.y = canvas.height * labelBaseScale;\r\n        return label;\r\n    }\r\n\r\n    makeSphere(radius: number, label: string, img: string, negativeTilt: number): [THREE.Mesh<THREE.SphereGeometry, THREE.MeshBasicMaterial>, THREE.Mesh<THREE.SphereGeometry, THREE.MeshBasicMaterial>, THREE.Sprite | undefined] {\r\n        const parent: THREE.Mesh<THREE.SphereGeometry, THREE.MeshBasicMaterial> = new THREE.Mesh();\r\n        const sphere = new THREE.Mesh(new THREE.SphereGeometry(radius, 32, 32),\r\n            new THREE.MeshBasicMaterial({ map: new THREE.TextureLoader().load(img) }));\r\n        sphere.rotation.y = 90;\r\n        let canvas: THREE.Sprite | undefined = undefined;;\r\n        if (label.length > 0) {\r\n            canvas = this.makeLabelCanvas(0, 40, 12, label);\r\n            parent.attach(canvas);\r\n        }\r\n        parent.attach(sphere);\r\n        return [parent, sphere, canvas];\r\n    }\r\n\r\n    makeHolyDisk(innerRadius: number, outerRadius: number, img: string, tilt: number) {\r\n        const map = new THREE.TextureLoader().load(img);\r\n        map.wrapS = THREE.RepeatWrapping;\r\n        map.wrapT = THREE.RepeatWrapping;\r\n        map.repeat.set(4, 4);\r\n        map.needsUpdate = true;\r\n\r\n        const bigDisk = new THREE.Mesh(new THREE.RingGeometry(innerRadius, outerRadius, 32, 32),\r\n            new THREE.MeshBasicMaterial({ map: map }));\r\n\r\n        bigDisk.material.side = THREE.DoubleSide;\r\n        bigDisk.rotation.x = tilt * -0.5;\r\n        return bigDisk;\r\n    }\r\n\r\n    moveMouse(e: MouseEvent) {\r\n        if (this.mouseMoving === 'none') return;\r\n        if (this.mouseMoving === 'left') {\r\n\r\n            this.rotationEuler.y = (this.mouseStartCoordinates.x - e.offsetX);\r\n            this.rotationEuler.x = (this.mouseStartCoordinates.y - e.offsetY);\r\n            return;\r\n        }\r\n        if (this.mouseMoving === 'right') {\r\n            this.zoomEuler.y = (this.mouseStartCoordinates.x - e.offsetX);\r\n            this.zoomEuler.x = (this.mouseStartCoordinates.y - e.offsetY);\r\n        }\r\n    }\r\n\r\n    startMoveMouse(e: MouseEvent) {\r\n        if (e.button === 0) {\r\n            this.mouseMoving = 'left';\r\n            this.mouseStartCoordinates.x = e.offsetX + this.rotationEuler.y;\r\n            this.mouseStartCoordinates.y = e.offsetY + this.rotationEuler.x;\r\n        }\r\n        else if (e.button === 2) {\r\n            this.mouseMoving = 'right';\r\n            this.mouseStartCoordinates.x = e.offsetX + this.zoomEuler.y;\r\n            this.mouseStartCoordinates.y = e.offsetY + this.zoomEuler.x;\r\n        }\r\n        e.preventDefault();\r\n        return false;\r\n    }\r\n\r\n    endMoveMouse() {\r\n        this.mouseMoving = 'none';\r\n    }\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        var scene = new THREE.Scene();\r\n        var camera = new THREE.PerspectiveCamera(60, 1, 0.1, 1000);\r\n        var renderer = new THREE.WebGLRenderer();\r\n        renderer.setSize(760, 760);\r\n        this.mount.appendChild(renderer.domElement);\r\n        renderer.domElement.addEventListener('mousedown', (e) => this.startMoveMouse(e));\r\n        renderer.domElement.addEventListener('mousemove', (e) => this.moveMouse(e));\r\n        renderer.domElement.addEventListener('mouseup', () => this.endMoveMouse());\r\n\r\n        var rotatorList: IRotator[] = [];\r\n        var system = this.makeSystem(rotatorList);\r\n\r\n        scene.add(system);\r\n        camera.position.z = 5;\r\n        let counter = 0;\r\n        var animate = () => {\r\n            requestAnimationFrame(animate);\r\n            counter += this.speedOfTime;\r\n            if (counter > 3600000) counter = 0;\r\n            rotatorList.forEach((s, i, ar) => {\r\n                if (s.body.bodyType === 'belt') {\r\n                    s.mesh.rotation.z -= ((25 + this.speedOfTime) / s.body.dayPeriod);\r\n                    return;\r\n                }\r\n                else if (s.star === false) {\r\n                    let planet: IPlanetoid = s.body as IPlanetoid;\r\n                    let distMod = s.distanceMod; //this.getOritalDistanceMod(planet.orbitDistance);\r\n                    if (s.satelite && s.parent !== undefined) {\r\n                        let par: IPlanetoid = s.parent.body as IPlanetoid;\r\n                        distMod += this.calculatePlanetSize(planet) + this.calculatePlanetSize(par);\r\n                    }\r\n                    s.mesh.position.x = Math.sin(counter * s.periodFactor) * distMod + this.getPosX(s);\r\n                    s.mesh.position.y = Math.cos(counter * s.periodFactor) * distMod + this.getPosY(s);\r\n                    if (s.label !== undefined) {\r\n                        s.label.position.x = s.mesh.position.x;\r\n                        s.label.position.y = s.mesh.position.y + 0.5 + s.body.mass / 240;\r\n                    }\r\n                }\r\n                s.mesh.rotation.y += ((25 + this.speedOfTime) / s.body.dayPeriod);\r\n            })\r\n            if (this.mouseMoving === 'left') {\r\n                system.position.x = (-this.rotationEuler.y / 100) * Math.max((1 + -system.position.z / 10), 0.1);\r\n                system.position.y = this.rotationEuler.x / 100 * Math.max((1 + -system.position.z / 10), 0.1);\r\n            }\r\n            else if (this.mouseMoving === 'right') {\r\n                system.position.z = (this.zoomEuler.x + this.zoomEuler.y) / 40;\r\n            }\r\n            renderer.render(scene, camera);\r\n        };\r\n        animate();\r\n    }\r\n\r\n    getPosX(rot: IRotator) {\r\n        if (rot.parent !== undefined) return rot.parent.mesh.position.x;\r\n        else return 0;\r\n    } getPosY(rot: IRotator) {\r\n        if (rot.parent !== undefined) return rot.parent.mesh.position.y;\r\n        else return 0;\r\n    }\r\n\r\n    render() {\r\n        return <div><button onClick={() => this.speedOfTime = (this.speedOfTime === speedOfTimeMax ? 0 : speedOfTimeMax)}>{'||>'}</button><div onContextMenu={(e) => e.preventDefault()} ref={ref => (this.mount = ref)} /></div>\r\n    }\r\n}\r\n\r\nexport default Threejs;\r\n\r\ninterface IRotator {\r\n    mesh: THREE.Mesh<THREE.SphereGeometry, THREE.MeshBasicMaterial> | THREE.Mesh<THREE.RingGeometry, THREE.MeshBasicMaterial>;\r\n    body: IHeavelyBody;\r\n    label: THREE.Sprite | undefined;\r\n    star: boolean;\r\n    satelite: boolean;\r\n    parent?: IRotator;\r\n    periodFactor: number;\r\n    distanceMod: number;\r\n}\r\n\r\nconst calculateOrbitalPeriod = (sourceMass: number, orbitalRadius: Distance) => {\r\n    const G = 0.000000000066743;\r\n    return (Math.sqrt(sourceMass * getOritalDistanceMod(orbitalRadius, 1, 1) * G) / (orbitalRadius.distance * 2 * Math.PI)) * 30;\r\n}\r\n\r\nconst getOritalDistanceMod = (dist: Distance, exponent = .5, factor = 3) => {\r\n    switch (dist.unit) {\r\n        case 'AU': return Math.pow(dist.distance, exponent) * factor;\r\n        case 'km': return Math.pow(dist.distance / 149597871, exponent) * factor;\r\n        case 'LY': return Math.pow(dist.distance * 63239, exponent) * factor;\r\n    }\r\n}","import React from 'react';\r\nimport Ellipsis from '../general/Ellipsis';\r\nimport { IStarSystem, IStar, IPlanetoid, Distance, HeavenlyBodyType } from './IStarSystem'\r\nimport Section from '../playermanual/Section';\r\nimport Threejs from '../Threejs';\r\n\r\nconst StarSystem: React.FC<IStarSystem> = ({ stars, roguePlanetoids, name, description }) =>\r\n    <>\r\n        <h3>{name}</h3>\r\n        <i>{description}</i>\r\n        <Section title={`View ${name}`}>\r\n            <Threejs starSystem={{ stars, roguePlanetoids, name, description }}  ></Threejs>\r\n        </Section>\r\n        {stars.map(star => <Star key={'star_' + star.name} star={star} />)}\r\n        {roguePlanetoids.length > 0 ? roguePlanetoids.map(p => <Planet planet={p} gen={0} />) : null}\r\n\r\n    </>;\r\n\r\ninterface IStarProps {\r\n    star: IStar;\r\n}\r\nconst Star: React.FC<IStarProps> = ({ star }) => <>\r\n    <h4>{star.name} - {star.classification} class Star</h4>\r\n    <div className=\"divcol2\">\r\n        <div>{star.description}</div>\r\n        <div>\r\n            <b>Mass: </b>{star.mass} solar masses<br />\r\n            <b>age: </b>{star.age} billion years old\r\n    </div>\r\n    </div>\r\n    {/*star.threed !== undefined ? <StellarRenderer key={`${star.name}${star.classification}`} {...star.threed} /> : null*/}\r\n    {star.planetoids.map(planet => <Planet key={'plan_' + planet.name} planet={planet} gen={0} />)}\r\n</>;\r\nconst descriptionCuttOff = 400;\r\n\r\ninterface IPlanetProps {\r\n    planet: IPlanetoid;\r\n    gen: number;\r\n}\r\nconst Planet: React.FC<IPlanetProps> = ({ planet, gen }): JSX.Element => <> {HGen(gen, `${planet.name} - ${planet.classification}`)}\r\n    <div className=\"divcol2\">\r\n        <div><Ellipsis key={`${planet.name}${planet.classification}`} text={planet.description} cutOff={descriptionCuttOff} /></div>\r\n        <div>\r\n            <b>Surface gravity</b>: {planet.surfaceGravity}g<br />\r\n            <b>Average temperature range</b>: {planet.temperatureRange[0]} - {planet.temperatureRange[2]}c<br />\r\n            <b>Atmosphere</b>: {planet.atmosphericPressure > 0 ? `${floor4(planet.atmosphericPressure / 101.325)}x ea` : null} {planet.atmosphere}<br />\r\n            <b>Hydrosphere</b>: {planet.hydrosphere}<br />\r\n            <b>Distance</b>: {planet.orbitDistance.distance} {planet.orbitDistance.unit}<br />\r\n            <b>Age</b>: {planet.age} billion years<br />\r\n            <b>Mass</b>: {planet.mass} earths<br />\r\n            {planet.feature && <><b>Feature</b>: {planet.feature}</>}\r\n        </div>\r\n    </div>\r\n    {/*planet.threed !== undefined ? <StellarRenderer key={`d3${planet.name}${planet.classification}`} {...planet.threed} /> : null*/}\r\n    {planet.satelites.length > 0 ? <><b>Satelites</b> <br /> {planet.satelites.map(sat => <Planet key={'sat_' + sat.name} planet={sat} gen={gen + 1} />)}</> : null}\r\n</>;\r\n\r\nconst HGen = (gen: number, children: string) => {\r\n    switch (gen) {\r\n        case 0: return <h4>{children}</h4>;\r\n        case 1: return <h5>{children}</h5>;\r\n        default: return <h6>{children}</h6>;\r\n    }\r\n}\r\n\r\nconst floor4 = (n: number) => (Math.floor(n * 10) / 10).toPrecision(2);\r\n\r\nexport class PlanetRings implements IPlanetoid {\r\n    classification = 'rings';\r\n    surfaceGravity = 0;\r\n    atmosphere = '';\r\n    atmosphericPressure = 0;\r\n    hydrosphere = '';\r\n    satelites = [];\r\n    temperatureRange: [number, number, number];\r\n    orbitDistance: Distance;\r\n    dayPeriod = 0;\r\n    axialTilt = 0;\r\n    age: number;\r\n    mass: number;\r\n    bodyType: HeavenlyBodyType = 'ring';\r\n    name = '';\r\n    description = '';\r\n    constructor(orbitDistance: Distance, temperatureRange: [number, number, number], age: number, mass: number) {\r\n        this.orbitDistance = orbitDistance;\r\n        this.temperatureRange = temperatureRange;\r\n        this.age = age;\r\n        this.mass = mass;\r\n    }\r\n}\r\n\r\nexport default StarSystem;","import React from 'react';\r\nimport StarSystem, { PlanetRings } from './StarSystem';\r\n\r\nconst SolSystem = () => <StarSystem key='solsystem'\r\n    stars={[\r\n        {\r\n            name: 'Sun',\r\n            mass: 1,\r\n            age: 4.6,\r\n            description: \"Obviously nobody lives on the sun...yet, this however is the place of many Hypermatter factories, in close orbit these massive structures siphon energy from the super hot corona and produce Hypermatter, this is transported to Venus where it can be sold at astronomical cost.\",\r\n            classification: 'G',\r\n            axialTilt: 0,\r\n            dayPeriod: 3600 * 6,\r\n            imageURL: 'texture_star_sun.jpg',\r\n            bodyType: 'star',\r\n            planetoids: [{\r\n                name: 'Mercury',\r\n                classification: 'rocky',\r\n                description: 'Mercury is the seat of The Coalition of Sol, the governing body of the system of the sun. Situated here because of proximity to the rest of the system. Additionally there are sprawling industry covering most of the planet, much of it automated. Humans mostly live in underground installations and in deep ever-dark craters to protect them from the intense solar radiation',\r\n                age: 4.5,\r\n                mass: 0.055,\r\n                atmosphere: 'none',\r\n                atmosphericPressure: 0,\r\n                hydrosphere: 'none',\r\n                feature: 'tidally locked, settlements, over 9000 inhabitants',\r\n                surfaceGravity: 0.38,\r\n                orbitDistance: { distance: 0.37, unit: 'AU' },\r\n                satelites: [],\r\n                temperatureRange: [-173, 400, 427],\r\n                axialTilt: 0,\r\n                dayPeriod: 3600 * 24 * 80,\r\n                imageURL: 'texture_planet_mercury.jpg',\r\n                bodyType: 'planetoid',\r\n            },\r\n            {\r\n                name: 'Venus',\r\n                classification: 'rocky',\r\n                description: 'Though no living thing exists on this hellscape of a planet there is a low orbital station here whos main purpose is to serve as a refueling base for both fusion and FTL based vessels.',\r\n                age: 4.54,\r\n                mass: 0.815,\r\n                atmosphere: '96.5% CO2, 3.5% nitrogen, trace sulfur dioxide',\r\n                atmosphericPressure: 9200,\r\n                hydrosphere: 'none',\r\n                feature: 'runaway greenhouse effect',\r\n                surfaceGravity: 0.904,\r\n                orbitDistance: { distance: 0.723, unit: 'AU' },\r\n                satelites: [],\r\n                temperatureRange: [440, 446, 470],\r\n                axialTilt: 181,\r\n                dayPeriod: 3600 * 24 * 60,\r\n                imageURL: 'texture_planet_venus.jpg',\r\n                bodyType: 'planetoid',\r\n            },\r\n            {\r\n                name: 'Earth',\r\n                description: 'Almost half of humanity lives here, aproximately 5 billion people, this number used to be much higher but due to mass emigration and lack of Earthly resources billions of people have since left. Earth is still one of the most interesting places, where the super-nations are in constant competition over influence over the rest of the system. Most people here live normal lives as they always had.',\r\n                classification: 'Rocky',\r\n                age: 4.5,\r\n                mass: 1,\r\n                atmosphere: '78% nitrogen, 20.9% oxygen, 0.9% argon, 0.08% CO2',\r\n                atmosphericPressure: 101.35,\r\n                hydrosphere: 'salt water',\r\n                feature: 'birthplace of humanity, 6.2 billion people',\r\n                surfaceGravity: 1,\r\n                orbitDistance: { distance: 1, unit: 'AU' },\r\n                imageURL: 'texture_planet_earth.jpg',\r\n                axialTilt: 21,\r\n                dayPeriod: 3600 * 24,\r\n                bodyType: 'planetoid',\r\n                satelites: [{\r\n                    name: 'Moon',\r\n                    description: 'The surface bases on the moon originally started out as refueling for space travel. Shortly after mining industry began to take root, over time it grew and as it did so did the population. The population gave rise to a lunatic economy which rapidly became the center of space commerce. Many historians consider the moon to be the initial launchpad of humanitys ascent into the stars.',\r\n                    classification: 'rocky',\r\n                    age: 4.53,\r\n                    mass: 0.012,\r\n                    atmosphere: '',\r\n                    atmosphericPressure: 0,\r\n                    hydrosphere: '',\r\n                    feature: 'settlements, 17 million people',\r\n                    surfaceGravity: 0.16,\r\n                    orbitDistance: { distance: 384400, unit: 'km' },\r\n                    satelites: [],\r\n                    temperatureRange: [-173, 0, 116],\r\n                    imageURL: 'texture_planet_moon.jpg',\r\n                    axialTilt: -11,\r\n                    dayPeriod: 3600 * 24 * 30,\r\n                    bodyType: 'planetoid',\r\n                }],\r\n                temperatureRange: [-86, 35, 59],\r\n\r\n            },\r\n            {\r\n                name: 'Mars',\r\n                description: 'Once a desolate wasteland this green jewel is ruled by the Democratic Republic of Mars, humans and merlions make up roughly equal parts of the population',\r\n                classification: 'Rocky',\r\n                age: 4.54,\r\n                mass: 0.107,\r\n                atmosphere: '21% co2, 35% nitrogen, 44% oxygen',\r\n                atmosphericPressure: 21,\r\n                hydrosphere: 'small number of salty lakes',\r\n                feature: 'settlements, 310 million people',\r\n                surfaceGravity: 0.38,\r\n                orbitDistance: { distance: 1.52, unit: 'AU' },\r\n                satelites: [],\r\n                temperatureRange: [-103, 0, 40],\r\n                axialTilt: 10,\r\n                dayPeriod: 3600 * 25,\r\n                imageURL: 'texture_planet_mars.jpg',\r\n                bodyType: 'planetoid',\r\n            },\r\n            {\r\n                name: 'The Belt',\r\n                classification: 'Asteroids',\r\n                description: 'The Belt and Ceres are populated mostly by automated robots and a few humans and merlions who operate them, this is the biggest industrial complex spanning the system, most high-end mineral refinement both legal and underground happens here',\r\n                age: 5,\r\n                mass: 0.1,\r\n                atmosphere: '',\r\n                atmosphericPressure: 0,\r\n                hydrosphere: '',\r\n                feature: undefined,\r\n                surfaceGravity: 0,\r\n                orbitDistance: { distance: 2.7, unit: 'AU' },\r\n                satelites: [],\r\n                temperatureRange: [-175, 0, 90],\r\n                axialTilt: 0,\r\n                dayPeriod: 3600 * 24,\r\n                bodyType: 'belt',\r\n            },\r\n            {\r\n                name: 'Ceres',\r\n                classification: 'rocky',\r\n                description: 'The Belt and Ceres are populated mostly by automated robots and a few humans and merlions who operate them, this is the biggest industrial complex spanning the system, most high-end mineral refinement both legal and underground happens here',\r\n                age: 0,\r\n                mass: 0,\r\n                atmosphere: '',\r\n                atmosphericPressure: 0,\r\n                hydrosphere: '',\r\n                feature: undefined,\r\n                surfaceGravity: 0,\r\n                orbitDistance: { distance: 2.7, unit: 'AU' },\r\n                satelites: [],\r\n                temperatureRange: [-175, 0, 90],\r\n                axialTilt: -60,\r\n                dayPeriod: 3600 * 80,\r\n                imageURL: 'texture_planet_ceres.jpg',\r\n                bodyType: 'planetoid',\r\n            },\r\n            {\r\n                name: 'Jupiter',\r\n                classification: 'Gas giant',\r\n                description: 'In addition to some low orbit stations around Jupiter the moons Ganymede, Callisto, Io and Europa have various ground-based stations, these are sparesely populated and mostly not self sufficient',\r\n                age: 5,\r\n                mass: 317,\r\n                atmosphere: '90% hydrogen, 10% helium',\r\n                atmosphericPressure: 10000,\r\n                hydrosphere: '',\r\n                feature: undefined,\r\n                surfaceGravity: 10,\r\n                orbitDistance: { distance: 5.2, unit: 'AU' },\r\n                satelites: [\r\n                    {\r\n                        name: 'io',\r\n                        classification: 'planetoid',\r\n                        description: 'active core because of gravitational forces',\r\n                        age: 4.5,\r\n                        mass: 0.015,\r\n                        atmosphere: '',\r\n                        atmosphericPressure: 0,\r\n                        hydrosphere: '',\r\n                        surfaceGravity: 0.183,\r\n                        orbitDistance: { distance: 421700, unit: 'km' },\r\n                        satelites: [],\r\n                        bodyType: 'planetoid',\r\n                        axialTilt: 0,\r\n                        dayPeriod: 3600 * 24 * 1.77,\r\n                        temperatureRange: [-183, -163, -143]\r\n                    },\r\n                    {\r\n                        name: 'Europa',\r\n                        classification: 'planetoid',\r\n                        description: 'rocky icy planet',\r\n                        age: 4.5,\r\n                        mass: 0.008,\r\n                        atmosphere: 'oxygen',\r\n                        atmosphericPressure: 1,\r\n                        hydrosphere: 'icy water',\r\n                        surfaceGravity: 0.134,\r\n                        orbitDistance: { distance: 670900, unit: 'km' },\r\n                        satelites: [],\r\n                        bodyType: 'planetoid',\r\n                        axialTilt: 0,\r\n                        dayPeriod: 3600 * 24 * 3.5,\r\n                        temperatureRange: [-223, -171, -148]\r\n                    },\r\n                    {\r\n                        name: 'Ganymede',\r\n                        classification: 'planetoid',\r\n                        description: 'covered in ice that hides a vast ocean',\r\n                        age: 4.5,\r\n                        mass: 0.025,\r\n                        atmosphere: '',\r\n                        atmosphericPressure: 0,\r\n                        hydrosphere: 'salt water',\r\n                        surfaceGravity: 0.146,\r\n                        orbitDistance: { distance: 1070400, unit: 'km' },\r\n                        satelites: [],\r\n                        bodyType: 'planetoid',\r\n                        axialTilt: 0,\r\n                        dayPeriod: 3600 * 24 * 7.15,\r\n                        temperatureRange: [-203, -163, -120]\r\n                    },\r\n                    {\r\n                        name: 'Callisto',\r\n                        classification: 'planetoid',\r\n                        description: 'giant ball of ice and rock',\r\n                        age: 4.5,\r\n                        mass: 0.018,\r\n                        atmosphere: 'carbon dioxide',\r\n                        atmosphericPressure: 0.1,\r\n                        hydrosphere: '',\r\n                        surfaceGravity: 0.126,\r\n                        orbitDistance: { distance: 1882700, unit: 'km' },\r\n                        satelites: [],\r\n                        bodyType: 'planetoid',\r\n                        axialTilt: 0,\r\n                        dayPeriod: 3600 * 24 * 16.7,\r\n                        temperatureRange: [-193, -139, -108]\r\n                    }\r\n                ],\r\n                temperatureRange: [-100, 0, 30],\r\n                axialTilt: 0,\r\n                dayPeriod: 3600 * 11,\r\n                imageURL: 'texture_planet_jupiter.jpg',\r\n                bodyType: 'planetoid',\r\n            },\r\n            {\r\n                name: 'Saturn',\r\n                classification: 'Gas giant',\r\n                description: 'Saturn is not very populated but besides Titan, mostly ice is gathere from the rings of Saturn and sold to the inhabitats outside of Earth',\r\n                age: 0,\r\n                mass: 0,\r\n                atmosphere: '',\r\n                atmosphericPressure: 0,\r\n                hydrosphere: '',\r\n                surfaceGravity: 0,\r\n                orbitDistance: { distance: 9.6, unit: 'AU' },\r\n                satelites: [\r\n                    new PlanetRings({ distance: 600, unit: 'km' }, [-140, -90, 20], 3.6, 0.01)\r\n                ],\r\n                temperatureRange: [-140, 0, 20],\r\n                axialTilt: 0,\r\n                dayPeriod: 3600 * 16,\r\n                imageURL: 'texture_planet_saturn.jpg',\r\n                bodyType: 'planetoid',\r\n            },\r\n            {\r\n                name: 'Uranus',\r\n                classification: 'Gas giant',\r\n                description: 'One station orbiting Uranus exists, its very small and not populated. People tend to avoid this place due to the smell',\r\n                age: 0,\r\n                mass: 0,\r\n                atmosphere: '',\r\n                atmosphericPressure: 0,\r\n                hydrosphere: '',\r\n                surfaceGravity: 0,\r\n                orbitDistance: { distance: 20, unit: 'AU' },\r\n                satelites: [\r\n                    new PlanetRings({ distance: 600, unit: 'km' }, [-140, -90, 20], 3.6, 0.01)\r\n                ],\r\n                temperatureRange: [-190, -50, -10],\r\n                axialTilt: -60,\r\n                dayPeriod: 3600 * 21,\r\n                imageURL: 'texture_planet_uranus.jpg',\r\n                bodyType: 'planetoid',\r\n            },\r\n            {\r\n                name: 'Neptune',\r\n                classification: 'Gas giant',\r\n                description: 'The final real planet of the solar system, a science station orbits here',\r\n                age: 0,\r\n                mass: 0,\r\n                atmosphere: '',\r\n                atmosphericPressure: 0,\r\n                hydrosphere: '',\r\n                feature: undefined,\r\n                surfaceGravity: 0,\r\n                orbitDistance: { distance: 30.1, unit: 'AU' },\r\n                satelites: [],\r\n                temperatureRange: [-210, -100, -20],\r\n                axialTilt: 9,\r\n                dayPeriod: 3600 * 20,\r\n                imageURL: 'texture_planet_neptune.jpg',\r\n                bodyType: 'planetoid',\r\n            },\r\n            {\r\n                name: 'Oort Cloud',\r\n                classification: 'asteroids/comets',\r\n                description: 'A huge cloud spanning a light year from the sun, though almost completely empty- space after Neptune still have some features, only pirates and monsters roam here. But mostly nothing.',\r\n                age: 0,\r\n                mass: 0,\r\n                atmosphere: '',\r\n                atmosphericPressure: 0,\r\n                hydrosphere: '',\r\n                feature: undefined,\r\n                surfaceGravity: 0,\r\n                orbitDistance: { distance: 2000, unit: 'AU' },\r\n                satelites: [],\r\n                temperatureRange: [-260, -260, -260],\r\n                axialTilt: 0,\r\n                dayPeriod: 3600 * 24 * 10000,\r\n                bodyType: 'belt',\r\n            }]\r\n        }\r\n    ]}\r\n    roguePlanetoids={[]}\r\n    name='The Sol System'\r\n    description='The Sol System is a richly inhabited system where most of humanity lives, almost half on the birthplace of Humanity- Earth. Almost every planet and moon has some permanent human presence, and Mars has a huge Merlion population'\r\n/>\r\n\r\n\r\nexport default SolSystem;","import React from 'react';\r\nimport StarSystem from './StarSystem';\r\n\r\nconst CentauriSystem: React.FC = () => <CentauriStarSystem />\r\n\r\nconst CentauriStarSystem = () => <StarSystem\r\n    stars={[{\r\n        name: 'Rigil Kentaurus',\r\n        mass: 1.1,\r\n        age: 6.1,\r\n        description: \"Rigil is the biggest star and has 2 inner planets, it's theorized that if Rigil ever had more planets they would've been slingshotted out of the system from gravitational interaction with Hadar\",\r\n        classification: 'G',\r\n        axialTilt: 0, \r\n        dayPeriod: 3600*6,\r\n        bodyType: 'star',\r\n        planetoids: [{\r\n            name: 'Sheol',\r\n            classification: 'Rocky',\r\n            description: 'This small planet orbits Rigil at an extremely low and fast orbit, the planet is mostly covered in molten rock with islands of floating minerals, due to the extreme radiation and heat there is no industry, habitation or outposts',\r\n            mass: 0.07,\r\n            age: 5.5,\r\n            atmosphere: 'none',\r\n            atmosphericPressure: 0,\r\n            surfaceGravity: 0.2,\r\n            temperatureRange: [700,900,1000],\r\n            hydrosphere: 'none',\r\n            orbitDistance: { distance: 0.02, unit: 'AU'},\r\n            feature: 'surface lava rivers, extreme radiation',\r\n            satelites: [],\r\n            axialTilt: 8, \r\n            dayPeriod: 3600*24*1000,\r\n            bodyType: 'planetoid',\r\n        },\r\n        {\r\n            name: 'Diluvia',\r\n            classification: 'Rocky',\r\n            description: 'Diluvia is the capitol of the Centauri System, population at nearing 10 million and rapidly increasing, Diluvia was the first colony, chosen for its ideal terrestrial features. 60% of the surface of Diluvia is one massive continent spanning the entire planet, the remaining 40% is made up of 29 small seas and hundreds of thousands of lakes, though the seas are salty most have such low salination that the water is drinkable. A complex network of underground rivers connect the seas and allow sea-fauna free reign, many rivers run close to the mantle where minerals from the very active core reach the surface, making the sea water rich.',\r\n            mass: 0.89,\r\n            age: 5.4,\r\n            atmosphere: 'nitrogen 69%, oxygen 29%, argon 2%, trace neon',\r\n            atmosphericPressure: 105,\r\n            surfaceGravity: 0.9,\r\n            temperatureRange: [-30,20,50],\r\n            hydrosphere: 'sea water',\r\n            orbitDistance: { distance: 1.09, unit: 'AU'},\r\n            feature: '10 million people',\r\n            satelites: [],\r\n            axialTilt: 25, \r\n            dayPeriod: 3600*24,\r\n            bodyType: 'planetoid',\r\n        }]\r\n    },\r\n    {\r\n        name: 'Hadar',\r\n        mass: 0.9,\r\n        age: 6.1,\r\n        description: \"Hadar is the middle star, slightly smaller than the sun, has 2 inner planets\",\r\n        classification: 'K',\r\n        axialTilt: 0, \r\n        dayPeriod: 3600*11,\r\n        bodyType: 'star',\r\n        planetoids: [{\r\n            name: 'Epona',\r\n            classification: 'Rocky',\r\n            description: 'Epona is a rocky planet, no atmosphere and tidally locked to Toliman, one side is an eternal blazing inferno and the other is a fridgig wasteland. However due to the total lack of atmosphere the dark side is covered by snow and ice.',\r\n            mass: 0.4,\r\n            age: 5.6,\r\n            atmosphere: 'none',\r\n            atmosphericPressure: 0,\r\n            surfaceGravity: 0.7,\r\n            temperatureRange: [-200,100,450],\r\n            hydrosphere: 'none',\r\n            orbitDistance: { distance: 0.12, unit: 'AU'},\r\n            satelites: [],\r\n            axialTilt: -7, \r\n            dayPeriod: 3600*24*600,\r\n            bodyType: 'planetoid',\r\n        },\r\n        {\r\n            name: 'Rhiannon',\r\n            classification: 'rocky',\r\n            description: 'Rhiannon is a wet terrestrial rockly world with primordial life, vast oceans filled with purple cyanobacteria color the oceans blue at night, the reflection gives the atmosphere a slight purple tint, however it is mostly bright red. Rhiannon is habitable at a cool temperature span of -40 to 10 celsius, the atmosphere has sparse oxygen but otherwise no toxins. Surface gravity 0.9',\r\n            mass: 1.2,\r\n            age: 5.5,\r\n            atmosphere: 'nitrogen 77%, oxygen 21%, argon 1.2%, rest carbondioxide',\r\n            atmosphericPressure: 131,\r\n            surfaceGravity: 1.1,\r\n            temperatureRange: [-30,10,40],\r\n            hydrosphere: 'salt water',\r\n            orbitDistance: { distance: 0.95, unit: 'AU'},\r\n            satelites: [],\r\n            axialTilt: 19, \r\n            dayPeriod: 3600*21,\r\n            bodyType: 'planetoid',\r\n        }]\r\n    },\r\n    {\r\n        name: 'Proxima Centauri',\r\n        mass: 0.12,\r\n        age: 4.8,\r\n        description: \"Proxima is the smallest star orbitting both Rigil Kentaurus and Toliman in a huge orbit at 0.4 lightyears out. FTL travel is needed to travel between but is also much faster. The majority of Centauri planets orbit Proxima but population is sparse.\",\r\n        classification: 'G',\r\n        axialTilt: 0, \r\n        dayPeriod: 3600*2,\r\n        bodyType: 'star',\r\n        planetoids: [{\r\n            name: 'Hayagriva',\r\n            classification: 'rocky',\r\n            description: 'Hayagriva and Laksmi are a twin planetoid pair orbiting close to Proxima, they are tidally locked to each other.',\r\n            mass: 0.2,\r\n            age: 5.5,\r\n            atmosphere: 'none',\r\n            atmosphericPressure: 0,\r\n            surfaceGravity: 0.17,\r\n            temperatureRange: [-100,100,200],\r\n            hydrosphere: 'none',\r\n            orbitDistance: { distance: 0.008, unit: 'AU'},\r\n            axialTilt: -45, \r\n            dayPeriod: 3600*24*18,\r\n            bodyType: 'planetoid',\r\n            satelites: [{\r\n                name: 'Lakshmi',\r\n                classification: 'rocky',\r\n                description: 'Hayagriva and Laksmi are a twin planetoid pair orbiting close to Proxima, they are tidally locked to each other.',\r\n                mass: 0.17,\r\n                age: 5.5,\r\n                atmosphere: 'none',\r\n                atmosphericPressure: 0,\r\n                surfaceGravity: 0.15,\r\n                temperatureRange: [-100,100,200],\r\n                hydrosphere: 'none',\r\n                orbitDistance: { distance: 4000, unit: 'km'},\r\n                satelites: [],\r\n                axialTilt: 45, \r\n                dayPeriod: 3600*24*18,\r\n                bodyType: 'planetoid',\r\n            }]\r\n        },\r\n        {\r\n            name: 'Sventovid',\r\n            classification: 'rocky',\r\n            description: 'Sventovid is a partially habitable world, though it is tidally locked to Proxima it is within the habitable zone and is host to life, the day side has a temperature range of 40 - 90, the dark side has a range of -90 - -20. Near the twillight belt is where the climate is most hospitable.',\r\n            mass: 1.6,\r\n            age: 4.4,\r\n            atmosphere: '60% nitrogen, 29% oxygen, 7% argon, 3% neon, 1% carbondioxide',\r\n            atmosphericPressure: 181,\r\n            surfaceGravity: 1.3,\r\n            temperatureRange: [-90,20,90],\r\n            hydrosphere: 'salt water',\r\n            orbitDistance: { distance: 0.03, unit: 'AU'},\r\n            feature: 'tidally locked, settlements',\r\n            satelites: [],\r\n            axialTilt: 11, \r\n            dayPeriod: 3600*24*90,\r\n            bodyType: 'planetoid',\r\n        },\r\n        {\r\n            name: 'Drega',\r\n            classification: 'rocky icy',\r\n            description: 'Drega is a huge icy planet, the extremely thick atmosphere makes landing impossible',\r\n            mass: 17,\r\n            age: 4.4,\r\n            atmosphere: '50% hydrogen, 21% helium, 12% helium,',\r\n            atmosphericPressure: 85200,\r\n            surfaceGravity: 1.3,\r\n            temperatureRange: [-210,-120,-100],\r\n            hydrosphere: 'amonia, ethane, methane',\r\n            orbitDistance: { distance: 0.03, unit: 'AU'},\r\n            feature: 'tidally locked, settlements',\r\n            satelites: [],\r\n            axialTilt: 31, \r\n            dayPeriod: 3600*21,\r\n            bodyType: 'planetoid',\r\n        }]\r\n    },\r\n    ]}\r\n    roguePlanetoids={[]}\r\n    name='The Centauri System'\r\n    description='The Centauri system is a trinary star system, the three stars Rigil Kenturus, Toliman and Proxima Centauri. Rigil and Toliman are in relatively close orbit, at their closest they are only 11 astronomical units apart, Proxima orbits at a distance of 13k AU (0.2 light years). The Centauri Imperium controls most of the system, though Proxima is mostly independent'\r\n/>\r\n\r\n\r\nexport default CentauriSystem;","import React from \"react\";\r\nimport { Character } from \"../Character\";\r\nimport Section from \"../playermanual/Section\";\r\n\r\nconst experienceAges = [...Array(90)]\r\n    .map((v: any, index: number, arr: any[]) => {\r\n        return { age: index, exp: Character.CharacterPointsHuman(index), mult: Character.ExperienceMultiplerHuman(index) };\r\n    });\r\n\r\n\r\nconst Humans: React.FC = () => {\r\n    return <>\r\n        <h2>Humans</h2>\r\n        <h3>The human homeworld</h3>\r\n        <p>It's Earth</p>\r\n        <h3>Human biology</h3>\r\n        <p>It's often believed that humans are the default, the standard of all the species. That is a very human centric belief system.</p>\r\n        <p>Humans are however very diverse and have a rich history, they live on many planets and make up 95% of the people in the Sol system and 99% of the people in the Centauri system.</p>\r\n        <h3>Playing a human character</h3>\r\n        <p>Humans are the obvious choice for new players but also a good option for experienced players too. These are their stats</p>\r\n        <p>Humans may choose between small, medium and large size</p>\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th> </th> <th>Age 18-26</th> <th>Age 27-40</th> <th>Age 41-80</th> <th>Age 81+</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td> STR</td> <td>1d8</td>  <td>1d10</td>  <td>1d10</td>  <td>1d8</td>\r\n                </tr>\r\n                <tr>\r\n                    <td> AGI</td>  <td>1d10</td>  <td>1d10</td>  <td>1d8</td>  <td>1d6</td>\r\n                </tr>\r\n                <tr>\r\n                    <td> END</td>  <td>1d12</td>  <td>1d12</td>  <td>1d10</td>  <td>1d8</td>\r\n                </tr>\r\n                <tr>\r\n                    <td> PER</td>  <td>1d12</td>  <td>1d10</td>  <td>1d8</td>  <td>1d6</td>\r\n                </tr>\r\n                <tr>\r\n                    <td> INT</td>  <td>1d10</td>  <td>1d10</td>  <td>1d10</td>  <td>1d8</td>\r\n                </tr>\r\n                <tr>\r\n                    <td> WILL</td>  <td>1d6</td>  <td>1d8</td>  <td>1d10</td>  <td>1d8</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n\r\n        <Section title='Human experience per age is as following'>\r\n\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Age</th> <th>Starting experience</th> <th>Experience Multiplier</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {experienceAges.slice(16, 81).map(ex => <tr><td>{ex.age}</td> <td>{ex.exp}</td> <td>{ex.mult}</td> </tr>)}\r\n                </tbody>\r\n            </table>\r\n        </Section>\r\n    </>\r\n}\r\n\r\nexport default Humans;","import React from 'react';\r\nimport StarSystem, { PlanetRings } from './StarSystem';\r\nimport Section from '../playermanual/Section';\r\n\r\nconst FringeWorlds = () => <>\r\n    <h2>Fringe worlds</h2>\r\n    <p>These systems are colonized by humans and are completely self sufficient, but they are also highly isolated and most people who live there have live harsh lives</p>\r\n    <Section title='Ashra'><Ashra /> </Section>\r\n    <Section title='Tonati'><Tonati /> </Section>\r\n</>;\r\n\r\nconst Tonati = () => <StarSystem\r\n    name='Star System Tonati'\r\n    description='One of many fringe worlds, Tonati considerably advanced with two habitable planets'\r\n    roguePlanetoids={[]}\r\n    stars={[{\r\n        name: 'Tonati',\r\n        description: 'Intense radiation makes the innermost part of the system mostly inaccessible. With a staggering luminosity of 15 times that of the Sun also means that the zone of habitabilty is much larger and farther out.',\r\n        classification: 'A',\r\n        mass: 2.7,\r\n        age: 4.1,\r\n        axialTilt: 0,\r\n        dayPeriod: 3600 * 24,\r\n        imageURL: 'texture_star_tonati.png',\r\n        bodyType: 'star',\r\n        planetoids: [{\r\n            name: 'Chantico',\r\n            description: 'Chantico rotates extremely quickly, a day lasting only 160 minutes. This planet is a smoldering radioactive hellscape under the Tonati sun, rivers of magma flow across the surface that is never able to cool down',\r\n            mass: 0.09,\r\n            age: 3.8,\r\n            classification: 'rocky metallic',\r\n            satelites: [],\r\n            atmosphere: \"none\",\r\n            atmosphericPressure: 0,\r\n            hydrosphere: \"none\",\r\n            surfaceGravity: 0.5,\r\n            temperatureRange: [1000, 1200, 1300],\r\n            orbitDistance: { distance: 0.2, unit: 'AU' },\r\n            feature: 'extreme radiation',\r\n            imageURL: 'texture_planet_molten.jpg',\r\n            axialTilt: 6,\r\n            dayPeriod: 3600 * 24 * 10,\r\n            bodyType: 'planetoid',\r\n        },\r\n        {\r\n            name: 'Teylaloc',\r\n            description: 'Large rocky planet with a powerful magnetic field to protect it from the intense solar radiation. Constant thunderstorms and rains of molten lead and graphite makes this planets surface inaccessible.',\r\n            mass: 1.8,\r\n            age: 3.9,\r\n            classification: 'rocky',\r\n            satelites: [],\r\n            atmosphere: \"thick carbon dioxide\",\r\n            atmosphericPressure: 1700,\r\n            hydrosphere: \"none\",\r\n            surfaceGravity: 1.5,\r\n            temperatureRange: [320, 340, 360],\r\n            orbitDistance: { distance: 0.7, unit: 'AU' },\r\n            feature: 'constant planetwide thunderstorms',\r\n            imageURL: 'texture_planet_pinkteal.jpg',\r\n            axialTilt: 9,\r\n            dayPeriod: 3600 * 11,\r\n            bodyType: 'planetoid',\r\n        },\r\n        {\r\n            name: 'Atlahua',\r\n            description: 'Small rocky planet with a thin atmosphere of carbondioxide and radiogenic neon (formed by the radiation hitting the magnesium rich surface). Additionally two rings orbit this planet, the inner ring is mostly made of iron and the outer made of silicates. Indicating that they were formed from a failed planet.',\r\n            mass: 0.7,\r\n            age: 3.8,\r\n            classification: 'rocky',\r\n            satelites: [\r\n                new PlanetRings({ distance: 600, unit: 'km' }, [-90, 180, 250], 3.6, 0.01)\r\n            ],\r\n            atmosphere: \"80% carbon dioxide, 19% neon, 1% argon\",\r\n            atmosphericPressure: 20,\r\n            hydrosphere: \"none\",\r\n            surfaceGravity: 1.5,\r\n            temperatureRange: [190, 250, 370],\r\n            orbitDistance: { distance: 1.5, unit: 'AU' },\r\n            imageURL: 'texture_planet_rocky.jpg',\r\n            axialTilt: 1,\r\n            dayPeriod: 3600 * 18,\r\n            bodyType: 'planetoid',\r\n        },\r\n        {\r\n            name: 'Ehecatl',\r\n            description: 'Orange moss like flora covers the surface of this world, though the planet has no oceans or large bodies of surface water underground streams can be found. The atmosphere is composed of nitrogen and enough oxygen to breathe, however trace amounts of sulfides in the lower atmosphere makes long term exposure risky.  A small number of settlements exist on this planet, most of them depend on resources from space.',\r\n            mass: 0.5,\r\n            age: 3.7,\r\n            classification: 'rocky',\r\n            satelites: [],\r\n            atmosphere: \"60% nitrogen 38% oxygen, 1% argon, 1% ozone, trace sulfides\",\r\n            atmosphericPressure: 90,\r\n            hydrosphere: \"salt water\",\r\n            surfaceGravity: 0.65,\r\n            temperatureRange: [20, 0, 70],\r\n            orbitDistance: { distance: 3.5, unit: 'AU' },\r\n            feature: 'settlements',\r\n            imageURL: 'texture_planet_orangegreen.jpg',\r\n            axialTilt: -21,\r\n            dayPeriod: 3600 * 27,\r\n            bodyType: 'planetoid',\r\n        },\r\n        {\r\n            name: 'Meztil',\r\n            description: 'WIP',\r\n            mass: 0.9,\r\n            age: 3.7,\r\n            classification: 'rocky',\r\n            satelites: [],\r\n            atmosphere: \"70% nitrogen 29% oxygen, 1% argon\",\r\n            atmosphericPressure: 81,\r\n            hydrosphere: \"salt water\",\r\n            surfaceGravity: 0.9,\r\n            temperatureRange: [-30, 0, 40],\r\n            orbitDistance: { distance: 4.2, unit: 'AU' },\r\n            feature: 'settlements',\r\n            imageURL: 'texture_planet_lush.jpg',\r\n            axialTilt: 17,\r\n            dayPeriod: 3600 * 28,\r\n            bodyType: 'planetoid',\r\n        },\r\n        {\r\n            name: 'Toci',\r\n            description: 'WIP',\r\n            mass: 65,\r\n            age: 3.9,\r\n            classification: 'gas giant',\r\n            atmosphericPressure: 125320,\r\n            satelites: [],\r\n            atmosphere: \"hydrogen helium\",\r\n            hydrosphere: \"liquid hydrogen\",\r\n            surfaceGravity: 4,\r\n            temperatureRange: [-130, 0, 80],\r\n            orbitDistance: { distance: 30, unit: 'AU' },\r\n            imageURL: 'texture_planet_lime.jpg',\r\n            axialTilt: 65,\r\n            dayPeriod: 3600 * 4,\r\n            bodyType: 'planetoid',\r\n        },\r\n        {\r\n            name: 'Xolotl',\r\n            description: 'WIP',\r\n            mass: 1.2,\r\n            age: 6.1,\r\n            classification: 'rocky',\r\n            satelites: [],\r\n            atmosphere: \"hydrogen\",\r\n            atmosphericPressure: 4,\r\n            hydrosphere: \"liquid methane\",\r\n            surfaceGravity: 4,\r\n            temperatureRange: [-190, -180, -170],\r\n            orbitDistance: { distance: 79, unit: 'AU' },\r\n            imageURL: 'texture_planet_cold.jpg',\r\n            axialTilt: -90,\r\n            dayPeriod: 3600 * 240,\r\n            bodyType: 'planetoid',\r\n        }\r\n        ]\r\n\r\n    }]}\r\n/>\r\n\r\nconst Ashra = () => <StarSystem\r\n    name='Star System Ashra'\r\n    description='One of many fringe worlds, settled because of the easy access to the water'\r\n    stars={[{\r\n        name: 'Ashra',\r\n        description: 'Ashra is a yellow white main sequence star',\r\n        mass: 0.9,\r\n        age: 4,\r\n        classification: 'K',\r\n        axialTilt: -90,\r\n        dayPeriod: 3600 * 2,\r\n        imageURL: 'texture_star_ashra.png',\r\n        bodyType: 'star',\r\n        planetoids: [{\r\n            name: 'Feshra',\r\n            description: \"Innermost planet of Ashra, small planet composed mostly of magnetic iron., it's believed that a stellar event has stripped this planet of its outer mantel leaving only the iron core. The extremely strong magnetic field protects the surface from radiation and allows a dense atmosphere of argon and carbondioxide to persist.\",\r\n            mass: 0.1,\r\n            age: 3.6,\r\n            satelites: [],\r\n            classification: \"ironball world\",\r\n            atmosphere: \"90% carbondioxide, 10% argon\",\r\n            atmosphericPressure: 173,\r\n            hydrosphere: \"none\",\r\n            surfaceGravity: 0.5,\r\n            temperatureRange: [400, 450, 500],\r\n            orbitDistance: { distance: 0.1, unit: 'AU' },\r\n            imageURL: 'texture_planet_feshra.png',\r\n            axialTilt: -9,\r\n            dayPeriod: 3600 * 600,\r\n            bodyType: 'planetoid',\r\n\r\n        },\r\n        {\r\n            name: 'Noshra',\r\n            description: 'Large brownish green planet',\r\n            mass: 2.9,\r\n            age: 3.6,\r\n            satelites: [\r\n                new PlanetRings({ distance: 600, unit: 'km' }, [90, 180, 190], 3.6, 0.01),\r\n            ],\r\n            classification: 'rocky',\r\n            atmosphere: 'carbondioxide, clouds of sulfides',\r\n            atmosphericPressure: 1862,\r\n            hydrosphere: 'none',\r\n            surfaceGravity: 2.1,\r\n            temperatureRange: [90, 120, 180],\r\n            orbitDistance: { distance: 0.4, unit: 'AU' },\r\n\r\n            imageURL: 'texture_planet_noshra.png',\r\n            axialTilt: 1,\r\n            dayPeriod: 3600 * 18,\r\n            bodyType: 'planetoid',\r\n        },\r\n        {\r\n            name: 'Neke',\r\n            description: 'A water world rich in oceanic life, a small number of islands have all been settled by humans, as well as many seasteads that catch sea fauna. '\r\n                + 'Massive space elevators were constructed to facilitate the extraction of water from the planet into space. Neke is also the homeworld of Nekovians, a flying amphibian bipedal race of spaient hunters.',\r\n            mass: 0.7,\r\n            age: 3.6,\r\n            satelites: [],\r\n            classification: 'rocky',\r\n            atmosphere: 'nitrogen 71% oxygen 29%',\r\n            atmosphericPressure: 95,\r\n            hydrosphere: 'salt water',\r\n            surfaceGravity: 0.9,\r\n            temperatureRange: [-20, 10, 60],\r\n            orbitDistance: { distance: 0.8, unit: 'AU' },\r\n            feature: '142 thousand inhabitants',\r\n            imageURL: 'texture_planet_neke.png',\r\n            axialTilt: 15,\r\n            dayPeriod: 3600 * 20,\r\n            bodyType: 'planetoid',\r\n        },\r\n        {\r\n            name: 'Consini belt',\r\n            description: 'The Consini belt is an asteroid belt between Neke and the Sylvis Edis pair.',\r\n            mass: 0.3,\r\n            age: 4,\r\n            satelites: [],\r\n            classification: 'asteroid belt',\r\n            atmosphere: '',\r\n            atmosphericPressure: 0,\r\n            hydrosphere: '',\r\n            surfaceGravity: 0,\r\n            temperatureRange: [-180, -120, 79],\r\n            orbitDistance: { distance: 1.9, unit: 'AU' },\r\n            axialTilt: 0,\r\n            dayPeriod: 3600 * 24,\r\n            bodyType: 'belt',\r\n        },\r\n        {\r\n            name: 'Sylvis',\r\n            description: 'Sylvis & Edis are binary gas giants orbiting',\r\n            mass: 81,\r\n            age: 3.6,\r\n            bodyType: 'planetoid',\r\n            satelites: [{\r\n                name: 'Edis',\r\n                description: 'Edis is believed to be a captured failed star or rogue planet',\r\n                mass: 60,\r\n                age: 9.1,\r\n                classification: 'gas giant',\r\n                atmosphere: 'hydrogen, helium',\r\n                atmosphericPressure: 53224,\r\n                hydrosphere: 'liquid hydrogen',\r\n                surfaceGravity: 3.6,\r\n                temperatureRange: [-120, 0, 10],\r\n                orbitDistance: { distance: 684400, unit: 'km' },\r\n                satelites: [],\r\n                imageURL: 'texture_planet_edis.png',\r\n                axialTilt: 0,\r\n                dayPeriod: 3600 * 8,\r\n                bodyType: 'planetoid',\r\n            }],\r\n            classification: 'gas giant',\r\n            atmosphere: 'hydrogen, helium',\r\n            atmosphericPressure: 83110,\r\n            hydrosphere: 'liquid hydrogen',\r\n            surfaceGravity: 4,\r\n            temperatureRange: [-90, 0, 20],\r\n            orbitDistance: { distance: 4, unit: 'AU' },\r\n            feature: 'asteroid belt orbiting gas giant binary',\r\n            imageURL: 'texture_planet_sylvis.png',\r\n            axialTilt: 0,\r\n            dayPeriod: 3600 * 11,\r\n        },\r\n        {\r\n            name: 'Nane',\r\n            description: 'Frozen ice giant',\r\n            age: 3.8,\r\n            classification: 'ice giant',\r\n            atmosphericPressure: 8000,\r\n            atmosphere: 'hydrogen, helium',\r\n            mass: 19,\r\n            surfaceGravity: 4,\r\n            hydrosphere: 'liquid methane',\r\n            temperatureRange: [-190, -160, -140],\r\n            orbitDistance: { distance: 9, unit: 'AU' },\r\n            satelites: [],\r\n            imageURL: 'texture_planet_nane.png',\r\n            axialTilt: -45,\r\n            dayPeriod: 3600 * 48,\r\n            bodyType: 'planetoid',\r\n        },\r\n        {\r\n            name: 'Sarma',\r\n            description: 'A huge ice giant',\r\n            age: 3.8,\r\n            classification: 'ice giant',\r\n            atmosphericPressure: 12000,\r\n            atmosphere: 'hydrogen, helium',\r\n            mass: 29,\r\n            surfaceGravity: 6,\r\n            hydrosphere: 'liquid methane, liquid nitrogen',\r\n            temperatureRange: [-210, -180, -90],\r\n            orbitDistance: { distance: 20, unit: 'AU' },\r\n            satelites: [],\r\n            imageURL: 'texture_planet_sarma.png',\r\n            axialTilt: -30,\r\n            dayPeriod: 3600 * 36,\r\n            bodyType: 'planetoid',\r\n        },\r\n        {\r\n            name: 'Marzanna',\r\n            description: 'Deep space ice giant',\r\n            age: 3.8,\r\n            classification: 'ice giant',\r\n            atmosphericPressure: 7000,\r\n            atmosphere: 'hydrogen, helium',\r\n            mass: 16,\r\n            surfaceGravity: 4,\r\n            hydrosphere: 'liquid methane, liquid nitrogen',\r\n            temperatureRange: [-220, -190, -130],\r\n            orbitDistance: { distance: 51, unit: 'AU' },\r\n            satelites: [],\r\n            imageURL: 'texture_planet_marzanna.png',\r\n            axialTilt: 0,\r\n            dayPeriod: 3600 * 90,\r\n            bodyType: 'planetoid',\r\n        }\r\n        ]\r\n    }]}\r\n    roguePlanetoids={[]}\r\n/>\r\n\r\n\r\nexport default FringeWorlds;","import React from 'react';\r\nimport Section from '../playermanual/Section';\r\nimport { Character } from '../Character';\r\n\r\nconst experienceAges = [...Array(90)]\r\n    .map((v: any, index: number, arr: any[]) => {\r\n        return { age: index, exp: Character.CharacterPointsNekovian(index), mult: Character.ExperienceMultiplerNekovian(index) };\r\n    });\r\n\r\nconst Nekovian = () => <>\r\n    <h2>Nekovians</h2>\r\n    <h3>Nekovian homeworld</h3>\r\n    <p>The Nekovian homeworld is Neke in the Ashra System</p>\r\n    <h3>Flying Amphibian</h3>\r\n    <p>A nekovian is a bipedal intelligent amphibian, they live in the ocean of Neke and on the various islands.</p>\r\n    <p>A fully grown nekovian stands between 1.1 and 1.4 meters tall on average, their skin ranges from light blue to dark blue. They have a long tail with fins at the end.\r\n    Their head is almost like a salamander with the exception that they have ridges on their forehead that goes across their head and reaches their spine.\r\n    Their spine is followed by small fins which split into two at the end of their tail.\r\n    </p>\r\n    <p>Nekovians have very long arms, up to 2 meters span, with webbed skin both above and below. When stretched out their arms forms wings which allow them to glide in the air.</p>\r\n    <h3>Playing as a Nekovian</h3>\r\n    <p>Nekovians are a playable race but very few live outside of their homeworld and home system</p>\r\n    <p>Nekovians move at double speed in water and can fly</p>\r\n    <p>Merlions may choose between tiny, small and medium size</p>\r\n    <table>\r\n        <thead>\r\n            <tr>\r\n                <th> </th> <th>Age 16-24</th> <th>Age 25-36</th> <th>Age 37-60</th> <th>Age 61+</th>\r\n\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            <tr>\r\n                <td> STR</td> <td> 1d12</td> <td> 1d12</td> <td> 1d10</td>  <td> 1d10</td>\r\n            </tr>\r\n            <tr>\r\n                <td> AGI</td>  <td> 1d12</td> <td> 1d10</td> <td> 1d10</td>  <td> 1d8</td>\r\n            </tr>\r\n            <tr>\r\n                <td> END</td>  <td> 1d10</td> <td> 1d12</td> <td> 1d10</td>  <td> 1d8</td>\r\n            </tr>\r\n            <tr>\r\n                <td> PER</td>  <td> 1d8</td> <td> 1d8</td> <td> 1d6</td>  <td> 1d4</td>\r\n            </tr>\r\n            <tr>\r\n                <td> INT</td>  <td> 1d8</td> <td> 1d10</td> <td> 1d8</td>  <td> 1d8</td>\r\n            </tr>\r\n            <tr>\r\n                <td> WILL</td>  <td> 1d12</td> <td> 1d12</td> <td> 1d12</td>  <td> 1d12</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n\r\n    <Section title='Nekovian experience per age is as following'>\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Age</th> <th>Starting experience</th> <th>Experience Multiplier</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {experienceAges.slice(16, 81).map(ex => <tr><td>{ex.age}</td> <td>{ex.exp}</td> <td>{ex.mult}</td> </tr>)}\r\n            </tbody>\r\n        </table>\r\n    </Section>\r\n</>;\r\n\r\n\r\nexport default Nekovian;","import React from \"react\";\r\nimport Section from \"../playermanual/Section\";\r\n\r\nconst FTLHyperDrive: React.FC = () => {\r\n    return <>\r\n        <h2>The FTL Hyperdrive</h2>\r\n        <h5>What is it?</h5>\r\n        <p>\r\n            The FTL Hyperdrive is the propulsion which allows humans to travel faster than the speed of light and thus visit other stars within a human lifetime.<br />\r\n            It works by shortening the space in front of the ship and lengthening it behind it, as a result a \"hyperspace\" bubble is formed around the ship and moves it through normal space.<br />\r\n            Inside the bubble there is no acceleration and thus no gravity.<br />\r\n        </p>\r\n        <h5>The FTL Ring</h5>\r\n        <p>\r\n            To achieve the extreme bending of spacetime hypermatter is placed in a torus, space right outside is bent. That means any ship that wants to travel interstellar space has a huge ring around it.\r\n        </p>\r\n        <h5>Fuel</h5>\r\n        <p>\r\n            The FTL Hyperdrive uses a fuel called \"Exotic Hypermatter\", it is an extremely hard to fabricate material with exotic properties such as negative mass (not to be confused with anti-matter which has normal mass and opposite charge).<br />\r\n            Exotic Hypermatter requires an extreme amount of energy to make, as such it is only made in huge stellar factories powered by the sun.<br />\r\n            While the fuel is extremely expensive almost none is lost in FTL travel, most inefficiencies occur when the hyperspace bubble interacts with strong tidal forces from gravity fields, trying to fly through a planet would cause the fuel to be immediately depleted and the bubble to collapse, dropping out of FTL speed.<br />\r\n            A normal FTL journey will only expend a negligable amount of fuel while entering hyperspace, however bad navigators and pilots can cause the journey to be more costly.\r\n        </p>\r\n        <p>\r\n            Exotic Hypermatter is very expensive, a single activation of the drive uses 2,000,000 credits worth of fuel.<br/>\r\n            Particularly, engaging the drive uses 1 standard unit, the drive can then keep going for approximately 8 light years, then it uses 1 for every 12 more light years. Units of hyper matter fuel are not divisible below 1 units, the reason is not exactly known to humans.<br/>\r\n            A single unit of fuel weighs -2.176435 micrograms.\r\n        </p>\r\n        <p>\r\n            Due to all of these concerns the economics favor huge space ships that delivers enormous payloads. A typical FTL space ship often accomodates ten thousand passengers, plus a hundred thousand metric tons of cargo or a million additional passengers in cryosleep.\r\n        </p>\r\n        <h5>Speed</h5>\r\n        <p>\r\n            Most ships can travel up to 54x the speed of light which seems to be a limit on the technology, above this speed fuel starts to drain.<br />\r\n            To create a bubble takes some time to start, typically 1 hour or more, after that the ship does not reach maximum speed immediately, instead it starts slowly and increases exponentially until it reaches maximum speed.<br />\r\n            Merlion ships are somehow able to travel even faster, 216x the speed of light, how this is done is not yet known. Very little about Merlion technology is understood, not because they are secretive but because it is hard.\r\n        </p>\r\n        <h5>Hazards</h5>\r\n        <p>\r\n            There are many hazards involved with FTL travel, a poorly designed ship or badly routed journey can easily spell death for the crew.<br />\r\n            If the hyperspace bubble is formed prematurely then it becomes open to hyper excited cosmic radiation, this is the result of interaction between the rapidly collapsing space in front of the ship and cosmic radiation.<br />\r\n            Any matter caught in the hyperspace bubble on the journey may drain the fuel, if this happens the ship might become stranded deep in interstellar space, as such it's extremely important that navigation is done carefully, even so there's always some risk that a journey may stop too early.<br />\r\n            Since there can be no gravitation on board while in hyperspace crew may experience muscle mass loss and bone density loss<br />\r\n            While in the bubble the ship is causally unlinked from the rest of the universe, it's impossible to communicate with such a ship, a crew may become lonely, depression is a high risk.\r\n            Rare cases of insanity and strange mutations have been rumored\r\n        </p>\r\n        <h5>Communication</h5>\r\n        <p>\r\n            A ship with a hyperdrive is the fastest known object in the universe, all inter-star communication must happen via these ships, ships travelling between the stars often contain news from their origin, this is the only direct contact systems have with each other.<br />\r\n            Transport ships are always empowered to represent their origin, they must make decisions on their own, communication back is not possible until they return.<br />\r\n            Distant systems are often very isolated as a result.<br/>\r\n        </p>\r\n        <Section title='badly drawn sketches of FTL space ships'>\r\n            <br />\r\n            <img src='ftl_sketch_3.jpg' alt='sketch 1' />\r\n            <img src='ftl_sketch_4.jpg' alt='sketch 2' />\r\n        </Section>\r\n\r\n    </>;\r\n}\r\n\r\nexport default FTLHyperDrive;","import React from 'react';\r\n\r\n\r\nconst Credits: React.FC = () => {\r\n    return <>\r\n        <h2>Credits</h2>\r\n        <p>In the infinite dark void that is the future there is no cash, only digital credits.\r\n            Digital credits (or just Credits) is a form of cryptographic and certified data contained within Credit Pads and banks\r\n        </p>\r\n        <h4>The Credit Pad</h4>\r\n        <p>The Credit Pad (or sometimes credit box) is a digital tool that facilitates transfer of credits. Each pad contains a cryptographic \r\n            id which certifies that the credits are authentic.\r\n            <br/>\r\n            It works quite simply, a pad contains some amount of money and can send or receive to another pad through shortrange wireless transfer.\r\n            <br/>\r\n            The pad can be anonymous or individualized, password/fingerprint protected or open, and can contain a maximum of 1 million credits.\r\n            <br/>\r\n            An individualized pad with protection may be connected to a bank account which means it may contain unlimited amounts.\r\n            A maximally protected pad can also have its contents retracted into the bank account, making it extremely difficult to steal money.\r\n            <br/>\r\n        </p>\r\n        <h4>History of the Cryptocurrency</h4>\r\n        <p>It was in the early 2100 that a kind of cryptocurrency had become the standard currency, since it was exceptionally hard to counterfeit but also allowed a central issuer to increase the amount.\r\n            Each user could make a very strong authentication against any other user.\r\n        </p>\r\n    </>;\r\n}\r\n\r\n\r\nexport default Credits;","import React from 'react';\r\n\r\nconst Robotics:React.FC = () => \r\n    <>Work in progress</>;\r\n\r\n\r\nexport default Robotics;","import React from 'react';\r\n\r\nimport { FTLHyperDrive, History, Merlions, SolSystem, CentauriSystem, FringeWorlds, Humans, Shambra, Nekovian, Credits } from './../components/Lore/Lore'\r\n\r\nimport Section from '../components/playermanual/Section';\r\nimport Robotics from '../components/Lore/Robotics';\r\n\r\nconst WorldAndLore: React.FC = () => {\r\n    return (<div>\r\n        <h1>World and Lore</h1>\r\n        <h2>Index</h2>\r\n        <Section title='History'><History /></Section>\r\n        <hr />\r\n        <Section title='The FTL Hyperdrive'><FTLHyperDrive /></Section>\r\n        <hr />\r\n        <Section title='The Sol System'><SolSystem /></Section>\r\n        <hr />\r\n        <Section title='The Centauri System'><CentauriSystem /></Section>\r\n        <hr />\r\n        <Section title='The other colonies'><FringeWorlds /></Section>\r\n        <hr />\r\n        <Section title='The galaxy'>work in progress...</Section>\r\n        <hr />\r\n        <Section title='The Humans'><Humans /></Section>\r\n        <hr />\r\n        <Section title='The Merlions'><Merlions /></Section>\r\n        <hr />\r\n        <Section title='The Shambras'><Shambra /></Section>\r\n        <hr />\r\n        <Section title='The Nekovians'><Nekovian /></Section>\r\n        <hr />\r\n        <Section title='Monsters'>work in progress...</Section>\r\n        <hr/>\r\n        <Section title='Robotics'><Robotics /></Section>\r\n        <hr/>\r\n        <Section title='Credits'><Credits /></Section>\r\n    </div>);\r\n}\r\n\r\nexport default WorldAndLore;","import React from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport usePersistentState from \"../../utils/usePersistentState\";\r\n\r\ninterface ISection {\r\n    title: string;\r\n    tab?: number;\r\n    border?: boolean | undefined;\r\n}\r\n\r\nconst Section: React.FC<ISection> = ({ title, tab, border, children }) => {\r\n    const [isOpen, setIsOpen] = usePersistentState<boolean>(title + tab, false);\r\n    let tabSize = '0';\r\n    if (tab !== undefined)\r\n        tabSize = tab + 'px';\r\n    return <div className={border === true ? 'bordersection' : ''} style={{ paddingLeft: tabSize }}>\r\n        <Button onClick={() => setIsOpen(!isOpen)}>{title} {isOpen ? '-' : '+'}</Button>\r\n        {isOpen && children}\r\n    </div>;\r\n}\r\n\r\nexport default Section;","import React, { useState, CSSProperties } from \"react\";\r\n\r\ninterface IEllipsisProps {\r\n    text: string | undefined;\r\n    cutOff: number;\r\n}\r\n\r\nconst cursorStyle: CSSProperties = {\r\n    cursor: 'pointer'\r\n}\r\n\r\nconst Ellipsis: React.FC<IEllipsisProps> = ({ text, cutOff }) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    if (text === undefined) return null;\r\n    if (text.length < cutOff)\r\n        return <p>{text}</p>\r\n    else if (!isOpen && text.length >= cutOff)\r\n        return <p style={cursorStyle} onClick={() => setIsOpen(true)}>{text.substring(0, cutOff)}...</p>\r\n    else return <p style={cursorStyle} onClick={() => setIsOpen(false)}>{text}</p>\r\n}\r\n\r\nexport default Ellipsis;","import React, { useState } from \"react\";\r\nimport EditText from \"../general/HideText\";\r\nimport { Character } from \"../Character\";\r\n\r\ninterface IDice {\r\n    sides: number;\r\n    numberOfDice: number;\r\n}\r\n\r\ninterface ICharacterRoller {\r\n    strength: IDice;\r\n    agility: IDice;\r\n    endurance: IDice;\r\n    perception: IDice;\r\n    willpower: IDice;\r\n    intelligence: IDice;\r\n}\r\n\r\ninterface ICharacterData {\r\n    strength: number[];\r\n    agility: number[];\r\n    endurance: number[];\r\n    perception: number[];\r\n    willpower: number[];\r\n    intelligence: number[];\r\n}\r\n\r\nconst CharacterRoller: React.FC<ICharacterRoller> = (props) => {\r\n    const [characterData, setCharacterData] = useState<ICharacterData[]>([]);\r\n\r\n    return (<div className=\"flexbox\">\r\n        <button onClick={() => rollCharacterData(props, setCharacterData)}>Roll</button>\r\n\r\n        {characterData.length > 0 ? <div className=\"flexContainer\">\r\n            Strength<br />\r\n            Agility<br />\r\n            Endurance<br />\r\n            Perception<br />\r\n            Willpower<br />\r\n            Intelligence<br />\r\n        </div> : null}\r\n\r\n        {characterData.map(cd => {\r\n            return <div className=\"flexContainer\">\r\n                {sumN(cd.strength)}<br />\r\n                {sumN(cd.agility)}<br />\r\n                {sumN(cd.endurance)}<br />\r\n                {sumN(cd.perception)}<br />\r\n                {sumN(cd.willpower)}<br />\r\n                {sumN(cd.intelligence)}<br />\r\n            </div>\r\n        })}\r\n    </div>);\r\n}\r\n\r\nconst sumN = (n: number[]) => ` ${n.join(', ')} = ${n.reduce(function (a, b) { return a + b; }, 0)}`;\r\n\r\nconst rollCharacterData = (dice: ICharacterRoller, setter: React.Dispatch<React.SetStateAction<ICharacterData[]>>) => {\r\n    let charData: ICharacterData[] = [];\r\n\r\n    for (let counter = 0; counter < 4; counter++) {\r\n        charData.push({\r\n            strength: roll(dice.strength),\r\n            agility: roll(dice.agility),\r\n            endurance: roll(dice.endurance),\r\n            perception: roll(dice.perception),\r\n            willpower: roll(dice.willpower),\r\n            intelligence: roll(dice.intelligence),\r\n        });\r\n    }\r\n    setter(charData);\r\n}\r\n\r\nconst roll = (dice: IDice) => {\r\n    let numbers: number[] = [];\r\n    for (let counter = 0; counter < dice.numberOfDice; counter++) {\r\n        numbers.push(Math.floor((Math.random() * dice.sides)) + 1);\r\n    }\r\n    return numbers;\r\n}\r\n\r\n\r\n\r\nconst getStrengthHuman = (age: number) => {\r\n    if (age > 80) return { sides: 8, numberOfDice: 1 };\r\n    if (age > 26) return { sides: 10, numberOfDice: 1 };\r\n    return { sides: 8, numberOfDice: 1 };\r\n\r\n}\r\nconst getAgilityHuman = (age: number) => {\r\n    if (age > 80) return { sides: 6, numberOfDice: 1 };\r\n    if (age > 40) return { sides: 8, numberOfDice: 1 };\r\n    return { sides: 10, numberOfDice: 1 };\r\n}\r\nconst getEnduranceHuman = (age: number) => {\r\n    if (age > 80) return { sides: 8, numberOfDice: 1 };\r\n    if (age > 40) return { sides: 10, numberOfDice: 1 };\r\n    return { sides: 12, numberOfDice: 1 };\r\n}\r\nconst getPerceptionHuman = (age: number) => {\r\n    if (age > 80) return { sides: 6, numberOfDice: 1 };\r\n    if (age > 40) return { sides: 8, numberOfDice: 1 };\r\n    if (age > 26) return { sides: 10, numberOfDice: 1 };\r\n    return { sides: 12, numberOfDice: 1 };\r\n\r\n}\r\nconst getIntelligenceHuman = (age: number) => {\r\n    if (age > 80) return { sides: 8, numberOfDice: 1 };\r\n    return { sides: 10, numberOfDice: 1 };\r\n}\r\nconst getWillpowerHuman = (age: number) => {\r\n    if (age > 80) return { sides: 8, numberOfDice: 1 };\r\n    if (age > 40) return { sides: 10, numberOfDice: 1 };\r\n    if (age > 26) return { sides: 8, numberOfDice: 1 };\r\n    return { sides: 6, numberOfDice: 1 };\r\n}\r\n\r\n\r\nexport const CharacterRollerHuman = () => {\r\n    const [age, setAge] = useState(24);\r\n    return <>\r\n        Age: {age}<br />\r\n    Starting Exp: {Character.CharacterPointsHuman(age)}<br />\r\n    Multiplier Exp: {Character.ExperienceMultiplerHuman(age)}<br />\r\n        <EditText isEdit=\"edit\" onChange={(str) => setAge(parseInt(str))} txt={age} explain=\"\" />\r\n        <CharacterRoller\r\n            strength={getStrengthHuman(age)}\r\n            agility={getAgilityHuman(age)}\r\n            endurance={getEnduranceHuman(age)}\r\n            intelligence={getIntelligenceHuman(age)}\r\n            willpower={getWillpowerHuman(age)}\r\n            perception={getPerceptionHuman(age)}\r\n        />\r\n    </>\r\n}\r\n\r\nconst getStrengthShambra = (age: number) => {\r\n    if (age > 80) return { sides: 8, numberOfDice: 1 };\r\n    if (age > 26) return { sides: 10, numberOfDice: 1 };\r\n    return { sides: 8, numberOfDice: 1 };\r\n}\r\nconst getAgilityShambra = (age: number) => {\r\n    if (age > 80) return { sides: 6, numberOfDice: 1 };\r\n    if (age > 40) return { sides: 8, numberOfDice: 1 };\r\n    return { sides: 10, numberOfDice: 1 };\r\n}\r\nconst getEnduranceShambra = (age: number) => {\r\n    if (age > 80) return { sides: 8, numberOfDice: 1 };\r\n    if (age > 40) return { sides: 10, numberOfDice: 1 };\r\n    return { sides: 12, numberOfDice: 1 };\r\n}\r\nconst getPerceptionShambra = (age: number) => {\r\n    if (age > 80) return { sides: 6, numberOfDice: 1 };\r\n    if (age > 40) return { sides: 8, numberOfDice: 1 };\r\n    if (age > 26) return { sides: 10, numberOfDice: 1 };\r\n    return { sides: 12, numberOfDice: 1 };\r\n}\r\nconst getIntelligenceShambra = (age: number) => {\r\n    if (age > 80) return { sides: 8, numberOfDice: 1 };\r\n    return { sides: 10, numberOfDice: 1 };\r\n}\r\nconst getWillpowerShambra = (age: number) => {\r\n    if (age > 80) return { sides: 8, numberOfDice: 1 };\r\n    if (age > 40) return { sides: 10, numberOfDice: 1 };\r\n    return { sides: 6, numberOfDice: 1 };\r\n}\r\n\r\n\r\nexport const CharacterRollerShambra = () => {\r\n    const [age, setAge] = useState(24);\r\n    return <>\r\n        Age: {age}<br />\r\n    Starting Exp: {Character.CharacterPointsShambras(age)}<br />\r\n    Multiplier Exp: {Character.ExperienceMultiplerShambras(age)}<br />\r\n        <EditText isEdit=\"edit\" onChange={(str) => setAge(parseInt(str))} txt={age} explain=\"\" />\r\n        <CharacterRoller\r\n            strength={getStrengthShambra(age)}\r\n            agility={getAgilityShambra(age)}\r\n            endurance={getEnduranceShambra(age)}\r\n            intelligence={getIntelligenceShambra(age)}\r\n            willpower={getWillpowerShambra(age)}\r\n            perception={getPerceptionShambra(age)}\r\n        />\r\n    </>\r\n}\r\n\r\nconst getStrengthMerlion = (age: number) => {\r\n    if (age > 40) return { sides: 8, numberOfDice: 1 };\r\n    return { sides: 6, numberOfDice: 1 };\r\n}\r\nconst getAgilityMerlion = (age: number) => {\r\n    if (age > 40) return { sides: 8, numberOfDice: 1 };\r\n    return { sides: 10, numberOfDice: 1 };\r\n}\r\nconst getEnduranceMerlion = (age: number) => {\r\n    if (age > 40) return { sides: 6, numberOfDice: 1 };\r\n    return { sides: 8, numberOfDice: 1 };\r\n}\r\nconst getPerceptionMerlion = (age: number) => {\r\n    if (age > 40) return { sides: 8, numberOfDice: 1 };\r\n    return { sides: 10, numberOfDice: 1 };\r\n}\r\nconst getIntelligenceMerlion = (age: number) => {\r\n    return { sides: 4, numberOfDice: 4 };\r\n}\r\nconst getWillpowerMerlion = (age: number) => {\r\n    return { sides: 10, numberOfDice: 1 };\r\n}\r\n\r\nexport const CharacterRollerMerlion = () => {\r\n    const [age, setAge] = useState(24);\r\n    return <>\r\n        Age: {age}<br />\r\n    Starting Exp: {Character.CharacterPointsMerlion(age)}<br />\r\n    Multiplier Exp: {Character.ExperienceMultiplerMerlion(age)}<br />\r\n        <EditText isEdit=\"edit\" onChange={(str) => setAge(parseInt(str))} txt={age} explain=\"\" />\r\n        <CharacterRoller\r\n            strength={getStrengthMerlion(age)}\r\n            agility={getAgilityMerlion(age)}\r\n            endurance={getEnduranceMerlion(age)}\r\n            intelligence={getIntelligenceMerlion(age)}\r\n            willpower={getWillpowerMerlion(age)}\r\n            perception={getPerceptionMerlion(age)}\r\n        />\r\n    </>\r\n}\r\n\r\nconst getStrengthNekovian = (age: number) => {\r\n    if (age > 36) return { sides: 10, numberOfDice: 1 };\r\n    return { sides: 12, numberOfDice: 1 };\r\n}\r\nconst getAgilityNekovian = (age: number) => {\r\n    if (age > 61) return { sides: 8, numberOfDice: 1 };\r\n    if (age > 24) return { sides: 10, numberOfDice: 1 };\r\n    return { sides: 12, numberOfDice: 1 };\r\n}\r\nconst getEnduranceNekovian = (age: number) => {\r\n    if (age > 60) return { sides: 8, numberOfDice: 1 };\r\n    if (age > 36) return { sides: 10, numberOfDice: 1 };\r\n    if (age > 24) return { sides: 12, numberOfDice: 1 };\r\n    return { sides: 10, numberOfDice: 1 };\r\n}\r\nconst getPerceptionNekovian = (age: number) => {\r\n    if (age > 60) return { sides: 4, numberOfDice: 1 };\r\n    if (age > 36) return { sides: 6, numberOfDice: 1 };\r\n    return { sides: 8, numberOfDice: 1 };\r\n}\r\nconst getIntelligenceNekovian = (age: number) => {\r\n    if (age > 60) return { sides: 8, numberOfDice: 1 };\r\n    if (age > 36) return { sides: 8, numberOfDice: 1 };\r\n    if (age > 24) return { sides: 10, numberOfDice: 1 };\r\n    return { sides: 8, numberOfDice: 1 };\r\n}\r\nconst getWillpowerNekovian = (age: number) => {\r\n    return { sides: 12, numberOfDice: 1 };\r\n}\r\n\r\nexport const CharacterRollerNekovian = () => {\r\n    const [age, setAge] = useState(24);\r\n    return <>\r\n        Age: {age}<br />\r\n    Starting Exp: {Character.CharacterPointsNekovian(age)}<br />\r\n    Multiplier Exp: {Character.ExperienceMultiplerNekovian(age)}<br />\r\n        <EditText isEdit=\"edit\" onChange={(str) => setAge(parseInt(str))} txt={age} explain=\"\" />\r\n        <CharacterRoller\r\n            strength={getStrengthNekovian(age)}\r\n            agility={getAgilityNekovian(age)}\r\n            endurance={getEnduranceNekovian(age)}\r\n            intelligence={getIntelligenceNekovian(age)}\r\n            willpower={getWillpowerNekovian(age)}\r\n            perception={getPerceptionNekovian(age)}\r\n        />\r\n    </>\r\n}\r\n\r\nexport default CharacterRoller;"],"sourceRoot":""}