{"version":3,"sources":["components/Label.tsx","components/Field.tsx","components/Skills.tsx","components/Character.tsx","components/perks/TemplatePerk.tsx","components/Perks.tsx","components/CharacterSheet.tsx","components/PlayerManual.tsx","components/SkillPerkManual.tsx","components/WorldAndLore.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Label","children","style","display","minWidth","Field","label","value","onChange","max","min","modifier","enableButtons","useState","viewChildren","setViewChildren","ma","undefined","mi","total","Paper","className","Button","size","variant","onClick","GetSkillList","combat","pilot","spells","investigation","persuation","intimidation","larceny","stealth","survival","science","computer","medicine","surgery","empathy","subtrefuge","athletics","acrobatics","search","slightOfHand","sort","a","b","attribute","fSum","n","x","i","Character","copy","age","strength","agility","endurance","perception","willpower","intelligence","skills","perks","this","perkCost","length","map","p","cost","reduce","s","level","Math","getStartingPointsAvailable","floor","TemplatePerk","name","skill","TextField","PerkTemplate","data","_description","description","Skills","GetPerkList","generic10All","m","generic20All","generic30All","generic40All","gun1","gun2","gun3","gun4","sortPerk","prevPerk","nextPerk","CharacterSheet","props","useReducer","useCharacter","initialCharacter","character","dispatch","charJSON","setCharJSON","edit","setEdit","perksList","textAlign","characterCallback","json","JSON","stringify","makeJSONText","Grid","container","spacing","item","xs","sm","getCalculatedPointsUsed","getMaximumPointsAvailable","action","getExperienceMultiplier","getHitpoints","getMana","getDamageBonusSmall","getDamageBonusMedium","getDamageBonusLarge","substring","toUpperCase","filter","perkToAdd","perk","state","r","findIndex","push","pta","PlayerManual","SkillSection","currentSkill","setCurrentSkill","width","PerkSection","currentPerk","setCurrentPerk","SkillPerkManual","History","title","HistorySection","WorldAndLore","Conditional","shouldView","padding","Menu","options","option","callback","App","viewMode","setViewMode","setCharacter","MainButton","DialogTitle","console","info","charData","prompt","c","parse","log","error","loadCharacter","float","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.470dc512.chunk.js","sourcesContent":["    import React from 'react';\n\nexport const Label: React.FC<{}> = ({children}) => {\n    return <label style={{display:'inline-block', minWidth:'140px'}}>{children}</label>;\n}\n\n","import React, { useState } from 'react';\nimport { Paper, Button } from '@material-ui/core';\nimport { Label } from './Label';\n\ninterface FieldProps {\n    label: string;\n    value: number;\n    max?: number;\n    min?: number;\n    modifier?: number;\n    enableButtons?: boolean;\n    onChange: (n: number) => void;\n}\n\n\nconst rand = (min: number, max: number) => {\n    return Math.round(Math.random() * (max - min) + min);\n};\n\nconst d10 = () => rand(1, 10);\nexport const Field: React.FC<FieldProps> = ({ label, value, onChange, max, min, modifier, enableButtons, children }) => {\n    const [viewChildren, setViewChildren] = useState(false);\n    let ma = max !== undefined ? max : 10;\n    let mi = min !== undefined ? min : 1;\n    let total = modifier !== undefined ? value + modifier : value;\n    return <Paper className=\"extraPadding\">\n        <Label>{label}:</Label> <Label>{value} {modifier !== undefined ? ` | ${modifier} | ${total}` : null}</Label>\n        {enableButtons === true ? <Button size=\"small\" variant=\"contained\" onClick={() => onChange(ma <= value ? value : value + 1)}>+</Button> : null}\n        {enableButtons === true ? <Button size=\"small\" variant=\"contained\" onClick={() => onChange(mi >= value ? value : value - 1)}>-</Button> : null}\n\n        {children !== undefined ? viewChildren === true ?\n            <Paper><Button size=\"small\" variant=\"contained\" onClick={() => setViewChildren(false)}>X</Button>{children} </Paper>\n            : (enableButtons === true ? <Button size=\"small\" variant=\"contained\" onClick={() => setViewChildren(true)}>?</Button> : null)\n            : null}\n    </Paper>\n}","import combat from './skills/combat.json';\nimport pilot from './skills/pilot.json';\nimport spells from './skills/spells.json';\nimport investigation from './skills/investigation.json';\nimport intimidation from './skills/intimidation.json';\nimport larceny from './skills/larceny.json';\nimport stealth from './skills/stealth.json';\nimport survival from './skills/survival.json';\nimport science from './skills/science.json';\nimport computer from './skills/computer.json';\nimport medicine from './skills/medicine.json';\nimport surgery from './skills/surgery.json';\nimport empathy from './skills/empathy.json';\nimport subtrefuge from './skills/subtrefuge.json';\nimport athletics from './skills/athletics.json';\nimport acrobatics from './skills/acrobatics.json';\nimport search from './skills/search.json';\nimport slightOfHand from './skills/slightOfHand.json';\nimport persuation from './skills/persuation.json';\n\n\nexport interface Skill {\n    name: string;\n    attribute: string | 'strength' | 'agility' | 'endurance' | 'perception' | 'willpower' | 'intelligence';\n    level: number;\n    description: string;\n}\nexport const GetSkillList = (): Skill[] => {\n    return [\n        { ...combat },\n        { ...pilot },\n        { ...spells },\n        { ...investigation },\n        { ...persuation },\n        { ...intimidation },\n        { ...larceny },\n        { ...stealth },\n        {  ...survival },\n        { ...science },\n        { ...computer },\n        { ...medicine },\n        { ...surgery },\n        { ...empathy },\n        { ...subtrefuge },\n        { ...athletics },\n        { ...acrobatics },\n        { ...search },\n        {  ...slightOfHand }\n    ].sort((a, b) => a.attribute < b.attribute ? -1 : 1);\n}","import { Skill, GetSkillList } from \"./Skills\";\nimport { Perk } from './Perks';\n\nconst fSum = (n: number): number => {\n    let x = 0;\n    for (let i = 0; i <= n; i++) {\n        x += i;\n    }\n    return x;\n};\n\nexport interface ICharacter {\n\n    age: number;\n    strength: number;\n    agility: number;\n    endurance: number;\n    perception: number;\n    willpower: number;\n    intelligence: number;\n    skills: Skill[];\n    perks: Perk[];\n}\n\nexport class Character {\n    age: number;\n    strength: number;\n    agility: number;\n    endurance: number;\n    perception: number;\n    willpower: number;\n    intelligence: number;\n    skills: Skill[];\n    perks: Perk[];\n    constructor(copy?: ICharacter) {\n        this.strength = (copy && copy.strength) || 4;\n        this.agility = (copy && copy.agility) || 4;\n        this.endurance = (copy && copy.endurance) || 4;\n        this.perception = (copy && copy.perception) || 4;\n        this.willpower = (copy && copy.willpower) || 4;\n        this.intelligence = (copy && copy.intelligence) || 4;\n        this.skills = (copy && copy.skills) || GetSkillList();\n        if (copy !== undefined && copy.perks !== undefined) this.perks = copy.perks;\n        else this.perks = [];\n        this.age = (copy && copy.age) || 24;\n    }\n\n\n    public getCalculatedPointsUsed() {\n        const perkCost = this.perks.length > 0 ? this.perks.map(p=>p.cost).reduce((a,b) => a+b) : 0;\n        return fSum(this.strength) * 4\n            + fSum(this.agility) * 4\n            + fSum(this.endurance) * 4\n            + fSum(this.perception) * 4\n            + fSum(this.willpower) * 4\n            + fSum(this.intelligence) * 4\n            + this.skills.map(s => fSum(s.level)).reduce((a, b) => a + b, 0)\n            + perkCost;\n    }\n    public getStartingPointsAvailable() {\n        let p = 300;\n        p += Math.min(this.age, 18) * 16;\n        if (this.age > 18) p += Math.min(this.age - 18, 26 - 18) * 12;\n        if (this.age > 26) p += Math.min(this.age - 26, 40 - 26) * 8;\n        if (this.age > 40) p += Math.min(this.age - 40, 70 - 40) * 4;\n        return p;\n    }\n\n    public getMaximumPointsAvailable() {\n        return this.getStartingPointsAvailable() * 2;\n    }\n\n    public getExperienceMultiplier() {\n        if (this.age < 16) return 3;\n        if (this.age < 20) return 2.5;\n        if (this.age < 24) return 2;\n        if (this.age < 28) return 1.75;\n        if (this.age < 32) return 1.5;\n        if (this.age < 36) return 1.25;\n        return 1;\n    }\n\n    public getHitpoints() {\n        return this.strength + this.endurance * 2;\n    }\n\n    public getMana() {\n        return this.endurance + this.willpower * 2\n    }\n\n    public getDamageBonusSmall() {\n        return Math.floor(this.strength / 4);\n    }\n\n    public getDamageBonusMedium() {\n        return Math.floor(this.strength / 3);\n    }\n    public getDamageBonusLarge() {\n        return Math.floor(this.strength / 2);\n    }\n}","import {Perk} from './../Perks';\nimport React from 'react';\nimport TextField from '@material-ui/core/TextField';\n\nexport class TemplatePerk implements Perk\n{\n    name: string;    \n    skill: string;\n    cost: number;\n    description(): JSX.Element {\n        return <TextField />;\n    }\n    constructor(name: string, skill:string, cost: number){\n        this.name = name;\n        this.skill = skill;\n        this.cost = cost;\n    }\n    \n}","import gun1 from './perks/gun1.json';\nimport gun2 from './perks/gun2.json';\nimport gun3 from './perks/gun3.json';\nimport gun4 from './perks/gun4.json';\nimport { JSXElement } from '@babel/types';\nimport React from 'react';\nimport { GetSkillList } from './Skills';\nimport { TemplatePerk } from './perks/TemplatePerk';\n\n\nexport interface Perk {\n    name: string;\n    skill: string;\n    cost: number;\n    description(): JSX.Element;\n}\n\ninterface IPerk {\n    name: string;\n    skill: string;\n    cost: number;\n    description: string;\n}\n\nclass PerkTemplate implements Perk{\n    name: string;\n    skill: string;\n    cost: number;\n    _description:string;\n    description():JSX.Element  {\n        return <>{this._description}</>;\n    }\n    constructor(data:IPerk) {\n        this.name = data.name;\n        this.skill = data.skill;\n        this.cost = data.cost;\n        this._description = data.description;\n    }\n}\nconst Skills =GetSkillList();\nexport const GetPerkList = (): Perk[] => {\n    \n    const generic10All = Skills.map(m => new TemplatePerk(\"custom \"+m.name+\" 10\", m.name,10));\n    const generic20All = Skills.map(m => new TemplatePerk(\"custom \"+m.name+\" 20\", m.name,20));\n    const generic30All = Skills.map(m => new TemplatePerk(\"custom \"+m.name+\" 30\", m.name,30));\n    const generic40All = Skills.map(m => new TemplatePerk(\"custom \"+m.name+\" 40\", m.name,40));\n    return [\n        ...generic10All,\n        ...generic20All,\n        ...generic30All,\n        ...generic40All,\n        new PerkTemplate({ ...gun1 }),\n        new PerkTemplate({ ...gun2 }),\n        new PerkTemplate({ ...gun3 }),\n        new PerkTemplate({ ...gun4 }),\n        \n    ].sort(sortPerk);\n}\n\nconst sortPerk = (prevPerk:Perk, nextPerk:Perk) => {\n    if (prevPerk.skill !== nextPerk.skill) return prevPerk.skill > nextPerk.skill ? 1 : -1;\n    else return prevPerk.cost > nextPerk.cost ? 1 : -1;\n};","import React, { useReducer,useState } from 'react';\nimport { Field } from './Field';\nimport { Paper, Grid, Button } from '@material-ui/core';\nimport { Character } from './Character';\nimport { GetPerkList, Perk } from './Perks';\n\ninterface CharacterSheetProps {\n    initialCharacter: Character;\n    characterCallback: (c: Character) => void;\n}\n\nexport const CharacterSheet: React.FC<CharacterSheetProps> = (props) => {\n    const [character, dispatch] = useReducer(useCharacter, props.initialCharacter);\n    const [charJSON, setCharJSON] = useState('');\n    const [edit, setEdit] = useState(false);\n\n    const perksList = GetPerkList();\n\n    const makeJSONText = () => {\n        const json = JSON.stringify({...character});\n        setCharJSON(json);\n    };\n\n    return <Paper style={{ textAlign: 'left' }}>\n        <Button onClick={() => props.characterCallback(character)}>exit</Button>\n        {charJSON !== '' ? <Button onClick={() => setCharJSON('')}>Close character data</Button> : null}\n        <Button onClick={() => makeJSONText()}>Save character data</Button>\n        <Button onClick={() => setEdit(!edit)}>edit</Button>\n        <Paper>{charJSON}</Paper>\n        <Grid container spacing={3} >\n            <Grid item xs={12} sm={6}>\n                Character points used {character.getCalculatedPointsUsed()} / {character.getStartingPointsAvailable()} ({character.getMaximumPointsAvailable()})\n                <Field enableButtons={edit} max={15} label='strength' value={character.strength} onChange={n => dispatch({ action: 'strength', value: n })}>Raw muscle strength</Field>\n                <Field enableButtons={edit} max={15} label='agility' value={character.agility} onChange={n => dispatch({ action: 'agility', value: n })}>Steady hands, reflexes</Field>\n                <Field enableButtons={edit} max={15} label='endurance' value={character.endurance} onChange={n => dispatch({ action: 'endurance', value: n })}>Ability to last long</Field>\n                <Field enableButtons={edit} max={15} label='perception' value={character.perception} onChange={n => dispatch({ action: 'perception', value: n })}>eyesight, hearing, and how much you smell</Field>\n                <Field enableButtons={edit} max={15} label='willpower' value={character.willpower} onChange={n => dispatch({ action: 'willpower', value: n })}>ability to say \"no\" when it's sooo good</Field>\n                <Field enableButtons={edit} max={15} label='intelligence' value={character.intelligence} onChange={n => dispatch({ action: 'intelligence', value: n })}>big brainy boy</Field>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n                <Field enableButtons={edit} label='age' max={90} min={15} value={character.age} onChange={n => dispatch({ action: 'age', value: n })}>Your age determines your starting, maximum experience, as well as experience multiplier</Field>\n                <Paper>Experience multiplier: {character.getExperienceMultiplier()}</Paper>\n                <Paper>Hit points: {character.getHitpoints()}</Paper>\n                <Paper>mana: {character.getMana()}</Paper>\n                <Paper>damage bonus small: {character.getDamageBonusSmall()}</Paper>\n                <Paper>damage bonus medium: {character.getDamageBonusMedium()}</Paper>\n                <Paper>damage bonus large: {character.getDamageBonusLarge()}</Paper>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n                {character.skills.map(s => {\n                    let modifier: number = 0;\n                    switch (s.attribute) {\n                        case 'strength': modifier = character.strength; break;\n                        case 'agility': modifier = character.agility; break;\n                        case 'endurance': modifier = character.endurance; break;\n                        case 'perception': modifier = character.perception; break;\n                        case 'willpower': modifier = character.willpower; break;\n                        case 'intelligence': modifier = character.intelligence; break;\n                    }\n                    return <Field\n                        enableButtons={edit} \n                        modifier={modifier}\n                        max={40}\n                        min={0}\n                        label={s.name + ' ' + s.attribute.substring(0, 3).toUpperCase()}\n                        value={s.level}\n                        onChange={(n => dispatch({ action: 'skill', name: s.name, value: n }))}>\n                        {s.description}\n                        {perksList.filter(p => p.skill === s.name).map(p => {\n                            return <Button onClick={() => dispatch({ action: 'addperk', name: p.name, value: 0, perkToAdd: p })}>{p.name}</Button>;\n                        })}\n                    </Field>\n                })}\n            </Grid>\n            <Grid item xs={12} sm={6}>\n                <h1>Perks</h1>\n                {character.perks.map(perk => {\n                    return (<p><b>{perk.name}</b> ({perk.cost}) {perk.description()}\n                        <Button size=\"small\" onClick={() => dispatch({action:'removeperk', name:perk.name, value:0, perkToAdd: perk})}>X</Button>\n                    </p>)\n                })}\n            </Grid>\n        </Grid>\n    </Paper>;\n}\n\ninterface dispatcher {\n    action: string;\n    name?: string;\n    value: number;\n    perkToAdd?: Perk;\n}\n\nconst useCharacter = (state: Character, action: dispatcher): Character => {\n    switch (action.action) {\n        case 'strength': return new Character({ ...state, strength: action.value });\n        case 'agility': return new Character({ ...state, agility: action.value });\n        case 'endurance': return new Character({ ...state, endurance: action.value });\n        case 'willpower': return new Character({ ...state, willpower: action.value });\n        case 'perception': return new Character({ ...state, perception: action.value });\n        case 'intelligence': return new Character({ ...state, intelligence: action.value });\n        case 'age': return new Character({ ...state, age: action.value });\n        case 'skill':\n            let r = new Character({\n                ...state\n            });\n            r.skills[state.skills.findIndex(s => s.name === action.name)].level = action.value;\n            return r;\n    }\n    if (action.action === 'addperk') {\n        let r = new Character({\n            ...state\n        });\n        if (action.perkToAdd !== undefined) r.perks.push(action.perkToAdd);\n        return r;\n    }\n    else if (action.action === 'removeperk') {\n        let r = new Character({\n            ...state\n        });\n        if (action.perkToAdd !== undefined) {\n            let pta = action.perkToAdd;\n            r.perks = r.perks.filter(p => p.name !== pta.name);\n        }\n        return r;\n    }\n\n\n    return state;\n}","import React from 'react';\n\nconst PlayerManual: React.FC = () => {\n    return (<div>\n        <h1>Index</h1>\n        <ul>\n            <li>\n                How to make a character\n            </li>\n            <li>\n                Attributes\n            </li>\n            <li>\n                Skills\n            </li>\n            <li>\n                Perks\n            </li>\n        </ul>\n        <hr />\n        <div>\n            <h2>How to make a character</h2>\n            <h3>Step 1 - concept</h3>\n            <p>The first step is conceptual and mostly abstract, but will feed into the next steps. Begin by answering at least all of these questions.</p>\n            <h4>Where was my character born?</h4>\n            <h4>How old is my character currently?</h4>\n            <h4>What kind of upbringing did my character have?</h4>\n            <h4>How does my character's upbringing bias my character's point of view?</h4>\n            <h4>What major events happened in my characters life?</h4>\n            <h4>How did those events shape my characters personality?</h4>\n            <h4>What lessons and skills did my character learn from that?</h4>\n            <p>There may be more questions you want to ask depending on your answers.</p>\n            <h3>Step 2 - outlining your character</h3>\n            <p>Based on the answer in step 1...</p>\n            <h4>Adjust your age</h4>\n            <p>The older you start at the more character points (applicable experience) you start with.</p>\n            <p>Finally the younger you are the bigger your multiplier, whenever you gain character points in game you multiply them by this.</p>\n            <p>You also have a maximum character point ceiling, this is based off your current age and you can not exceed it</p>\n            <h4>Adjust your attributes</h4>\n            <p>They are as expensive as they are valuable. Choose with care. Save points for skills and perks</p>\n            <h4>Select between 2 and 4 \"main skills\" and as many additional secondary skills as you need.</h4>\n            <p>You'll want to put points into your main skills, note that the cost increases rapidly.\n                The cost for each step is what you have + 1\n                Save some character points for perks</p>\n            <p>Also notice that your attributes play a part in your skill total,\n                for example pilot is a perception skill,\n                when you roll for pilot you roll 2d10 + pilot + perception</p>\n            <h3>Step 3 - choose your perks</h3>\n            <p>Perks are specializations, they either grant new capabilities under a skill or make a specific skill usage more powerful/likely to succeed (skills have multiple uses)</p>\n            <p>Note that perks often come with skill requirements, and for skills that you don't put points into are often not worth taking.</p>\n        </div>\n    </div>);\n}\n\n\nexport default PlayerManual;","import React, { useState } from 'react';\nimport { GetSkillList } from './Skills';\nimport { Button } from '@material-ui/core';\nimport { GetPerkList } from './Perks';\n\nconst SkillPerkManual:React.FC = () => {\n    return <div>\n            <SkillSection />\n            <PerkSection />\n        </div>;\n}\n\nconst SkillSection = () => {\n    const [currentSkill, setCurrentSkill] = useState('');\n    return (<div>\n        <h2>Skills</h2>\n        {GetSkillList().map(skill => {\n            return (<div><h3><span style={{ display: 'inline-block', width: '200px' }}>{skill.name}</span> {currentSkill !== skill.name ?\n                <Button onClick={() => setCurrentSkill(skill.name)}>?</Button> :\n                <Button onClick={() => setCurrentSkill('')}>X</Button>} </h3>\n                {currentSkill === skill.name ? <div>{skill.description}</div> : null}</div>);\n        })}\n    </div>);\n}\n\nconst PerkSection = () => {\n    const [currentPerk, setCurrentPerk] = useState('');\n    return (<div>\n        <h2>Perks</h2>\n        {GetPerkList().map(perk => {\n            return (<div>\n                <h3><span style={{ display: 'inline-block', width: '200px' }}>{perk.name}</span> {currentPerk !== perk.name ?\n                <Button onClick={() => setCurrentPerk(perk.name)}>?</Button> :\n                <Button onClick={() => setCurrentPerk('')}>X</Button>} </h3>\n                {currentPerk === perk.name ? <div>\n                    <p><b>Cost</b>: {perk.cost}</p>\n                    <p><b>Skill</b>: {perk.skill}</p>\n                {perk.description()}</div> : null}\n            </div>);\n        })}\n    </div>)\n}\n\nexport default SkillPerkManual;","import React from 'react';\n\nconst WorldAndLore: React.FC = () => {\n    return (<div>\n        <h1>World and Lore</h1>\n        <h2>Index</h2>\n        <h3>History</h3>\n        <History></History>\n    </div>);\n}\n\n\nconst History: React.FC = () => {\n    return <>\n    <h2>History</h2>\n    <p>\n        This section outlines the major events that shaped the world of Infinite Darkness\n    </p>\n    <HistorySection title='2039'>First permanent moon base</HistorySection>\n    <HistorySection title='2046'>First human on Mars</HistorySection>\n    <HistorySection title='2052'>First human on Ceres</HistorySection>\n    <HistorySection title='2072'>Most of solar system colonized</HistorySection>\n    <HistorySection title='2091'>First contact with Merlion, Deal with humans and merlions to colonize Mars if they help terraform</HistorySection>\n    <HistorySection title='2121'>Humans reverse engineer Merlion FTL technology</HistorySection>\n    <HistorySection title='2123'>Merlions explain their origins</HistorySection>\n    <HistorySection title='2137'>Mars declares independence</HistorySection>\n    <HistorySection title='2139'>Ceres, Titan, Europa and many other planets declare independence</HistorySection>\n    <HistorySection title='2151'>Exotic Negamatter Factory goes online</HistorySection>\n    <HistorySection title='2156'>Humans create first warp bubble in lab</HistorySection>\n    <HistorySection title='2162'>Humans build first FTL vessel</HistorySection>\n    <HistorySection title='2174'>Coalition of Sol is formed</HistorySection>\n    <HistorySection title='2182'>Humans leave solar system in FTL vessel for the first time</HistorySection>\n    <HistorySection title='2184'>Humans visit the Centauri (a trinary system) system</HistorySection>\n    <HistorySection title='2190'>Humans establish permanent presence in Centauri system</HistorySection>\n    <HistorySection title='2201'>Humans colonize planet in Centauri system, dubbed Nefertiti</HistorySection>\n    <HistorySection title='2229'>Most of planets in the Centauri system are colonized or have permanent presence</HistorySection>\n    <HistorySection title='2240'>Humans make first contact with Klackon in interstellar space</HistorySection>\n    <HistorySection title='2257'>Marks the date when half of humanity lives outside of the planet Earth</HistorySection>\n    <HistorySection title='2261'>Centauri system declares independence from the Coalition of Sol</HistorySection>\n    <HistorySection title='2284'>Humans encounter Merlions in deep space for the first time</HistorySection>\n    <HistorySection title='2296'>Humans are welcome in the Klackon home world</HistorySection>\n    <HistorySection title='2301'>Sol and Centauri cold war begins</HistorySection>\n    <HistorySection title='2317'>Humans discover ancient ruins on distant planet (named Agros) from unknown alien lifeform</HistorySection>\n    <HistorySection title='2327'>Humanity now live on planets from 17 star systems</HistorySection>\n    <HistorySection title='2328'>Planet Agros is destroyed</HistorySection>\n    </>\n}\ninterface IHistorySection {\n    title:String;\n}\nconst HistorySection: React.FC<IHistorySection> = ({title, children}) => {\nreturn <><h4>Year {title}</h4><p>{children}</p></>\n}\n\nexport default WorldAndLore;","import React, { useState } from 'react';\nimport { CharacterSheet } from './components/CharacterSheet';\nimport './App.css';\nimport { Character, ICharacter } from './components/Character';\nimport { Button, DialogTitle } from '@material-ui/core';\nimport PlayerManual from './components/PlayerManual';\nimport SkillPerkManual from './components/SkillPerkManual';\nimport GameMaster from './components/WorldAndLore';\nimport WorldAndLore from './components/WorldAndLore';\n\nconst App: React.FC = () => {\n  const main = 'main';\n  const [viewMode, setViewMode] = useState(main);\n  const [character, setCharacter ] = useState(new Character());//new Character();\n  const characterSheet = 'View Character Sheet';\n  const playerManual = 'Player Manual';\n  const gameMaster = 'Game Master';\n  const worldAndLore = 'World and Lore';\n  const skillsAndPerks = 'Skills and Perks';\n  const about = 'About';\n  let options = [characterSheet,\n    playerManual,\n    gameMaster,\n    worldAndLore,\n    skillsAndPerks,\n    about\n  ];\n  const MainButton = () => <Button onClick={() => setViewMode('main')}>EXIT</Button>;\n\n  const loadCharacter = () => {\n    try {\n      console.info('attempting to load character');\n      const charData = prompt('paste character string here');\n      if (charData !== null)\n      {\n        const c = JSON.parse(charData) as ICharacter;\n        setCharacter(new Character({...c}));\n        setViewMode(characterSheet);\n        console.log('character was successfully loaded:', {...c});\n      } else console.log('no character info was pasted');\n    }\n    catch(error) {\n      console.error({error});\n    }\n  };\n\n\n  return (\n    <div className=\"App\">\n      <Conditional shouldView={viewMode === main}>\n        <DialogTitle>Infinite Darkness</DialogTitle>\n        <Menu callback={(option) => setViewMode(option)} options={options} />\n        <Button onClick={() => loadCharacter()}>Load Character</Button>\n      </Conditional>\n      <Conditional shouldView={viewMode === characterSheet}>\n        <CharacterSheet characterCallback={(c) => { setCharacter(c); setViewMode('main'); }} initialCharacter={character} />\n      </Conditional>\n      <Conditional shouldView={viewMode === playerManual}>\n        <MainButton />\n        <DialogTitle>Player manual</DialogTitle>\n        <PlayerManual />\n      </Conditional>\n      <Conditional shouldView={viewMode === gameMaster}>\n        <MainButton />\n        <GameMaster></GameMaster>\n      </Conditional>\n      <Conditional shouldView={viewMode === worldAndLore}>\n        <MainButton />\n        <WorldAndLore></WorldAndLore>\n      </Conditional>\n      <Conditional shouldView={viewMode === skillsAndPerks}>\n        <MainButton />\n        <DialogTitle>About</DialogTitle>\n        <SkillPerkManual />\n      </Conditional>\n      <Conditional shouldView={viewMode === about}>\n        <MainButton />\n        <h2>About</h2>\n        <h3>This is a work in progress</h3>\n        <p>Author: Thorvaldur Saemundsson</p>\n        <p>Technology: ReactJS, github pages</p>\n        <p>Project: Infinite Darkness, a sci-fi and fantasy game</p>\n        <p>Please formulate any complaints and suggestions in the form of a pull request ;)</p>\n        <span style={{ float: 'right', fontSize: '11px' }}>Copyright Thorvaldur Saemundsson</span>\n      </Conditional>\n    </div>\n  );\n}\ninterface ItemProp {\n  shouldView: boolean;\n}\n\nconst Conditional: React.FC<ItemProp> = ({ shouldView, children }) => {\n  if (shouldView) return <div style={{ textAlign: 'left', padding: '15px' }}>{children}</div>;\n  else return null;\n}\n\ninterface MenuProps {\n  callback: (option: string) => void;\n  options: string[];\n}\n\nconst Menu: React.FC<MenuProps> = (props) => {\n  return <div>{props.options.map(option => <Button onClick={() => props.callback(option)}>{option}</Button>)}</div>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}