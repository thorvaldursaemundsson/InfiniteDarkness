{"version":3,"sources":["components/Label.tsx","components/Field.tsx","components/Skills.tsx","components/Character.tsx","components/CharacterSheet.tsx","components/PlayerManual.tsx","components/Perks.tsx","components/SkillPerkManual.tsx","components/WorldAndLore.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Label","children","style","display","minWidth","d10","min","max","Math","round","random","Field","label","value","onChange","modifier","enableDice","useState","results","setResults","viewChildren","setViewChildren","ma","undefined","mi","total","Paper","className","Button","size","variant","onClick","GetSkillList","combat","pilot","spells","investigation","persuation","intimidation","larceny","stealth","survival","science","computer","medicine","surgery","empathy","subtrefuge","athletics","acrobatics","search","slightOfHand","sort","a","b","attribute","fSum","n","x","i","Character","copy","age","strength","agility","endurance","perception","willpower","intelligence","skills","techniques","this","map","s","level","reduce","p","getStartingPointsAvailable","floor","CharacterSheet","props","useReducer","useCharacter","initialCharacter","character","dispatch","textAlign","characterCallback","Grid","container","spacing","item","xs","sm","getCalculatedPointsUsed","getMaximumPointsAvailable","action","getExperienceMultiplier","getHitpoints","getMana","getDamageBonusSmall","getDamageBonusMedium","getDamageBonusLarge","name","substring","toUpperCase","description","state","r","findIndex","PlayerManual","sortPerk","prevPerk","nextPerk","skill","cost","SkillSection","currentSkill","setCurrentSkill","width","PerkSection","currentPerk","setCurrentPerk","gun1","gun2","gun3","gun4","perk","SkillPerkManual","WorldAndLore","Conditional","shouldView","padding","Menu","options","option","callback","App","viewMode","setViewMode","MainButton","DialogTitle","c","float","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8e9c22e7.chunk.js","sourcesContent":["    import React from 'react';\n\nexport const Label: React.FC<{}> = ({children}) => {\n    return <label style={{display:'inline-block', minWidth:'140px'}}>{children}</label>;\n}\n\n","import React, { useState } from 'react';\nimport { Paper, Button } from '@material-ui/core';\nimport { Label } from './Label';\n\ninterface FieldProps {\n    label: string;\n    value: number;\n    max?: number;\n    min?: number;\n    modifier?: number;\n    enableDice?: boolean;\n    onChange: (n: number) => void;\n}\n\n\nconst rand = (min: number, max: number) => {\n    return Math.round(Math.random() * (max - min) + min);\n};\n\nconst d10 = () => rand(1, 10);\nexport const Field: React.FC<FieldProps> = ({ label, value, onChange, max, min, modifier, enableDice, children }) => {\n    const [results, setResults] = useState([0, 0]);\n    const [viewChildren, setViewChildren] = useState(false);\n    let ma = max !== undefined ? max : 10;\n    let mi = min !== undefined ? min : 1;\n    let total = modifier !== undefined ? value + modifier : value;\n    enableDice = enableDice === undefined ? false : enableDice;\n    return <Paper className=\"extraPadding\">\n        <Label>{label}:</Label> <Label>{value} {modifier !== undefined ? ` | ${modifier} | ${total}` : null}</Label>\n        <Button size=\"small\" variant=\"contained\" onClick={() => onChange(ma <= value ? value : value + 1)}>+</Button>\n        <Button size=\"small\" variant=\"contained\" onClick={() => onChange(mi >= value ? value : value - 1)}>-</Button>\n        {enableDice ? <Button  size=\"small\" variant=\"contained\" onClick={() => setResults([d10(), d10()])}>&</Button> : null}\n        {results[0] !== 0 ? `(${total}) + d10(${results[0]}) + d10(${results[1]}) = ${total + results[0] + results[1]}`\n            : null}\n            {children !== undefined ? viewChildren === true ? \n                <Paper><Button size=\"small\" variant=\"contained\"  onClick={() => setViewChildren(false)}>X</Button>{children} </Paper>\n                : <Button size=\"small\" variant=\"contained\"  onClick={() => setViewChildren(true)}>?</Button> \n            : null}\n    </Paper>\n}","import combat from './skills/combat.json';\nimport pilot from './skills/pilot.json';\nimport spells from './skills/spells.json';\nimport investigation from './skills/investigation.json';\nimport intimidation from './skills/intimidation.json';\nimport larceny from './skills/larceny.json';\nimport stealth from './skills/stealth.json';\nimport survival from './skills/survival.json';\nimport science from './skills/science.json';\nimport computer from './skills/computer.json';\nimport medicine from './skills/medicine.json';\nimport surgery from './skills/surgery.json';\nimport empathy from './skills/empathy.json';\nimport subtrefuge from './skills/subtrefuge.json';\nimport athletics from './skills/athletics.json';\nimport acrobatics from './skills/acrobatics.json';\nimport search from './skills/search.json';\nimport slightOfHand from './skills/slightOfHand.json';\nimport persuation from './skills/persuation.json';\n\n\nexport interface Skill {\n    name: string;\n    attribute: string | 'strength' | 'agility' | 'endurance' | 'perception' | 'willpower' | 'intelligence';\n    level: number;\n    description: string;\n}\nexport const GetSkillList = (): Skill[] => {\n    return [\n        { ...combat },\n        { ...pilot },\n        { ...spells },\n        { ...investigation },\n        { ...persuation },\n        { ...intimidation },\n        { ...larceny },\n        { ...stealth },\n        {  ...survival },\n        { ...science },\n        { ...computer },\n        { ...medicine },\n        { ...surgery },\n        { ...empathy },\n        { ...subtrefuge },\n        { ...athletics },\n        { ...acrobatics },\n        { ...search },\n        {  ...slightOfHand }\n    ].sort((a, b) => a.attribute < b.attribute ? -1 : 1);\n}","import { Skill, GetSkillList } from \"./Skills\";\n\ninterface Perk {\n    name: string;\n    bonus: string;\n    cost: number;\n}\n\nconst fSum = (n: number): number => {\n    let x = 0;\n    for (let i = 0; i <= n; i++) {\n        x += i;\n    }\n    return x;\n};\n\ninterface ICharacter {\n\n    age: number;\n    strength: number;\n    agility: number;\n    endurance: number;\n    perception: number;\n    willpower: number;\n    intelligence: number;\n    skills: Skill[];\n    techniques: Perk[];\n}\n\nexport class Character {\n    age: number;\n    strength: number;\n    agility: number;\n    endurance: number;\n    perception: number;\n    willpower: number;\n    intelligence: number;\n    skills: Skill[];\n    techniques: Perk[];\n    constructor(copy?: ICharacter) {\n        this.strength = (copy && copy.strength) || 4;\n        this.agility = (copy && copy.agility) || 4;\n        this.endurance = (copy && copy.endurance) || 4;\n        this.perception = (copy && copy.perception) || 4;\n        this.willpower = (copy && copy.willpower) || 4;\n        this.intelligence = (copy && copy.intelligence) || 4;\n        this.skills = (copy && copy.skills) || GetSkillList();\n        this.techniques = [];\n        this.age = (copy && copy.age) || 24;\n    }\n\n\n    public getCalculatedPointsUsed() {\n        return fSum(this.strength) * 4\n            + fSum(this.agility) * 4\n            + fSum(this.endurance) * 4\n            + fSum(this.perception) * 4\n            + fSum(this.willpower) * 4\n            + fSum(this.intelligence) * 4\n            + this.skills.map(s => fSum(s.level)).reduce((a, b) => a + b, 0);\n    }\n    public getStartingPointsAvailable() {\n        let p = 300;\n        p += Math.min(this.age, 18) * 16;\n        if (this.age > 18) p += Math.min(this.age - 18, 26 - 18) * 12;\n        if (this.age > 26) p += Math.min(this.age - 26, 40 - 26) * 8;\n        if (this.age > 40) p += Math.min(this.age - 40, 70 - 40) * 4;\n        return p;\n    }\n\n    public getMaximumPointsAvailable() {\n        return this.getStartingPointsAvailable() * 2;\n    }\n\n    public getExperienceMultiplier() {\n        if (this.age < 16) return 3;\n        if (this.age < 20) return 2.5;\n        if (this.age < 24) return 2;\n        if (this.age < 28) return 1.75;\n        if (this.age < 32) return 1.5;\n        if (this.age < 36) return 1.25;\n        return 1;\n    }\n\n    public getHitpoints() {\n        return this.strength + this.endurance * 2;\n    }\n\n    public getMana() {\n        return this.endurance + this.willpower * 2\n    }\n\n    public getDamageBonusSmall() {\n        return Math.floor(this.strength / 4);\n    }\n\n    public getDamageBonusMedium() {\n        return Math.floor(this.strength / 3);\n    }\n    public getDamageBonusLarge() {\n        return Math.floor(this.strength / 2);\n    }\n}","import React, {  useReducer } from 'react';\nimport { Field } from './Field';\nimport { Paper, Grid,Button } from '@material-ui/core';\nimport { Character } from './Character';\n\ninterface CharacterSheetProps {\n    initialCharacter: Character;\n    characterCallback:(c:Character) => void;\n}\n\nexport const CharacterSheet: React.FC<CharacterSheetProps> = (props) => {\n    const [character, dispatch] = useReducer(useCharacter, props.initialCharacter);\n\n    return <Paper style={{ textAlign: 'left' }}>\n        <Button onClick={() => props.characterCallback(character)}>exit</Button>\n        <Grid container spacing={3} >\n            <Grid item xs={12} sm={6}>\n                Character points used {character.getCalculatedPointsUsed()} / {character.getStartingPointsAvailable()} ({character.getMaximumPointsAvailable()})\n                <Field max={15} label='strength' value={character.strength} onChange={n => dispatch({ action: 'strength', value: n })}>Raw muscle strength</Field>\n                <Field max={15} label='agility' value={character.agility} onChange={n => dispatch({ action: 'agility', value: n })}>Steady hands, reflexes</Field>\n                <Field max={15} label='endurance' value={character.endurance} onChange={n => dispatch({ action: 'endurance', value: n })}>Ability to last long</Field>\n                <Field max={15} label='perception' value={character.perception} onChange={n => dispatch({ action: 'perception', value: n })}>eyesight, hearing, and how much you smell</Field>\n                <Field max={15} label='willpower' value={character.willpower} onChange={n => dispatch({ action: 'willpower', value: n })}>ability to say \"no\" when it's sooo good</Field>\n                <Field max={15} label='intelligence' value={character.intelligence} onChange={n => dispatch({ action: 'intelligence', value: n })}>big brainy boy</Field>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n                <Field label='age' max={90} min={15} value={character.age} onChange={n => dispatch({ action: 'age', value: n })}>Your age determines your starting, maximum experience, as well as experience multiplier</Field>\n                <Paper>Experience multiplier: {character.getExperienceMultiplier()}</Paper>\n                <Paper>Hit points: {character.getHitpoints()}</Paper>\n                <Paper>mana: {character.getMana()}</Paper>\n                <Paper>damage bonus small: {character.getDamageBonusSmall()}</Paper>\n                <Paper>damage bonus medium: {character.getDamageBonusMedium()}</Paper>\n                <Paper>damage bonus large: {character.getDamageBonusLarge()}</Paper>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n                {character.skills.map(s => {\n                    let modifier: number = 0;\n                    switch (s.attribute) {\n                        case 'strength': modifier = character.strength; break;\n                        case 'agility': modifier = character.agility; break;\n                        case 'endurance': modifier = character.endurance; break;\n                        case 'perception': modifier = character.perception; break;\n                        case 'willpower': modifier = character.willpower; break;\n                        case 'intelligence': modifier = character.intelligence; break;\n                    }\n                    return <Field\n                        modifier={modifier}\n                        max={40}\n                        min={0}\n                        label={s.name + ' ' + s.attribute.substring(0, 3).toUpperCase()} \n                        value={s.level} \n                        onChange={(n => dispatch({ action: 'skill', name: s.name, value: n }))}>\n                           {s.description} \n                    </Field>\n                })}\n            </Grid>\n        </Grid>\n    </Paper>;\n}\n\ninterface dispatcher {\n    action: string;\n    name?: string;\n    value: number;\n}\n\nconst useCharacter = (state: Character, action: dispatcher): Character => {\n    switch (action.action) {\n        case 'strength': return new Character({ ...state, strength: action.value });\n        case 'agility': return new Character({ ...state, agility: action.value });\n        case 'endurance': return new Character({ ...state, endurance: action.value });\n        case 'willpower': return new Character({ ...state, willpower: action.value });\n        case 'perception': return new Character({ ...state, perception: action.value });\n        case 'intelligence': return new Character({ ...state, intelligence: action.value });\n        case 'age': return new Character({ ...state, age: action.value });\n        case 'skill':\n            let r = new Character({\n                ...state\n            });\n            r.skills[state.skills.findIndex(s => s.name === action.name)].level = action.value;\n            return r;\n    }\n    return state;\n}","import React from 'react';\n\nconst PlayerManual: React.FC = () => {\n    return (<div>\n        <h1>Index</h1>\n        <ul>\n            <li>\n                How to make a character\n            </li>\n            <li>\n                Attributes\n            </li>\n            <li>\n                Skills\n            </li>\n            <li>\n                Perks\n            </li>\n        </ul>\n        <hr />\n        <div>\n            <h2>How to make a character</h2>\n            <h3>Step 1 - concept</h3>\n            <p>The first step is conceptual and mostly abstract, but will feed into the next steps. Begin by answering at least all of these questions.</p>\n            <h4>Where was my character born?</h4>\n            <h4>How old is my character currently?</h4>\n            <h4>What kind of upbringing did my character have?</h4>\n            <h4>How does my character's upbringing bias my character's point of view?</h4>\n            <h4>What major events happened in my characters life?</h4>\n            <h4>How did those events shape my characters personality?</h4>\n            <h4>What lessons and skills did my character learn from that?</h4>\n            <p>There may be more questions you want to ask depending on your answers.</p>\n            <h3>Step 2 - outlining your character</h3>\n            <p>Based on the answer in step 1...</p>\n            <h4>Adjust your age</h4>\n            <p>The older you start at the more character points (applicable experience) you start with.</p>\n            <p>Finally the younger you are the bigger your multiplier, whenever you gain character points in game you multiply them by this.</p>\n            <p>You also have a maximum character point ceiling, this is based off your current age and you can not exceed it</p>\n            <h4>Adjust your attributes</h4>\n            <p>They are as expensive as they are valuable. Choose with care. Save points for skills and perks</p>\n            <h4>Select between 2 and 4 \"main skills\" and as many additional secondary skills as you need.</h4>\n            <p>You'll want to put points into your main skills, note that the cost increases rapidly.\n                The cost for each step is what you have + 1\n                Save some character points for perks</p>\n            <p>Also notice that your attributes play a part in your skill total,\n                for example pilot is a perception skill,\n                when you roll for pilot you roll 2d10 + pilot + perception</p>\n            <h3>Step 3 - choose your perks</h3>\n            <p>Perks are specializations, they either grant new capabilities under a skill or make a specific skill usage more powerful/likely to succeed (skills have multiple uses)</p>\n            <p>Note that perks often come with skill requirements, and for skills that you don't put points into are often not worth taking.</p>\n        </div>\n    </div>);\n}\n\n\nexport default PlayerManual;","import gun1 from './perks/gun1.json';\nimport gun2 from './perks/gun2.json';\nimport gun3 from './perks/gun3.json';\nimport gun4 from './perks/gun4.json';\n\n\nexport interface Perk {\n    name: string;\n    skill: string;\n    cost: number;\n    description: string;\n}\nexport const GetPerkList = (): Perk[] => {\n    return [\n        { ...gun1 },\n        { ...gun2 },\n        { ...gun3 },\n        { ...gun4 },\n        \n    ].sort(sortPerk);\n}\n\nconst sortPerk = (prevPerk:Perk, nextPerk:Perk) => {\n    if (prevPerk.skill !== nextPerk.skill) return prevPerk.skill > nextPerk.skill ? 1 : -1;\n    else return prevPerk.cost > nextPerk.cost ? 1 : -1;\n};","import React, { useState } from 'react';\nimport { GetSkillList } from './Skills';\nimport { Button } from '@material-ui/core';\nimport { GetPerkList } from './Perks';\n\nconst SkillPerkManual:React.FC = () => {\n    return <div>\n            <SkillSection />\n            <PerkSection />\n        </div>;\n}\n\nconst SkillSection = () => {\n    const [currentSkill, setCurrentSkill] = useState('');\n    return (<div>\n        <h2>Skills</h2>\n        {GetSkillList().map(skill => {\n            return (<div><h3><span style={{ display: 'inline-block', width: '200px' }}>{skill.name}</span> {currentSkill !== skill.name ?\n                <Button onClick={() => setCurrentSkill(skill.name)}>?</Button> :\n                <Button onClick={() => setCurrentSkill('')}>X</Button>} </h3>\n                {currentSkill === skill.name ? <div>{skill.description}</div> : null}</div>);\n        })}\n    </div>);\n}\n\nconst PerkSection = () => {\n    const [currentPerk, setCurrentPerk] = useState('');\n    return (<div>\n        <h2>Perks</h2>\n        {GetPerkList().map(perk => {\n            return (<div>\n                <h3><span style={{ display: 'inline-block', width: '200px' }}>{perk.name}</span> {currentPerk !== perk.name ?\n                <Button onClick={() => setCurrentPerk(perk.name)}>?</Button> :\n                <Button onClick={() => setCurrentPerk('')}>X</Button>} </h3>\n                {currentPerk === perk.name ? <div>\n                    <p><b>Cost</b>: {perk.cost}</p>\n                    <p><b>Skill</b>: {perk.skill}</p>\n                {perk.description}</div> : null}\n            </div>);\n        })}\n    </div>)\n}\n\nexport default SkillPerkManual;","import React from 'react';\n\nconst WorldAndLore: React.FC = () => {\n    return (<div>\n        <h1>World and Lore</h1>\n    </div>);\n}\n\n\nexport default WorldAndLore;","import React, { useState } from 'react';\nimport { CharacterSheet } from './components/CharacterSheet';\nimport './App.css';\nimport { Character } from './components/Character';\nimport { Button, DialogTitle } from '@material-ui/core';\nimport PlayerManual from './components/PlayerManual';\nimport SkillPerkManual from './components/SkillPerkManual';\nimport GameMaster from './components/WorldAndLore';\nimport WorldAndLore from './components/WorldAndLore';\n\nconst App: React.FC = () => {\n  const [viewMode, setViewMode] = useState('main');\n  let character = new Character();\n  let options = ['view character sheet',\n    'player manual',\n    'game master',\n    'world & lore',\n    'skills & perks',\n    'about'];\n  const MainButton = () => <Button onClick={() => setViewMode('main')}>EXIT</Button>;\n  return (\n    <div className=\"App\">\n      <Conditional shouldView={viewMode === 'main'}>\n        <DialogTitle>Infinite Darkness</DialogTitle>\n        <Menu callback={(option) => setViewMode(option)} options={options} />\n      </Conditional>\n      <Conditional shouldView={viewMode === 'view character sheet'}>\n        <CharacterSheet characterCallback={(c) => { character = c; setViewMode('main'); }} initialCharacter={character} />\n      </Conditional>\n      <Conditional shouldView={viewMode === 'player manual'}>\n        <MainButton />\n        <DialogTitle>Player manual</DialogTitle>\n        <PlayerManual />\n      </Conditional>\n      <Conditional shouldView={viewMode === 'game master'}>\n        <MainButton />\n        <GameMaster></GameMaster>\n      </Conditional>\n      <Conditional shouldView={viewMode === 'world & lore'}>\n        <MainButton />\n        <WorldAndLore></WorldAndLore>\n      </Conditional>\n      <Conditional shouldView={viewMode === 'skills & perks'}>\n        <MainButton />\n        <DialogTitle>About</DialogTitle>\n        <SkillPerkManual />\n      </Conditional>\n      <Conditional shouldView={viewMode === 'about'}>\n        <MainButton />\n        <h2>About</h2>\n        <h3>This is a work in progress</h3>\n        <p>Author: Thorvaldur Saemundsson</p>\n        <p>Technology: ReactJS, github pages</p>\n        <p>Project: Infinite Darkness, a sci-fi and fantasy game</p>\n        <p>Please formulate any complaints and suggestions in the form of a pull request ;)</p>\n        <span style={{ float: 'right', fontSize: '11px' }}>Copyright Thorvaldur Saemundsson</span>\n      </Conditional>\n    </div>\n  );\n}\ninterface ItemProp {\n  shouldView: boolean;\n}\n\nconst Conditional: React.FC<ItemProp> = ({ shouldView, children }) => {\n  if (shouldView) return <div style={{ textAlign: 'left', padding: '15px' }}>{children}</div>;\n  else return null;\n}\n\ninterface MenuProps {\n  callback: (option: string) => void;\n  options: string[];\n}\n\nconst Menu: React.FC<MenuProps> = (props) => {\n  return <div>{props.options.map(option => <Button onClick={() => props.callback(option)}>{option}</Button>)}</div>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}