{"version":3,"sources":["components/playermanual/Section.tsx","components/Indexer.tsx","components/Lore/CharacterRoller.tsx","components/Ellipsis.tsx","components/playermanual/Experience.tsx","components/playermanual/MakeCharacter.tsx","components/playermanual/Combat.tsx","components/equipment/Firearms.ts","components/equipment/MeleeWeapons.ts","components/equipment/Armors.ts","components/playermanual/Equipment.tsx","components/playermanual/Wealth.tsx","components/playermanual/Vehicles.tsx","components/playermanual/CharacterSheetOverview.tsx","views/PlayerManual.tsx"],"names":["Section","title","tab","border","children","useState","isOpen","setIsOpen","tabSize","undefined","className","style","paddingLeft","onClick","Indexed","source","href","id","Indexer","index","anyChildren","indexedItems","child","console","log","x","props","push","map","i","js","CharacterRoller","characterData","setCharacterData","rollCharacterData","length","cd","sumN","strength","agility","endurance","perception","willpower","intelligence","n","join","reduce","a","b","dice","setter","charData","counter","roll","numbers","numberOfDice","Math","floor","random","sides","getStrengthHuman","age","getAgilityHuman","getEnduranceHuman","getPerceptionHuman","getIntelligenceHuman","getWillpowerHuman","CharacterRollerHuman","setAge","Character","CharacterPointsHuman","ExperienceMultiplerHuman","isEdit","onChange","str","parseInt","txt","explain","getStrengthShambra","getAgilityShambra","getEnduranceShambra","getPerceptionShambra","getIntelligenceShambra","getWillpowerShambra","CharacterRollerShambra","CharacterPointsShambra","ExperienceMultiplerShambra","getStrengthMerlion","getAgilityMerlion","getEnduranceMerlion","getPerceptionMerlion","CharacterRollerMerlion","CharacterPointsMerlion","ExperienceMultiplerMerlion","getStrengthNekovian","getAgilityNekovian","getEnduranceNekovian","getPerceptionNekovian","getIntelligenceNekovian","CharacterRollerNekovian","CharacterPointsNekovian","ExperienceMultiplerNekovian","cursorStyle","cursor","Ellipsis","text","cutOff","substring","MakeCharacter","Combat","AmmoTypesInformation","ammo","cost","weight","types","description","Firearms","fireArmClass","name","damage","range","capacity","fireAction","armorpiercing","value","hitbonus","rps","MeleeWeapons","size","Armors","damageReduction","armorPenalty","weightConverter","grams","toFixed","WeaponTable","data","s","borderLeft","weapon","FirearmTable","f","FireArmRow","firearmRowStyle","descriptionOpen","setDescriptionOpen","colSpan","bottomStyle","borderBottom","AmmoTable","Equipment","armor","Roll1D100","WealthRoller","firstD100","setFirstD100","secondD100","setSecondD100","Wealth","costLevels","cl","rank","nextRanks","Array","from","max","innerCounter","innerSummer","CostChart","r","nr","Experience","Vehicles","CharacterSheetOverview","Health","PlayerManual","key"],"mappings":"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","file":"static/js/4.dca5867b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\ninterface ISection {\r\n    title: string;\r\n    tab?: number;\r\n    border?: boolean | undefined;\r\n}\r\n\r\nconst Section: React.FC<ISection> = ({ title, tab, border, children }) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    let tabSize = '0';\r\n    if (tab !== undefined)\r\n        tabSize = tab + 'px';\r\n    return <div className={border === true ? 'bordersection' : ''} style={{ paddingLeft: tabSize }}>\r\n        <Button onClick={() => setIsOpen(!isOpen)}>{title} {isOpen ? '-' : '+'}</Button>\r\n        {isOpen && children}\r\n    </div>;\r\n}\r\n\r\nexport default Section;","import React from 'react';\r\n\r\ninterface IIndexedProps {\r\n    title: string;\r\n    source?: string | undefined;\r\n}\r\n\r\nexport const Indexed: React.FC<IIndexedProps> = ({ title, children, source }) => {\r\n    return <>\r\n        <h3><a className='notalink' href={'#' + title} id={title}>{title}</a> <a href={'#' + source}>^</a></h3>\r\n        {children}\r\n    </>;\r\n}\r\n\r\n\r\n\r\ninterface IIndexerProps {\r\n    title: string;\r\n}\r\n\r\nconst Indexer: React.FC<IIndexerProps> = ({ children, title }) => {\r\n\r\n    let index: string[] = [];\r\n    const anyChildren: any = children;\r\n\r\n    const indexedItems: JSX.Element[] = [];\r\n\r\n    console.log({ children });\r\n    for (var child in anyChildren) {\r\n        var x = anyChildren[child];\r\n        if (x.props.title === undefined) {\r\n            console.log(\"Child is not Indexed, it is: \", { x });\r\n        }\r\n        else {\r\n            indexedItems.push(<Indexed title={x.props.title} source={title}>{x.props.children}</Indexed>);\r\n            index.push(x.props.title);\r\n            console.log(\"data\", { x });\r\n        }\r\n    }\r\n\r\n    return <>\r\n        <h4><a className='notalink' href={'#' + title} id={title}>Table of contents </a></h4>\r\n        {index.map(i => <h5> <a href={'#' + i}>{i}</a> </h5>)}\r\n        <hr />\r\n        {indexedItems.map(js => js)}\r\n    </>;\r\n}\r\n\r\n\r\n\r\n\r\nexport default Indexer;","import React, { useState } from \"react\";\r\nimport EditText from \"../HideText\";\r\nimport { Character } from \"../Character\";\r\n\r\ninterface IDice {\r\n    sides: number;\r\n    numberOfDice: number;\r\n}\r\n\r\ninterface ICharacterRoller {\r\n    strength: IDice;\r\n    agility: IDice;\r\n    endurance: IDice;\r\n    perception: IDice;\r\n    willpower: IDice;\r\n    intelligence: IDice;\r\n}\r\n\r\ninterface ICharacterData {\r\n    strength: number[];\r\n    agility: number[];\r\n    endurance: number[];\r\n    perception: number[];\r\n    willpower: number[];\r\n    intelligence: number[];\r\n}\r\n\r\nconst CharacterRoller: React.FC<ICharacterRoller> = (props) => {\r\n    const [characterData, setCharacterData] = useState<ICharacterData[]>([]);\r\n\r\n    return (<div className=\"flexbox\">\r\n        <button onClick={() => rollCharacterData(props, setCharacterData)}>Roll</button>\r\n\r\n        {characterData.length > 0 ? <div className=\"flexContainer\">\r\n            Strength<br />\r\n            Agility<br />\r\n            Endurance<br />\r\n            Perception<br />\r\n            Willpower<br />\r\n            Intelligence<br />\r\n        </div> : null}\r\n\r\n        {characterData.map(cd => {\r\n            return <div className=\"flexContainer\">\r\n                {sumN(cd.strength)}<br />\r\n                {sumN(cd.agility)}<br />\r\n                {sumN(cd.endurance)}<br />\r\n                {sumN(cd.perception)}<br />\r\n                {sumN(cd.willpower)}<br />\r\n                {sumN(cd.intelligence)}<br />\r\n            </div>\r\n        })}\r\n    </div>);\r\n}\r\n\r\nconst sumN = (n: number[]) => ` ${n.join(', ')} = ${n.reduce(function (a, b) { return a + b; }, 0)}`;\r\n\r\nconst rollCharacterData = (dice: ICharacterRoller, setter: React.Dispatch<React.SetStateAction<ICharacterData[]>>) => {\r\n    let charData: ICharacterData[] = [];\r\n\r\n    for (let counter = 0; counter < 4; counter++) {\r\n        charData.push({\r\n            strength: roll(dice.strength),\r\n            agility: roll(dice.agility),\r\n            endurance: roll(dice.endurance),\r\n            perception: roll(dice.perception),\r\n            willpower: roll(dice.willpower),\r\n            intelligence: roll(dice.intelligence),\r\n        });\r\n    }\r\n    setter(charData);\r\n}\r\n\r\nconst roll = (dice: IDice) => {\r\n    let numbers: number[] = [];\r\n    for (let counter = 0; counter < dice.numberOfDice; counter++) {\r\n        numbers.push(Math.floor((Math.random() * dice.sides)) + 1);\r\n    }\r\n    return numbers;\r\n}\r\n\r\n\r\n\r\nconst getStrengthHuman = (age: number) => {\r\n    if (age > 80) return { sides: 8, numberOfDice: 1 };\r\n    if (age > 26) return { sides: 10, numberOfDice: 1 };\r\n    return { sides: 8, numberOfDice: 1 };\r\n\r\n}\r\nconst getAgilityHuman = (age: number) => {\r\n    if (age > 80) return { sides: 6, numberOfDice: 1 };\r\n    if (age > 40) return { sides: 8, numberOfDice: 1 };\r\n    return { sides: 10, numberOfDice: 1 };\r\n}\r\nconst getEnduranceHuman = (age: number) => {\r\n    if (age > 80) return { sides: 8, numberOfDice: 1 };\r\n    if (age > 40) return { sides: 10, numberOfDice: 1 };\r\n    return { sides: 12, numberOfDice: 1 };\r\n}\r\nconst getPerceptionHuman = (age: number) => {\r\n    if (age > 80) return { sides: 6, numberOfDice: 1 };\r\n    if (age > 40) return { sides: 8, numberOfDice: 1 };\r\n    if (age > 26) return { sides: 10, numberOfDice: 1 };\r\n    return { sides: 12, numberOfDice: 1 };\r\n\r\n}\r\nconst getIntelligenceHuman = (age: number) => {\r\n    if (age > 80) return { sides: 8, numberOfDice: 1 };\r\n    return { sides: 10, numberOfDice: 1 };\r\n}\r\nconst getWillpowerHuman = (age: number) => {\r\n    if (age > 80) return { sides: 8, numberOfDice: 1 };\r\n    if (age > 40) return { sides: 10, numberOfDice: 1 };\r\n    return { sides: 6, numberOfDice: 1 };\r\n}\r\n\r\n\r\nexport const CharacterRollerHuman = () => {\r\n    const [age, setAge] = useState(24);\r\n    return <>\r\n        Age: {age}<br />\r\n    Starting Exp: {Character.CharacterPointsHuman(age)}<br />\r\n    Multiplier Exp: {Character.ExperienceMultiplerHuman(age)}<br />\r\n        <EditText isEdit=\"edit\" onChange={(str) => setAge(parseInt(str))} txt={age} explain=\"\" />\r\n        <CharacterRoller\r\n            strength={getStrengthHuman(age)}\r\n            agility={getAgilityHuman(age)}\r\n            endurance={getEnduranceHuman(age)}\r\n            intelligence={getIntelligenceHuman(age)}\r\n            willpower={getWillpowerHuman(age)}\r\n            perception={getPerceptionHuman(age)}\r\n        />\r\n    </>\r\n}\r\n\r\nconst getStrengthShambra = (age: number) => {\r\n    if (age > 80) return { sides: 8, numberOfDice: 1 };\r\n    if (age > 26) return { sides: 10, numberOfDice: 1 };\r\n    return { sides: 8, numberOfDice: 1 };\r\n}\r\nconst getAgilityShambra = (age: number) => {\r\n    if (age > 80) return { sides: 6, numberOfDice: 1 };\r\n    if (age > 40) return { sides: 8, numberOfDice: 1 };\r\n    return { sides: 10, numberOfDice: 1 };\r\n}\r\nconst getEnduranceShambra = (age: number) => {\r\n    if (age > 80) return { sides: 8, numberOfDice: 1 };\r\n    if (age > 40) return { sides: 10, numberOfDice: 1 };\r\n    return { sides: 12, numberOfDice: 1 };\r\n}\r\nconst getPerceptionShambra = (age: number) => {\r\n    if (age > 80) return { sides: 6, numberOfDice: 1 };\r\n    if (age > 40) return { sides: 8, numberOfDice: 1 };\r\n    if (age > 26) return { sides: 10, numberOfDice: 1 };\r\n    return { sides: 12, numberOfDice: 1 };\r\n}\r\nconst getIntelligenceShambra = (age: number) => {\r\n    if (age > 80) return { sides: 8, numberOfDice: 1 };\r\n    return { sides: 10, numberOfDice: 1 };\r\n}\r\nconst getWillpowerShambra = (age: number) => {\r\n    if (age > 80) return { sides: 8, numberOfDice: 1 };\r\n    if (age > 40) return { sides: 10, numberOfDice: 1 };\r\n    return { sides: 6, numberOfDice: 1 };\r\n}\r\n\r\n\r\nexport const CharacterRollerShambra = () => {\r\n    const [age, setAge] = useState(24);\r\n    return <>\r\n        Age: {age}<br />\r\n    Starting Exp: {Character.CharacterPointsShambra(age)}<br />\r\n    Multiplier Exp: {Character.ExperienceMultiplerShambra(age)}<br />\r\n        <EditText isEdit=\"edit\" onChange={(str) => setAge(parseInt(str))} txt={age} explain=\"\" />\r\n        <CharacterRoller\r\n            strength={getStrengthShambra(age)}\r\n            agility={getAgilityShambra(age)}\r\n            endurance={getEnduranceShambra(age)}\r\n            intelligence={getIntelligenceShambra(age)}\r\n            willpower={getWillpowerShambra(age)}\r\n            perception={getPerceptionShambra(age)}\r\n        />\r\n    </>\r\n}\r\n\r\nconst getStrengthMerlion = (age: number) => {\r\n    if (age > 40) return { sides: 8, numberOfDice: 1 };\r\n    return { sides: 6, numberOfDice: 1 };\r\n}\r\nconst getAgilityMerlion = (age: number) => {\r\n    if (age > 40) return { sides: 8, numberOfDice: 1 };\r\n    return { sides: 10, numberOfDice: 1 };\r\n}\r\nconst getEnduranceMerlion = (age: number) => {\r\n    if (age > 40) return { sides: 6, numberOfDice: 1 };\r\n    return { sides: 8, numberOfDice: 1 };\r\n}\r\nconst getPerceptionMerlion = (age: number) => {\r\n    if (age > 40) return { sides: 8, numberOfDice: 1 };\r\n    return { sides: 10, numberOfDice: 1 };\r\n}\r\nconst getIntelligenceMerlion = (age: number) => {\r\n    return { sides: 4, numberOfDice: 4 };\r\n}\r\nconst getWillpowerMerlion = (age: number) => {\r\n    return { sides: 10, numberOfDice: 1 };\r\n}\r\n\r\nexport const CharacterRollerMerlion = () => {\r\n    const [age, setAge] = useState(24);\r\n    return <>\r\n        Age: {age}<br />\r\n    Starting Exp: {Character.CharacterPointsMerlion(age)}<br />\r\n    Multiplier Exp: {Character.ExperienceMultiplerMerlion(age)}<br />\r\n        <EditText isEdit=\"edit\" onChange={(str) => setAge(parseInt(str))} txt={age} explain=\"\" />\r\n        <CharacterRoller\r\n            strength={getStrengthMerlion(age)}\r\n            agility={getAgilityMerlion(age)}\r\n            endurance={getEnduranceMerlion(age)}\r\n            intelligence={getIntelligenceMerlion(age)}\r\n            willpower={getWillpowerMerlion(age)}\r\n            perception={getPerceptionMerlion(age)}\r\n        />\r\n    </>\r\n}\r\n\r\nconst getStrengthNekovian = (age: number) => {\r\n    if (age > 36) return { sides: 10, numberOfDice: 1 };\r\n    return { sides: 12, numberOfDice: 1 };\r\n}\r\nconst getAgilityNekovian = (age: number) => {\r\n    if (age > 61) return { sides: 8, numberOfDice: 1 };\r\n    if (age > 24) return { sides: 10, numberOfDice: 1 };\r\n    return { sides: 12, numberOfDice: 1 };\r\n}\r\nconst getEnduranceNekovian = (age: number) => {\r\n    if (age > 60) return { sides: 8, numberOfDice: 1 };\r\n    if (age > 36) return { sides: 10, numberOfDice: 1 };\r\n    if (age > 24) return { sides: 12, numberOfDice: 1 };\r\n    return { sides: 10, numberOfDice: 1 };\r\n}\r\nconst getPerceptionNekovian = (age: number) => {\r\n    if (age > 60) return { sides: 4, numberOfDice: 1 };\r\n    if (age > 36) return { sides: 6, numberOfDice: 1 };\r\n    return { sides: 8, numberOfDice: 1 };\r\n}\r\nconst getIntelligenceNekovian = (age: number) => {\r\n    if (age > 60) return { sides: 8, numberOfDice: 1 };\r\n    if (age > 36) return { sides: 8, numberOfDice: 1 };\r\n    if (age > 24) return { sides: 10, numberOfDice: 1 };\r\n    return { sides: 8, numberOfDice: 1 };\r\n}\r\nconst getWillpowerNekovian = (age: number) => {\r\n    return { sides: 12, numberOfDice: 1 };\r\n}\r\n\r\nexport const CharacterRollerNekovian = () => {\r\n    const [age, setAge] = useState(24);\r\n    return <>\r\n        Age: {age}<br />\r\n    Starting Exp: {Character.CharacterPointsNekovian(age)}<br />\r\n    Multiplier Exp: {Character.ExperienceMultiplerNekovian(age)}<br />\r\n        <EditText isEdit=\"edit\" onChange={(str) => setAge(parseInt(str))} txt={age} explain=\"\" />\r\n        <CharacterRoller\r\n            strength={getStrengthNekovian(age)}\r\n            agility={getAgilityNekovian(age)}\r\n            endurance={getEnduranceNekovian(age)}\r\n            intelligence={getIntelligenceNekovian(age)}\r\n            willpower={getWillpowerNekovian(age)}\r\n            perception={getPerceptionNekovian(age)}\r\n        />\r\n    </>\r\n}\r\n\r\nexport default CharacterRoller;","import React, { useState, CSSProperties } from \"react\";\r\n\r\ninterface IEllipsisProps {\r\n    text: string | undefined;\r\n    cutOff: number;\r\n}\r\n\r\nconst cursorStyle: CSSProperties = {\r\n    cursor: 'pointer'\r\n}\r\n\r\nconst Ellipsis: React.FC<IEllipsisProps> = ({ text, cutOff }) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    if (text === undefined) return null;\r\n    if (text.length < cutOff)\r\n        return <p>{text}</p>\r\n    else if (!isOpen && text.length >= cutOff)\r\n        return <p style={cursorStyle} onClick={() => setIsOpen(true)}>{text.substring(0, cutOff)}...</p>\r\n    else return <p style={cursorStyle} onClick={() => setIsOpen(false)}>{text}</p>\r\n}\r\n\r\nexport default Ellipsis;","import React from \"react\";\r\nimport Section from \"./Section\";\r\n\r\n\r\nconst Experience: React.FC = () => {\r\n    return <Section title='Character points and Experience'>\r\n        <p>To increase skills, base stats, buy perks and traits you spend character points, your starting character points depend on your species and starting age. Older characters start with more experience, younger characters have a high experience multiplier which allows them to gain character points faster.</p>\r\n        <h4>Cost</h4>\r\n        <p>The cost of increasing a skill is equal to the amount you increase to per step. For example if you have 4 ranks and wish to increase to 6 it costs 11, because you must first increase to 5 and then to 6. 5 + 6 = 11<br />\r\n        Please consult the following chart when increasing multiple steps</p>\r\n        <CostChart />\r\n\r\n        <p>To gain experience your character needs practice. You gain experience points in a skill when you use it and it fulfills <i>any</i> of the following conditions:</p>\r\n        <ul>\r\n            <li>The chance to fail is at least 50% (your dice roll needs to be at least 11 or higher)</li>\r\n            <li>You are in a dangerous situation and failure is likely to result in harm</li>\r\n            <li>You are actively being tutored by someone who has at least 2 ranks higher in said skill</li>\r\n        </ul>\r\n        <p>You can only gain 1 experience point per day, if you gain experience in multiple skills then you choose which</p>\r\n        <p>Experience multipler is applied to the maximum amount you may get, but you always only get 1 per skill, so if you hav a multipler of 2 then you can choose two skills that you qualify for</p>\r\n        <p>If the experience multipler is a fractional number then the experienced gained is carried over to the next day, but only if you get it.\r\n            <br />\r\n            For example you have multiplier of 1.5, you gain experience in 2 skills on day 1, at the end of day 1 you may choose which of the two you gain a point in.<br />\r\n            On day 2 the 0.5 surplus carries over and you have 2 possible on this day. One of which has to be the other skill you didn't choose.\r\n        </p>\r\n    </Section>\r\n}\r\nconst max = 21;\r\n\r\ninterface CostLevel {\r\n    rank: number;\r\n    nextRanks: number[];\r\n}\r\n\r\nconst costLevels: CostLevel[] = [];\r\n\r\nfor (let counter = 0; counter < max; counter++) {\r\n    const cl = {\r\n        rank: counter,\r\n        nextRanks: Array.from(Array(max - 1), (x, index) => 0),\r\n    };\r\n    for (let innerCounter = counter; innerCounter < max - 1; innerCounter++) {\r\n        cl.nextRanks[innerCounter] = innerCounter + 1;\r\n        for (let innerSummer = innerCounter; innerSummer < max - 1; innerSummer++) {\r\n            if (innerSummer === 0) continue;\r\n            cl.nextRanks[innerSummer] += cl.nextRanks[innerSummer - 1];\r\n        }\r\n    }\r\n    costLevels.push(cl);\r\n}\r\n\r\n\r\nconst CostChart: React.FC = () => {\r\n    return <table className=\"th20\">\r\n        <thead>\r\n            <tr>\r\n                <th>from/to</th>\r\n                {costLevels.map(r => r.rank !== 0 ? <th>{r.rank}</th> : null)}\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {costLevels.map(cl => cl.rank !== 20 ? <tr>\r\n                <td>{cl.rank}</td>\r\n                {cl.nextRanks.map(nr => <td>{nr !== 0 ? nr : '-'}</td>)}\r\n            </tr> : null)}\r\n        </tbody>\r\n    </table>\r\n}\r\n\r\nexport default Experience;","import Section from \"./Section\";\r\nimport React from \"react\";\r\nimport { CharacterRollerHuman, CharacterRollerShambra, CharacterRollerMerlion, CharacterRollerNekovian } from \"../Lore/CharacterRoller\";\r\n\r\nconst MakeCharacter: React.FC = () => {\r\n    return <Section title='How to make a character'>\r\n\r\n        <Section title='Human dice roller'><CharacterRollerHuman /></Section>\r\n        <Section title='Shambra dice roller'><CharacterRollerShambra /></Section>\r\n        <Section title='Merlion dice roller'><CharacterRollerMerlion /></Section>\r\n        <Section title='Nekovian dice roller'><CharacterRollerNekovian /></Section>\r\n\r\n        <h3>Step 1 - concept</h3>\r\n        <h4>Roll attributes</h4>\r\n        <p>The absolute first step is to roll your base attributes, strength, agility, endurance, perception, intelligence, willpower</p>\r\n        <i>When you see something like \"2d8\" the first number indicates the number of dice, in this case 2, the latter number indicates the number of sides, in this case two 8 sided dice, the result added up</i>\r\n        <p>Depending on your final age and species you will have different dice roll (see world and lore -{\">\"} your species -{\">\"} playing as your species for precise information)</p>\r\n        <p>Roll the dice for each attribute in 3 sets, you may pick one of these three complete sets</p>\r\n        <p>You may choose to make the dice \"safe\" by going down 2 size and then add a flat +1 to the final number (1d10 -{\">\"} 1d8), the average is the same but distance is lower</p>\r\n        <p>The first step is conceptual and mostly abstract, but will feed into the next steps. Begin by answering at least all of these questions.</p>\r\n        <h4>Where was my character born?</h4>\r\n        <h4>How old is my character currently?</h4>\r\n        <h4>What kind of upbringing did my character have?</h4>\r\n        <h4>How does my character's upbringing bias my character's point of view?</h4>\r\n        <h4>What major events happened in my characters life?</h4>\r\n        <h4>How did those events shape my characters personality?</h4>\r\n        <h4>What lessons and skills did my character learn from that?</h4>\r\n        <p>There may be more questions you want to ask depending on your answers.</p>\r\n        <h3>Step 2 - outlining your character</h3>\r\n        <p>Based on the answer in step 1...</p>\r\n        <h4>Adjust your age</h4>\r\n        <p>The older you start at the more character points (applicable experience) you start with.</p>\r\n        <p>Finally the younger you are the bigger your multiplier, whenever you gain character points in game you multiply them by this.</p>\r\n\r\n        <h4>Select between 2 and 4 \"main skills\" and as many additional secondary skills as you need.</h4>\r\n        <p>You'll want to put points into your main skills, note that the cost increases rapidly.\r\n        The cost for each step is what you have + 1\r\n    Save some character points for perks</p>\r\n        <p>Also notice that your attributes play a part in your skill total,\r\n        for example pilot is a perception skill,\r\n    when you roll for pilot you roll 2d10 + pilot + perception</p>\r\n        <h3>Step 3 - choose your perks</h3>\r\n        <p>Perks are specializations, they either grant new capabilities under a skill or make a specific skill usage more powerful/likely to succeed (skills have multiple uses)</p>\r\n        <p>Note that perks often come with skill requirements, and for skills that you don't put points into are often not worth taking.</p>\r\n\r\n    </Section>;\r\n}\r\n\r\nexport default MakeCharacter;","import Section from \"./Section\";\r\nimport React from \"react\";\r\nimport Indexer, { Indexed } from \"../Indexer\";\r\n\r\nconst Combat: React.FC = () => {\r\n    return <Section title='Combat'>\r\n\r\n        <Indexer title='combat'>\r\n            <Indexed title='Combat start'>\r\n                <p>Combat starts when one group or individual assaults another group or individual, depending on whether the assault is an ambush or not.</p>\r\n                <h5>Sequence</h5>\r\n                <p>Sequence is the order turns, it is rolled at the start of the first turn. Your sequence is 2d10 + perception + agility + modifier. Modifiers can come from perks, traits and the situation</p>\r\n                <p>If one side has exceptionally high sequence then members of that team can get one free action on the first turn. To get this they must exceed their enemies highest sequence by 20.</p>\r\n                <p>Some actions can be done in response to actions done to you, such as active dodging and blocking. If however you've already spent your action then to dodge or block you must forgo your next turn and take a -4 sequence penalty</p>\r\n                <h5>Ambush</h5>\r\n                <p>An ambush is defined by whether the defender knows the attack is coming.</p>\r\n                <p>If it is an unseen ambush (the defenders are not aware of the attackers) the attackers gain +20 on their sequence</p>\r\n                <p>If it is a surprise attack (the defender are aware of the attacker but did not expect to be attacked) the attackers gain +10 on their sequence</p>\r\n                <p>If the defenders know they are going to be attacked then there is no modifier</p>\r\n                <h5>Counter-ambush</h5>\r\n                <p>If the defenders know they are going to be attacked and stand prepared for it but the attackers don't know that they know the defenders gain a +10 on their sequence</p>\r\n            </Indexed>\r\n            <Indexed title='Turns'>\r\n                <p>Each turn starts with the characters performing one action in order of highest sequence to lowest</p>\r\n            </Indexed>\r\n            <Indexed title='Dodging and passive defense'>\r\n                <p>Passive defense is the number that your enemy is required to hit to hit you in combat</p>\r\n        You have a passive defense of 10 when:\r\n        <ul>\r\n                    <li>You don't see the attack, or</li>\r\n                    <li>You are doing something that requires concentration, or</li>\r\n                    <li>You are doing something that requires stillness</li>\r\n                    <li>You are immobilized</li>\r\n                </ul>\r\n        You have a passive defense of 10 + agility + your lowest combat or acrobatics when:\r\n        <ul>\r\n                    <li>You can see the attack coming</li>\r\n                </ul>\r\n        If you have a passive dodge you may choose to do an active dodge.\r\n        <ul>\r\n                    <li>An active dodge gives you Acrobatics (active dodge) + Agility + 2d10</li>\r\n                    <li>This applies to ALL incoming attacks</li>\r\n                    <li>You can activate this at any time, so long as you have not acted yet</li>\r\n                    <li>If you have already acted this turn you may \"borrow\" your next turn's action, your next turn is then spent</li>\r\n                </ul>\r\n            </Indexed>\r\n            <Indexed title='Bleeding'>\r\n                <p>Bleeding occurs when your life is reduced to 0 or if injured by weapon which causes bleeding</p>\r\n                <p>If you take less than 6 damage then the bleeding is light, 7-14 is intermediate bleeding, 15+ is heavy bleeding</p>\r\n                <p>If you take bleeding causing injuries multiple times then the bleeding rate increases by 1 step, from light to intermediate, and intermediate to heavy</p>\r\n                <ul>\r\n                    <li>Light bleeding deals 1 damage every 10 minutes, lasts 1d100 minutes</li>\r\n                    <li>Intermediate bleeding deals 1 damage every 3 minute, lasts 5d6 minutes</li>\r\n                    <li>Heavy bleeding deals 1 damage every 4 turns, lasts until character bleeds out or has first aid performed on them.</li>\r\n                </ul>\r\n            </Indexed>\r\n            <Indexed title='Armor and damage reduction'>\r\n                <p>Armor gives you damage reduction, this damage reduction is always applied before damage multipliers and after damage reducers. Damage calculation is always calculated to the maximum benefit of the wearer of the armor.</p>\r\n            </Indexed>\r\n            <Indexed title='Melee attacking'>\r\n                <p>A melee attack is anything from a punch to a cut with a sword. You roll 2d10 + Combat (skill), if the roll is equal or exceeds the targets passive defense then you hit</p>\r\n                <h5>Overextend</h5>\r\n                <p>Some enemies may be extremely difficult to hit, once a turn you may overextend your attack, you can add up to as much as +10 to your attack roll but this leaves you open to counter attacks, you take twice negative on all skill rolls and passives until it's your turn again</p>\r\n                <h5>Flanking</h5>\r\n                <p>When you are facing two or more opponents attacking you, you will have a penalty to your passive defense by -2 per attacker after the first. 2 attackers is -2, 3 is -4, 4 is -6 and so on.</p>\r\n            </Indexed>\r\n            <Indexed title='Blocking'>\r\n                <p>Blocking is an active action that can be done against melee attacks. You roll 2d10 + Combat (skill), if you successfully block then you only take half damage (round down)</p>\r\n            </Indexed>\r\n            <Indexed title='Ranged attacks and guns'>\r\n                <p>When you shoot someone your roll must hit the targets passive defense to hit.\r\n            Guns have multiple types of attacks, snipe shots, aimed shots, semi-burst, burst and oppressive fire</p>\r\n                <h5>Snipe shot</h5>\r\n                <p>A snipe shot is the slowest kind, you roll 2d10 + Fireams (skill), if you roll below 8 you do nothing (and your action is spent),\r\n                if you roll 8 or above you shoot. Available on lever action, bolt action, semi-automatic.\r\n            Requires concentration, no other action may be performed on the same round, multiple attacks prohibited</p>\r\n                <h5>Aimed shot</h5>\r\n                <p>Aimed shot is the simplest, you roll 2d10 + Firearms (skill) and shoot 1 bullet, available on lever action, bolt action, semi-automatic and pump action</p>\r\n                <h5>Semi-burst</h5>\r\n                <p>You shoot multiple bullets, you roll 2d10 + Firearms (skill) + 10, shoot 4 bullets,\r\n                if you hit passive defense then 1 bullet hits, for each 5 points above passive defense 1 additional bullet hits.\r\n            Available to semi-automatic guns only. Multiple attacks prohibited</p>\r\n                <h5>Burst</h5>\r\n                <p>You hold down fully-automatic for a short burst, you roll 2d10 + Firearms (skill) + 15, shoot 10 bullets,\r\n            if you hit passive defense then 1 bullet hits, for each 5 points above passive defense 1 additional bullet hits. Available only to fully-automatic guns. Multiple attacks prohibited</p>\r\n                <h5>Oppressive Fire</h5>\r\n                <p>You hold down fully-automatic for a long oppressive burst, the number of bullets depend on the gun,\r\n                you roll 2d10 + Firearms (skill) + 20, if you hit passive defense then 1 bullet hits, for each 5 points above passive defense 1 additional bullet hits.\r\n            Only available to fully-automatic guns. Requires concentration, no other action may be performed on the same round. Multiple attacks prohibited</p>\r\n            </Indexed>\r\n            <Indexed title='Multiple attacks'>\r\n                <p>Characters may do more than two or more consecutive attacks in certain circumstances.</p>\r\n                <ul>\r\n                    <li><b>2 attacks</b>: requires 6 or higher in firearms and/or combat. Take -3 penalty to both attacks</li>\r\n                    <li><b>3 attacks</b>: requires 12 or higher in firearms and/or combat. Take -6 penalty to all attacks</li>\r\n                    <li><b>4 attacks</b>: requires 18 or higher in firearms and/or combat. Take -9 penalty to all attacks</li>\r\n                    <li><b>5 attacks</b>: requires 24 or higher in firearms and/or combat. Take -12 penalty to all attacks</li>\r\n                    <li><b>6 attacks</b>: requires 30 or higher in firearms and/or combat. Take -15 penalty to all attacks</li>\r\n                </ul>\r\n            </Indexed>\r\n            <Indexed title='Distance'>\r\n                <p>Targets become harder to hit when they are further away, each 5 meters away gives you a -1 to hit penalty</p>\r\n                <p>Guns have a maximum range, beyond this it's impossible to hit</p>\r\n                <p>Bullets slow down and lose energy to the air, depending on the gun you may deal lower damage</p>\r\n            </Indexed>\r\n            <Indexed title='Cover'>\r\n                <p>Hinding behind a cover, whether partially or fully gives your character cover, cover grants both passive defense and damage reduction</p>\r\n                <p>Damage reduction depends on the type of material is covering you, thickness and hardness matter</p>\r\n                <table>\r\n                    <thead><th>thiccness/material</th><th>wood</th><th>concrete</th><th>metal</th></thead>\r\n                    <tbody>\r\n                        <tr><td>1cm</td><td>1</td><td>2</td><td>4</td></tr>\r\n                        <tr><td>2cm</td><td>2</td><td>5</td><td>10</td></tr>\r\n                        <tr><td>5cm</td><td>4</td><td>10</td><td>20</td></tr>\r\n                        <tr><td>20cm</td><td>8</td><td>20</td><td>40</td></tr>\r\n                        <tr><td>100m</td><td>16</td><td>40</td><td>100</td></tr>\r\n                    </tbody>\r\n                </table>\r\n                <h5>Low cover</h5>\r\n                <p>less than 1/3rd of your body is covered, you gain +4 passive defense</p>\r\n                <h5>High cover</h5>\r\n                <p>less than 2/3rds of your body is covered, you gain +8 passive defense</p>\r\n                <h5>Massive cover</h5>\r\n                <p>More than 2/3rds of your body is covered, you gain +12 passive defense</p>\r\n                <h5>total cover</h5>\r\n                <p>Your entire body is covered, you gain +20 passive defense if the enemy knows where you are, if they do not then they simply automatically miss</p>\r\n            </Indexed>\r\n            <Indexed title='Critical hits'>\r\n                <p>Every attack involves 2d10 rolls, if either dice rolls 10 then you add 50% damage (rounded down), if both roll 10 then you double the damage.</p>\r\n            </Indexed>\r\n        </Indexer>\r\n    </Section>;\r\n}\r\n\r\nexport default Combat;","import Item from \"./Item\";\r\n\r\ntype ammo = '9x17' | '9x21' | '9x23' |\r\n    '10x19' | '10x21' |\r\n    '11x17' | '11x21' |\r\n    '12x20' | '12x24' | '12x28' |\r\n    '12 gauge' | '20 gauge' |\r\n    '40mm rpg' | '50mm rpg' |\r\n    '1hec' | '2hec' | '10hec';\r\n\r\nexport interface AmmoInformation {\r\n    ammo: ammo;\r\n    cost: number;\r\n    weight: number;\r\n    types: string[];\r\n    description: string;\r\n}\r\n\r\nexport const AmmoTypesInformation: AmmoInformation[] = [\r\n    {\r\n        ammo: '9x17',\r\n        cost: 0.4,\r\n        weight: 7,\r\n        types: ['tracer', 'hollow point', 'standard'],\r\n        description: 'a small short 9mm bullet'\r\n    }, {\r\n        ammo: '9x21',\r\n        cost: 0.6,\r\n        weight: 9,\r\n        types: ['tracer', 'hollow point', 'armor piercing', 'standard'],\r\n        description: 'a slightly longer version of the 9mm'\r\n    }, {\r\n        ammo: '9x23',\r\n        cost: 0.7,\r\n        weight: 11,\r\n        types: ['tracer', 'hollow point', 'armor piercing', 'standard'],\r\n        description: 'a long version of the 9mm'\r\n    }, {\r\n        ammo: '10x19',\r\n        cost: 1,\r\n        weight: 10,\r\n        types: ['hollow point', 'standard'],\r\n        description: 'a standard 10cm bullet'\r\n    }, {\r\n        ammo: '10x21',\r\n        cost: 1.1,\r\n        weight: 11,\r\n        types: ['tracer', 'hollow point', 'armor piercing', 'standard'],\r\n        description: 'a long version of the 10cm bullet'\r\n    }, {\r\n        ammo: '11x17',\r\n        cost: 1.3,\r\n        weight: 12,\r\n        types: ['incendiary', 'standard'],\r\n        description: 'a short wide 11cm bullet'\r\n    }, {\r\n        ammo: '11x21',\r\n        cost: 1.5,\r\n        weight: 15,\r\n        types: ['armor piercing', 'incendiary', 'standard'],\r\n        description: 'a normal 11cm bullet'\r\n    }, {\r\n        ammo: '12x20',\r\n        cost: 1.5,\r\n        weight: 16,\r\n        types: ['armor piercing', 'incendiary', 'standard'],\r\n        description: 'a large 12cm bullet'\r\n    }, {\r\n        ammo: '12x24',\r\n        cost: 1.8,\r\n        weight: 20,\r\n        types: ['hollow point', 'armor piercing', 'incendiary', 'standard'],\r\n        description: 'a long large 12cm bullet'\r\n    }, {\r\n        ammo: '12x28',\r\n        cost: 2.2,\r\n        weight: 25,\r\n        types: ['tracer', 'hollow point', 'armor piercing', 'incendiary', 'standard'],\r\n        description: 'a very long large 12cm bullet'\r\n    }, {\r\n        ammo: '12 gauge',\r\n        cost: 3,\r\n        weight: 24,\r\n        types: ['shell', 'slug', 'explosive'],\r\n        description: 'a 12 gauge shotgun shell'\r\n    }, {\r\n        ammo: '20 gauge',\r\n        cost: 2.2,\r\n        weight: 22,\r\n        types: ['shell', 'slug'],\r\n        description: 'a 20 gauge shotgun shell'\r\n    }, {\r\n        ammo: '40mm rpg',\r\n        cost: 300,\r\n        weight: 160,\r\n        types: ['plasma bomb', 'frag', 'standard'],\r\n        description: 'a 40mm rocket propelled grenade'\r\n    }, {\r\n        ammo: '50mm rpg',\r\n        cost: 400,\r\n        weight: 220,\r\n        types: ['plasma bomb', 'homing', 'standard'],\r\n        description: 'a 50mm rocket propelled grenade'\r\n    }, {\r\n        ammo: '1hec',\r\n        cost: 0,\r\n        weight: 0,\r\n        types: [],\r\n        description: '1 unit of hyperelectron charge, battery rechargeable'\r\n    }\r\n];\r\n\r\n\r\n\r\ntype fireAction = 'single action revolver' | 'double action revolver' | 'bolt action' | 'pump action' | 'semi-automatic' | 'fully-automatic' | 'continuous';\r\n\r\ntype fireArmClass = 'handgun' | 'submachinegun' | 'rifle' | 'machinegun' | 'rocketlauncher' | 'laser' | 'plasma';\r\n\r\ninterface IFirearm extends Item {\r\n    fireArmClass: fireArmClass,\r\n    damage: string;\r\n    range: string;\r\n    armorpiercing?: number;\r\n    hitbonus?: number;\r\n    fireAction: fireAction[];\r\n    capacity: number;\r\n    ammo: ammo;\r\n    rps?: number;\r\n}\r\n\r\nexport class FireArm implements IFirearm {\r\n    fireArmClass: fireArmClass;\r\n    damage: string;\r\n    range: string;\r\n    armorpiercing?: number | undefined;\r\n    hitbonus?: number | undefined;\r\n    fireAction: fireAction[];\r\n    capacity: number;\r\n    ammo: ammo;\r\n    rps?: number | undefined;\r\n    weight: number;\r\n    value: number;\r\n    description?: string | undefined;\r\n    name: string;\r\n\r\n    constructor(name: string, weight: number, value: number, damage: string, fireArmClass: fireArmClass, range: string, fireAction: fireAction[], capacity: number, ammo: ammo, description: string | undefined, hitbonus: number | undefined, armorpiercing: number | undefined, rps: number | undefined) {\r\n        this.fireArmClass = fireArmClass;\r\n        this.name = name;\r\n        this.weight = weight;\r\n        this.value = value;\r\n        this.damage = damage;\r\n        this.description = description;\r\n        this.hitbonus = hitbonus;\r\n        this.armorpiercing = armorpiercing;\r\n        this.range = range;\r\n        this.fireAction = fireAction;\r\n        this.capacity = capacity;\r\n        this.ammo = ammo;\r\n        this.rps = rps;\r\n    }\r\n}\r\n\r\n// gun makers = night, \r\n\r\nconst Firearms: FireArm[] = [\r\n    //hand guns\r\n    {\r\n        fireArmClass: 'handgun', name: 'revolver', damage: '1d10', range: '300m', ammo: '10x19', capacity: 6, fireAction: ['double action revolver'], armorpiercing: 1, weight: 800, value: 3500,\r\n        description: 'basic revolver, this antique weapon design is mostly considered a collectors item for gun and antique enthusiasts. It still works.'\r\n    },\r\n    {\r\n        fireArmClass: 'handgun', name: 'Fantry Light Model', damage: '2d6', range: '350m', ammo: '10x21', capacity: 19, fireAction: ['semi-automatic'], armorpiercing: 1, weight: 950, value: 3200,\r\n        description: 'the light handgun model of the fantry gun manufacturer, has a generous ammo capacity and the design makes it less loud than other handguns'\r\n    },\r\n    {\r\n        fireArmClass: 'handgun', name: 'Fantry Heavy Model', damage: '2d8', range: '450m', ammo: '11x21', capacity: 14, fireAction: ['semi-automatic'], armorpiercing: 2, weight: 1200, value: 4000,\r\n        description: 'a large hand gun designed to inflict serious damage'\r\n    },\r\n    {\r\n        fireArmClass: 'handgun', name: 'Merlion Atomic', damage: '2d6', range: '400m', ammo: '10x21', capacity: 12, fireAction: ['semi-automatic'], armorpiercing: 2, weight: 850, hitbonus: 2, value: 6000,\r\n        description: 'Common handgun used exclusively by merlions, the arcane alloys allows for both supreme recoil handling'\r\n    },\r\n\r\n    //submachinegun\r\n    {\r\n        fireArmClass: 'handgun', name: 'Fantry Sub Model', damage: '1d8', range: '350m', ammo: '9x21', capacity: 24, fireAction: ['semi-automatic', 'fully-automatic'], armorpiercing: 2, rps: 8, weight: 1800, value: 6500,\r\n        description: 'A very light submachine gun, fires relatively slow for a submachine gun on while on full automatic'\r\n    },\r\n    {\r\n        fireArmClass: 'handgun', name: 'Skolt cleaner', damage: '1d10', range: '300m', ammo: '10x19', capacity: 36, fireAction: ['semi-automatic', 'fully-automatic'], armorpiercing: 1, rps: 10, weight: 2100, value: 7500,\r\n        description: 'The Skolt Cleaner is a popular submachinegun'\r\n    },\r\n\r\n    //rifle\r\n    {\r\n        fireArmClass: 'rifle', name: 'Fantry Assault Model', damage: '2d6', range: '800m', ammo: '11x17', capacity: 24, fireAction: ['semi-automatic'], armorpiercing: 1, weight: 2200, value: 5200,\r\n        description: 'A light weight assault weapon'\r\n    },\r\n    {\r\n        fireArmClass: 'rifle', name: 'Skolt Hunter', damage: '2d8', range: '1000m', ammo: '12x20', capacity: 8, fireAction: ['semi-automatic'], armorpiercing: 2, weight: 2300, value: 7000,\r\n        description: 'A rifle primarily designed for hunting'\r\n    },\r\n    {\r\n        fireArmClass: 'rifle', name: 'Skolt LG', damage: '2d10', range: '1200m', ammo: '12x24', capacity: 6, fireAction: ['semi-automatic'], armorpiercing: 3, weight: 3500, value: 7500,\r\n        description: 'The skolt LG (long gun) is primarily designed for hunting large game'\r\n    },\r\n    {\r\n        fireArmClass: 'rifle', name: 'Night AV Sniper', damage: '2d10', range: '1800m', ammo: '12x28', capacity: 4, fireAction: ['bolt action'], armorpiercing: 5, hitbonus: -1, weight: 8200, value: 11000,\r\n        description: 'This huge sniper rifle is designed to take out targets at extreme range, or damage vehicles'\r\n    },\r\n\r\n    //automatic rifle\r\n    {\r\n        fireArmClass: 'rifle', name: 'Skolt Advanced', damage: '1d12', range: '700m', ammo: '11x21', capacity: 60, fireAction: ['semi-automatic', 'fully-automatic'], armorpiercing: 2, rps: 8, weight: 3200, value: 9000,\r\n        description: 'A slim and futuristic looking fully automatic assault rifle designed for urban warfare '\r\n    },\r\n    {\r\n        fireArmClass: 'rifle', name: 'Merlion Predator', damage: '2d10', range: '1100m', ammo: '12x24', capacity: 45, fireAction: ['semi-automatic', 'fully-automatic'], armorpiercing: 4, rps: 12, weight: 3600, value: 12000,\r\n        description: 'This strange merlion designed weapon was originally intended as an anti-human weapon, but when merlions decided that humans were harmless creatures they offered this weapon as a gesture of good will'\r\n    },\r\n\r\n    //shotgun\r\n    {\r\n        fireArmClass: 'rifle', name: 'Skolt Crusher', damage: '2d6', range: '160m', ammo: '12 gauge', capacity: 10, fireAction: ['semi-automatic'], weight: 2800, value: 7600, hitbonus: 1,\r\n        description: 'The skolt crusher is a long barrel semi-automatic shotgun, has a low spread'\r\n    },\r\n    {\r\n        fireArmClass: 'rifle', name: 'Night Hammer', damage: '2d6', range: '80m', ammo: '12 gauge', capacity: 12, fireAction: ['pump action'], weight: 2700, value: 7500, hitbonus: 3,\r\n        description: 'This old fashioned pump action shotgun offers a wide spread which increases likelyhood of hitting'\r\n    },\r\n    {\r\n        fireArmClass: 'rifle', name: 'Night Hammer (sawed off)', damage: '2d6', range: '40m', ammo: '12 gauge', capacity: 12, fireAction: ['pump action'], weight: 2300, value: 6000, hitbonus: 6,\r\n        description: 'A sawed off version of the Night Hammer, slightly lighter and has a huge spread'\r\n    },\r\n\r\n    //machinegun\r\n    {\r\n        fireArmClass: 'machinegun', name: 'Fantry Tyrant Model', damage: '1d8', range: '250m', ammo: '9x17', capacity: 160, fireAction: ['fully-automatic'], rps: 8, weight: 8000, value: 13000,\r\n        description: 'The Tyrant model of the Fantry gun manufacturer, fully automatic machine gun light enough to hold up or using the tripod'\r\n    },\r\n    {\r\n        fireArmClass: 'machinegun', name: 'Merlion Durium', damage: '1d12', range: '900m', ammo: '9x23', capacity: 150, fireAction: ['fully-automatic'], armorpiercing: 3, rps: 8, weight: 7000, value: 16000, hitbonus: 3,\r\n        description: 'An elegant machine gun used only be the merlion military, take -2 if not using the tripod'\r\n    },\r\n    {\r\n        fireArmClass: 'machinegun', name: 'Skolt Obliderator', damage: '2d10', range: '1600m', ammo: '12x28', capacity: 120, fireAction: ['fully-automatic'], armorpiercing: 4, rps: 8, weight: 12000, value: 17000,\r\n        description: 'Point this massive machinegun in a direction, hold down the trigger and watch as everything is turned into swiss cheese'\r\n    },\r\n\r\n    //rocket launcher\r\n    {\r\n        fireArmClass: 'rocketlauncher', name: 'ALV-RL', damage: '12d8', range: '2500m', ammo: '40mm rpg', capacity: 4, fireAction: ['bolt action'], armorpiercing: 10, weight: 4000, value: 6000,\r\n        description: 'Anti light vehicle rocket launcher, used to destroy cars and stuff, also extremely effective at destroying people'\r\n    },\r\n    {\r\n        fireArmClass: 'rocketlauncher', name: 'AT-RL', damage: '12d10', range: '3500m', ammo: '50mm rpg', capacity: 1, fireAction: ['bolt action'], armorpiercing: 12, weight: 5000, value: 8500,\r\n        description: 'Anti tank rocket launcher, used to destroy tanks and buildings, can also be used to convert people into ash and minced meat'\r\n    },\r\n\r\n    //energy weapons\r\n    {\r\n        fireArmClass: 'laser', name: 'Skolt Lightpulse', damage: '1d8', range: '2000m', ammo: '1hec', capacity: 100, fireAction: ['semi-automatic'], armorpiercing: 1, hitbonus: 3, weight: 3000, value: 12000,\r\n        description: 'blue laser pulse, needs protective gear to use, half range penalty'\r\n    },\r\n    {\r\n        fireArmClass: 'laser', name: 'Merlion Deathray', damage: '1d12', range: '2400m', ammo: '2hec', capacity: 80, fireAction: ['semi-automatic'], armorpiercing: 3, hitbonus: 4, weight: 3000, value: 18000,\r\n        description: 'needs protective gear to use, quarter range penalty'\r\n    },\r\n    {\r\n        fireArmClass: 'plasma', name: 'Merlion Plasma Cannon', damage: '4d8', range: '100m', ammo: '10hec', capacity: 120, fireAction: ['semi-automatic'], hitbonus: 1, weight: 6000, value: 22000,\r\n        description: 'needs protective gear to use'\r\n    }\r\n];\r\n\r\nexport default Firearms;","import Item from \"./Item\";\r\n\r\ninterface IMeleeWeapon extends Item {\r\n    size: 'small' | 'medium' | 'large';\r\n    damage: string;\r\n    hitbonus?: string;\r\n    armorpiercing?: number;\r\n}\r\n\r\nexport class MeleeWeapon implements IMeleeWeapon {\r\n    size: \"small\" | \"medium\" | \"large\";\r\n    damage: string;\r\n    hitbonus?: string | undefined;\r\n    armorpiercing?: number | undefined;\r\n    weight: number;\r\n    value: number;\r\n    description?: string | undefined;\r\n    name: string;\r\n    constructor(name: string, weight: number, value: number, damage: string, size: \"small\" | \"medium\" | \"large\", description: string | undefined, hitbonus: string | undefined, armorpiercing: number | undefined) {\r\n        this.size = size;\r\n        this.name = name;\r\n        this.weight = weight;\r\n        this.value = value;\r\n        this.damage = damage;\r\n        this.description = description;\r\n        this.hitbonus = hitbonus;\r\n        this.armorpiercing = armorpiercing;\r\n    }\r\n}\r\n\r\nconst MeleeWeapons: MeleeWeapon[] = [\r\n    { size: 'small', name: 'Batons/hammers/sticks', damage: '1d4', weight: 500, value: 10 },\r\n    { size: 'small', name: 'Knife', damage: '1d4 + 1', weight: 100, value: 15, description: 'causes bleeding' },\r\n    { size: 'medium', name: 'Machete', damage: '1d6 + 1 ', hitbonus: '+1', weight: 300, value: 200, description: 'causes bleeding' },\r\n    { size: 'medium', name: 'Club', damage: '1d6', weight: 1000, value: 1 },\r\n    { size: 'medium', name: 'Short spear', damage: '1d8', hitbonus: '+1', armorpiercing: 1, weight: 500, value: 250, description: 'causes bleeding' },\r\n    { size: 'large', name: 'Longsword', damage: '1d8 +1', hitbonus: '+2 OQ, -2 CQ', armorpiercing: 1, weight: 800, value: 2000, description: 'causes bleeding' },\r\n    { size: 'large', name: 'Long spear', damage: '1d8 +1', hitbonus: '+4 OQ, -4 CQ', armorpiercing: 1, weight: 900, value: 900, description: 'causes bleeding' },\r\n    { size: 'large', name: 'Battleaxe', damage: '1d10 +1', hitbonus: '-2 CQ', armorpiercing: 2, weight: 1500, value: 1500, description: 'causes bleeding' },\r\n];\r\n\r\nexport default MeleeWeapons;","import Item from \"./Item\";\r\n\r\n\r\ninterface IArmor extends Item {\r\n    armorPenalty: number;\r\n    damageReduction: number;\r\n}\r\n\r\nclass Armor implements IArmor {\r\n    armorPenalty: number;\r\n    damageReduction: number;\r\n    weight: number;\r\n    value: number;\r\n    description?: string | undefined;\r\n    name: string;\r\n    constructor(name: string, armorPenalty: number, damageReduction: number, weight: number, value: number, description: string | undefined) {\r\n        this.name = name;\r\n        this.armorPenalty = armorPenalty;\r\n        this.damageReduction = damageReduction;\r\n        this.weight = weight;\r\n        this.value = value;\r\n        this.description = description;\r\n    }\r\n}\r\n\r\n\r\nconst Armors: Armor[] = [\r\n\r\n\r\n    {\r\n        name: \"heavy jacket\",\r\n        damageReduction: 2,\r\n        armorPenalty: -2,\r\n        value: 2000,\r\n        weight: 4000,\r\n        description: \"Most winter jackets, thick layers of clothing, etc counts in this category. Also tends to protect against exposure\",\r\n    },\r\n    {\r\n        name: \"soft kevlar vest\",\r\n        damageReduction: 3,\r\n        armorPenalty: 0,\r\n        value: 4000,\r\n        weight: 1000,\r\n        description: \"Soft thin kevlar fabric made from nylon-like polymers gives some protection, comes with combat helmet.\",\r\n    },\r\n    {\r\n        name: \"ceramic plated kevlar body armor\",\r\n        damageReduction: 8,\r\n        armorPenalty: -1,\r\n        value: 10000,\r\n        weight: 3000,\r\n        description: \"Soft kevlar over light ceramic plates gives strong protection from all sources, comes with combat helmet with face guard.\",\r\n    },\r\n    {\r\n        name: \"titan alloy plated kevlar body armor\",\r\n        damageReduction: 10,\r\n        armorPenalty: -1,\r\n        value: 11000,\r\n        weight: 5000,\r\n        description: \"Soft kevlar over light ceramic plates gives strong protection from all sources, comes with combat helmet with face guard.\",\r\n    },\r\n    {\r\n        name: \"carbon polymer suit\",\r\n        damageReduction: 6,\r\n        armorPenalty: 0,\r\n        value: 9000,\r\n        weight: 2000,\r\n        description: \"thin and flexible and very strong vest that offers maximum protection without interfering with any movement and can be worn under clothes\",\r\n    },\r\n    {\r\n        name: \"Powered exoskeleton\",\r\n        damageReduction: 4,\r\n        armorPenalty: 1,\r\n        value: 12000,\r\n        weight: 5000,\r\n        description: \"Exoskeletal frame worn over body that helps movement and offers some protection, increases strength by +1 up to 7\",\r\n    },\r\n    {\r\n        name: \"Powered Armor\",\r\n        damageReduction: 10,\r\n        armorPenalty: 1,\r\n        value: 22000,\r\n        weight: 7000,\r\n        description: \"Heavy exoskeletal frame with cermic plates to offer additional protection, increases strength by +2 up to 8\",\r\n    },\r\n    {\r\n        name: \"Titanic Power Armor\",\r\n        damageReduction: 15,\r\n        armorPenalty: -1,\r\n        value: 36000,\r\n        weight: 9000,\r\n        description: \"A personal tank suit is more like a person shaped tank you enter than a body armor, offers complete environmental protection, increases strength by +3 up to 9\",\r\n    },\r\n    {\r\n        name: \"Merlion warrior armor\",\r\n        damageReduction: 12,\r\n        armorPenalty: 3,\r\n        value: 52000,\r\n        weight: 4000,\r\n        description: \"Light exoskeletal frame covered by a complex and extremely durable alloy wireframe, offers substantial movement benefits as well as +3 strength and +2 perception\",\r\n    },\r\n\r\n];\r\n\r\nexport default Armors;","\r\nimport React, { CSSProperties, useState } from \"react\";\r\nimport Section from \"./Section\"\r\nimport Firearms, { FireArm, AmmoInformation, AmmoTypesInformation } from \"../equipment/Firearms\";\r\nimport MeleeWeapons, { MeleeWeapon } from \"../equipment/MeleeWeapons\";\r\nimport Armors from \"../equipment/Armors\";\r\nimport Ellipsis from \"../Ellipsis\";\r\nimport Indexer, { Indexed } from \"../Indexer\";\r\n\r\nconst Equipment: React.FC = () => {\r\n    return (<Section title='Equipment'>\r\n        <h2>Equipment</h2>\r\n        <p>Euipment is everything your character can wear on their body or hold and use.</p>\r\n        <Indexer title='equipment'>\r\n            <Indexed title='Weapons'>\r\n                <h4>Glossary</h4>\r\n                <table>\r\n                    <thead><tr><th>abbreviation</th><th>meaning</th></tr></thead>\r\n                    <tbody>\r\n                        <tr><td>AP</td><td>Armor piercing, this weapon ignores this much damage, example AP 2 = ignores up to 2 damage reduction</td></tr>\r\n                        <tr><td>D</td><td>Damage, example D 1d8+1 = roll a 8 sided dice, add 1</td></tr>\r\n                        <tr><td>HB (CQ/OQ)</td><td>Hit bonus, close quarters/open quarters, example HB 2 = add 2 to skill roll, HB -3 CQ = subtract 3 if in close quarters</td></tr>\r\n                    </tbody>\r\n                </table>\r\n                <h4>Melee weapons</h4>\r\n\r\n                <WeaponTable data={MeleeWeapons}></WeaponTable>\r\n                <p>Small weapons gain 1/4 of your strength (rounded down) as a damage bonus, they are characterized as one handed weapon that can be easily concealed\r\n            <br />\r\n            Medium weapons gain 1/3 of your strength (rounded down) as a bonus damage, they are characterized as one handed weapons that are too big to be easily concealed\r\n            <br />\r\n            Large weapons gain 1/2 of your strength (rounded down) as bonus damage, they are characterized as two handed weapons and often are too big for close quarter combat\r\n        </p>\r\n                <p>Close quarters is defined as being adjecent to 2 or more walls or large obstacles, open quarters is empty space around you (nothing to take cover behind)</p>\r\n\r\n                <h4>Guns</h4>\r\n                <p>All firearms cause bleeding</p>\r\n                <FirearmTable data={Firearms} />\r\n\r\n                <h5>Firearm modifications</h5>\r\n                <p>In addition to the various weapons there are modifications which can affect the firearms performance in various ways</p>\r\n                <ul>\r\n                    <li>\r\n                        <b>Scope</b> reduces long range penalties to half when using snipe or aimed shot<br />\r\n                Weight +200g<br />\r\n                Cost +300c\r\n            </li>\r\n                    <li>\r\n                        <b>Silencer</b> Reduces the sound of a ballistic firearm (handguns, submachine guns, rifles, machineguns)<br />\r\n                Sound reduced by 75%<br />\r\n                Armor piercing reduced by 1 (minimum 0)<br />\r\n                Range reduced by 10%<br />\r\n                Cost bonus +400\r\n            </li>\r\n                    <li>\r\n                        <b>Heavy Silencer</b> Reduces the sound of a ballistic firearm (handguns, submachine guns, rifles, machineguns)<br />\r\n                Sound reduced by 95%<br />\r\n                Armor Piercing reduced by 2 (minimum 0)<br />\r\n                Ragne reduced by 25%<br />\r\n                Cost bonus +500\r\n            </li>\r\n                    <li>\r\n                        <b>Laser Target</b> Adds a laser target which helps aiming<br />\r\n                Aim Bonus +2<br />\r\n                Everyone can see where you're aiming<br />\r\n                Cost bonus +600\r\n            </li>\r\n                    <li>\r\n                        <b>Heavy Stock</b> Improves recoil control<br />\r\n                Aim Bonus +1<br />\r\n                Damage bonus +1<br />\r\n                Weight bonus +40%<br />\r\n                Cost bonus +20%\r\n            </li>\r\n                </ul>\r\n\r\n                <h4>Ammunition</h4>\r\n                <p>All ammunition comes various forms and serve different purposes and come in different costs</p>\r\n                {AmmoTable(AmmoTypesInformation)}\r\n                <b>Modifications</b>\r\n                <ul>\r\n                    <li><b>Standard</b>, default version of the ammo, assumes the weapons stats unchanged</li>\r\n                    <li><b>Tracer</b>, tracer rounds have built in pyrotechnics which makes the bullet projectile more visible, adds +1 to hit. Cost +100%</li>\r\n                    <li><b>Hollow point</b>, hollow point bullets are designed to shatter upon impact, adds +3 damage, reduces armor piercing to zero and doubles damage reduction from armor</li>\r\n                    <li><b>Armor Piercing</b> bullet made of hard alloy instead of lead, adds +4 armor piercing, -1 damage, cost +10%</li>\r\n                    <li><b>Incendiary</b> bullet is designed to superheat, allows it to melt metal upon impact and cause massive damage +2 armor piercing and +1 damage. Cost +250%</li>\r\n                    <li><b>Shell</b>, contains multiple pellets which spread and gives to hit bonus</li>\r\n                    <li><b>Slug</b>, contains a single metal slug, doubles shotgun range, adds +1 armor piercing, removes base hit bonus from weapon.</li>\r\n                    <li><b>Explosive</b>, contains an alloy which explodes on contact, adds +2 damage, +1 armor piercing, removes base hit bonus from weapon. Cost +100%</li>\r\n                    <li><b>Plasma Bomb</b>, Uses the bomb to initiate a thermo-nuclear fusion reaction, releasing super heated plasma. Double damage and area of effect. Cost +400%</li>\r\n                    <li><b>Frag</b>, releases metal fragments at extreme velocity. Double damage and damage reduction from armor/cover.</li>\r\n                    <li><b>Homing</b>, homes in on target, requires snipe shot. Adds +4 to hit. cost +50%.</li>\r\n                </ul>\r\n            </Indexed>\r\n            <Indexed title='Body Armors'>\r\n                <p>Armors come in many forms, anything that offers either damage reduction or armor penalty counts as body armor. Damage reduction is applied to any incoming damage, armor penalty is applied to all agility based rolls. Every time an armor fails to absorb all damage it loses damage reduction by 1. If it hits 0 then it is no longer able to offer protection</p>\r\n                <table>\r\n                    <thead><tr>\r\n                        <th>name</th><th>damage reduction</th><th>armor penalty</th><th>value</th><th>weight</th><th>description</th>\r\n                    </tr></thead>\r\n                    <tbody>\r\n                        {Armors.map(armor => {\r\n                            return <tr>\r\n                                <td> {armor.name} </td>\r\n                                <td> {armor.damageReduction} </td>\r\n                                <td> {armor.armorPenalty} </td>\r\n                                <td> {armor.value} </td>\r\n                                <td> {weightConverter(armor.weight)} </td>\r\n                                <td> {armor.description} </td>\r\n                            </tr>\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            </Indexed>\r\n            <Indexed title='Tools'>\r\n                <table>\r\n                    <thead><tr>\r\n                        <th>name</th><th>value</th><th>weight</th><th>description</th>\r\n                    </tr></thead>\r\n                    <tbody>\r\n                        <tr> <td>Pocket Computer</td><td>2000 c</td><td>1kg</td><td>Basically a futuristic smartphone.\r\n                            Allows user to substitute computer roll for any knowledge roll.</td> </tr>\r\n                        <tr> <td>Jetpack</td><td>14000 c</td><td>6kg</td><td>Allows for short bursts which propel the user. +20 to jump rolls, prevents fall damage</td> </tr>\r\n                        <tr> <td>Stealth Cover</td><td>19000 c</td><td>1.8kg</td><td>Meta-material which bends light around it as it passes through, giving the illsion of invisibility. Only works for visible light (not infra red or ultra violet). +20 to hide (negated by infra-red or ultra-violet vision)</td> </tr>\r\n                        <tr> <td>Scope</td><td>600 c</td><td>300g</td><td>Scope with 2x/4x/8x/15x/20x zoom</td> </tr>\r\n                        <tr> <td>Infrared googles</td><td>900 c</td><td>200g</td><td>Allows the user to see in infrared</td> </tr>\r\n                        <tr> <td>Ultraviolet googles</td><td>1600 c</td><td>300g</td><td>Allows the user to see in ultra violet</td> </tr>\r\n                        <tr> <td>X-ray camera</td><td>5000 c</td><td>1.2kg</td><td>Portable x-ray camera, requires source of x rays to see anythign</td> </tr>\r\n                        <tr> <td>Digital hacking tool</td><td>3500 c</td><td>2kg</td><td>Assortment of devices used for hacking digital keys, must be usedin combination with computer</td> </tr>\r\n                        <tr> <td>Climbing gear</td><td>1700 c</td><td>3kg</td><td>Assorted tools for climbing, allows for climbing on sheer surfaces, gives +10 to climbing rolls</td> </tr>\r\n                        <tr> <td>Medikit</td><td>4100 c</td><td>2.5kg</td><td>Assorted tools for emergency field surgery and aid.</td> </tr>\r\n                        <tr> <td>Ballistic kit</td><td>400 c</td><td>300g</td><td>Assorted tools for maintaining firearms</td>  </tr>\r\n                        <tr> <td>SCUBA suit</td><td>12000 c</td><td>6g</td><td> </td>  </tr>\r\n                        <tr> <td> </td><td>0 c</td><td>0g</td><td> </td>  </tr>\r\n                        <tr> <td> </td><td>0 c</td><td>0g</td><td> </td>  </tr>\r\n                        <tr> <td> </td><td>0 c</td><td>0g</td><td> </td>  </tr>\r\n                        <tr> <td> </td><td>0 c</td><td>0g</td><td> </td>  </tr>\r\n                        <tr> <td> </td><td>0 c</td><td>0g</td><td> </td>  </tr>\r\n                        \r\n                    </tbody>\r\n                </table>\r\n            </Indexed>\r\n            <Indexed title='Quality and Condition'>\r\n                <p>Quality and condition are optional rules that can increase variety and make items feel more personal.</p>\r\n                <h4>Condition</h4>\r\n                <p>Condition refers to the wear and tear of an item that is used in skill checks, it is also affected by direct damage and repair.</p>\r\n                <table>\r\n                    <thead>\r\n                        <tr><th>Condition</th><th>Effect</th><th>Value</th></tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr> <td>Pristine</td><td>+2</td><td>100%</td></tr>\r\n                        <tr><td>Intact</td><td>+1</td><td>90%</td></tr>\r\n                        <tr><td>Normal</td><td>+/-0</td><td>80%</td></tr>\r\n                        <tr><td>Used</td><td>-1</td><td>70%</td></tr>\r\n                        <tr><td>Worn</td><td>-2</td><td>60%</td></tr>\r\n                        <tr><td>Damaged</td><td>-3</td><td>50%</td></tr>\r\n                        <tr><td>Broken</td><td>-4</td><td>40%</td></tr>\r\n                    </tbody>\r\n                </table>\r\n                <p>When an item has been used a number of times equal to the users skill it drops in condition by 1 step, a repair skill check can prevent this. A failed repair can cause the quality to drop.</p>\r\n                <p>Someone who knows how to repair an item can always choose to repair them, each time lets you increase the condition by 1 step.</p>\r\n                <p>An item that is allowed to deteriorate below broken can no longer be used for its intended purpose, it is completely ruined.</p>\r\n                <p>Any item is always assumed to be at pristine quality if possible, the player may choose to buy a used item, at which it will cost less. Multiplie factors aways appy multiplicative, a broken trash item costs x 0.4 x 0.4 = 0.16, or 16% of its base value, buying it at start costs therefore 8%.</p>\r\n                <p>Players choosing to buy a house using these factors will take the combined effects to their mental health.</p>\r\n                <h4>Quality</h4>\r\n                <p>Quality refers to the materials used, the precision of the craft and it can even refer to if it's made for one person in particular</p>\r\n                <table>\r\n                    <thead>\r\n                        <tr><th>Quality</th><th>Effect</th><th>Value</th></tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr><td>Superb</td><td>+3</td><td> 1000%</td></tr>\r\n                        <tr><td>Great</td><td>+2</td><td> 300%</td></tr>\r\n                        <tr><td>Good</td><td>+1</td><td> 150%</td></tr>\r\n                        <tr><td>Normal</td><td>+/-0</td><td> 100%</td></tr>\r\n                        <tr><td>Poor</td><td>-1</td><td>90%</td></tr>\r\n                        <tr><td>Bad</td><td>-2</td><td> 70%</td></tr>\r\n                        <tr><td>Awful</td><td>-3</td><td>50%</td></tr>\r\n                        <tr><td>Trash</td><td>-4</td><td> 40%</td></tr>\r\n                    </tbody>\r\n                </table>\r\n                <p>Improving the quality of an item is not possible without supplying new material, these materials need to be of equivalent or higher quality, a failed attempt will consume the materials. A badly failed will reduce condition.</p>\r\n                <p>Items with quality below trash can not be used.</p>\r\n                <p>Items with quality great, superb, awful and trash can generally not be bought on the mainstream market.</p>\r\n            </Indexed>\r\n        </Indexer>\r\n\r\n    </Section>);\r\n}\r\n\r\n\r\nconst weightConverter = (grams: number) => {\r\n\r\n    if (grams < 1000) return `${grams.toFixed(0)}g`;\r\n    if (grams < 1000 * 1000) return `${(grams / 1000).toFixed(1)}kg`;\r\n    return `${(grams / 100000).toFixed(4)} tons`;\r\n\r\n}\r\n\r\n\r\ninterface WeaponTableProps {\r\n    data: MeleeWeapon[];\r\n}\r\n\r\nconst WeaponTable: React.FC<WeaponTableProps> = ({ data }) => {\r\n    const s: CSSProperties = {\r\n        borderLeft: '1px dotted lightgrey'\r\n    }\r\n\r\n    return (<table>\r\n        <thead>\r\n            <tr>\r\n                <th>Size</th>\r\n                <th>Name</th>\r\n                <th>Damage</th>\r\n                <th>AP</th>\r\n                <th>HB</th>\r\n                <th>Weight</th>\r\n                <th>Value</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {data.map(weapon => {\r\n                return <tr>\r\n                    <td style={s}>{weapon.size}</td>\r\n                    <td style={s}>{weapon.name}</td>\r\n                    <td style={s}>{weapon.damage}</td>\r\n                    <td style={s}>{weapon.armorpiercing}</td>\r\n                    <td style={s}>{weapon.hitbonus}</td>\r\n                    <td style={s}>{weightConverter(weapon.weight)}</td>\r\n                    <td style={s}>{weapon.value} c</td>\r\n                </tr>\r\n            })}\r\n        </tbody>\r\n    </table>);\r\n}\r\n\r\ninterface FirearmTableProps {\r\n    data: FireArm[];\r\n}\r\n\r\nconst FirearmTable: React.FC<FirearmTableProps> = ({ data }) => {\r\n    return (<table>\r\n        <thead>\r\n            <tr>\r\n                <th>Class</th>\r\n                <th>Name</th>\r\n                <th>Damage</th>\r\n                <th>AP</th>\r\n                <th>HB</th>\r\n                <th>Range</th>\r\n                <th>Action</th>\r\n                <th>Ammo/Cap</th>\r\n                <th>Weight</th>\r\n                <th>Value</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {data.map(f => FireArmRow(f))}\r\n        </tbody>\r\n    </table>)\r\n}\r\n\r\nconst firearmRowStyle: CSSProperties = {\r\n    cursor: 'pointer'\r\n};\r\n\r\nconst FireArmRow = (f: FireArm) => {\r\n    const [descriptionOpen, setDescriptionOpen] = useState(false);\r\n    return (<><tr style={firearmRowStyle} onClick={() => setDescriptionOpen(!descriptionOpen)}>\r\n        <td>{f.fireArmClass}</td>\r\n        <td>{f.name}</td>\r\n        <td>{f.damage}</td>\r\n        <td>{f.armorpiercing || 0}</td>\r\n        <td>{f.hitbonus || 0}</td>\r\n        <td>{f.range}</td>\r\n        <td>{f.fireAction.join(', ')}</td>\r\n        <td>{f.capacity} ({f.ammo}) {f.rps !== undefined ? '/ rpr: ' + f.rps * 6 : null}</td>\r\n        <td>{weightConverter(f.weight)}</td>\r\n        <td>{f.value} c</td>\r\n    </tr>\r\n        {descriptionOpen && <tr><td colSpan={10}><i> <Ellipsis text={f.description} cutOff={100} /></i></td></tr>}\r\n    </>);\r\n}\r\nconst bottomStyle: CSSProperties = {\r\n    borderBottom: '1px dotted black'\r\n}\r\nconst AmmoTable = (ammo: AmmoInformation[]) =>\r\n    <table>\r\n        <thead>\r\n            <tr>\r\n                <th>Type</th>\r\n                <th>Cost (per 1)</th>\r\n                <th>Weight (pet 1)</th>\r\n                <th>Modifications</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {ammo.map(a =>\r\n                <><tr>\r\n                    <td>{a.ammo}</td>\r\n                    <td>{a.cost}</td>\r\n                    <td>{a.weight}</td>\r\n                    <td>\r\n                        {a.types.join(',')}\r\n                    </td>\r\n                </tr>\r\n                    <tr>\r\n                        <td style={bottomStyle} colSpan={4}>{a.description}</td>\r\n                    </tr>\r\n                </>)}\r\n        </tbody>\r\n    </table>;\r\n\r\nexport default Equipment;","import React, { useState } from \"react\";\r\nimport Section from \"./Section\";\r\nimport Indexer, { Indexed } from \"../Indexer\";\r\n\r\n\r\nconst Wealth: React.FC = () => {\r\n    return <Section title='Wealth'>\r\n\r\n\r\n        <h2>Wealth</h2>\r\n        <i>Personal wealth varies greatly, while there are ultra rich people players may not start as one. In addition, due to the lack of widespread extreme poverty players will generally start of with wealth in similar orders of magnitude.</i>\r\n        <Indexer title='wealth'>\r\n            <Indexed title='Starting wealth'>\r\n                <p>Every character starts off with a flat 1d100 x 1d100 c </p>\r\n                <WealthRoller />\r\n            </Indexed>\r\n            <Indexed title='Wealth from age'>\r\n\r\n                <p>Additionally your character gets money from working and saving up over time. Gaining different amounts at different stages</p>\r\n                <li>\r\n                    <ul>Age 20-29: 200 c / year</ul>\r\n                    <ul>Age 30-49: 400 c / year</ul>\r\n                    <ul>Age 50-69: 200 c / year</ul>\r\n                    <ul>Age 60-79: 100 c / year</ul>\r\n                    <ul>Age 80+: 50 c / year</ul>\r\n                </li>\r\n                <p>This is then multiplied by your profession, keep in mind that your your character has different professions over different ages then you need to apply those per category</p>\r\n                <p>Professions also require a certain amount of skill point investment (perks count), with higher multiplier at higher rates</p>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Profession</th>\r\n                            <th>Skills</th>\r\n                            <th>1st mult req</th>\r\n                            <th>1st mult</th>\r\n                            <th>2nd mult req</th>\r\n                            <th>2n mult</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>None of the below</td>\r\n                            <td>any</td>\r\n                            <td>300</td>\r\n                            <td>x1.5</td>\r\n                            <td>400</td>\r\n                            <td>x2</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Doctor</td>\r\n                            <td>Medicine</td>\r\n                            <td>90</td>\r\n                            <td>3x</td>\r\n                            <td>120</td>\r\n                            <td>4x</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Engineer</td>\r\n                            <td>Computer, Mechanics</td>\r\n                            <td>80</td>\r\n                            <td>x2</td>\r\n                            <td>140</td>\r\n                            <td>x2.5</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Scientist</td>\r\n                            <td>computer, science</td>\r\n                            <td>120</td>\r\n                            <td>x1.5</td>\r\n                            <td>140</td>\r\n                            <td>x2</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Pilot</td>\r\n                            <td>Pilot</td>\r\n                            <td>80</td>\r\n                            <td>x1.5</td>\r\n                            <td>120</td>\r\n                            <td>x2</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Salesman</td>\r\n                            <td>persuation, empathy</td>\r\n                            <td>60</td>\r\n                            <td>x1.5</td>\r\n                            <td>90</td>\r\n                            <td>x2</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Soldier/Police</td>\r\n                            <td>firearms, survival, stealth, combat, athletics, investigation</td>\r\n                            <td>120</td>\r\n                            <td>x1.5</td>\r\n                            <td>180</td>\r\n                            <td>x3</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Attorney</td>\r\n                            <td>empathy, intimidation, persuation, subtrefuge</td>\r\n                            <td>160</td>\r\n                            <td>x2</td>\r\n                            <td>240</td>\r\n                            <td>x3</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Entrepreneur/Trader/Middle Management</td>\r\n                            <td>empathy, intimidation, investigation, persuation, subtrefuge</td>\r\n                            <td>150</td>\r\n                            <td>x1.5</td>\r\n                            <td>250</td>\r\n                            <td>x2.5</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </Indexed>\r\n            <Indexed title='Starting items'>\r\n                <p>Any items/housing/etc you buy at character creation cost 50% less, for example a computer costs only 1000 c if you buy it at character creation.</p>\r\n                <p>Additionally any item costing 10,000 c (before discount) or more may be paid via partial payment, you may spend up to 100x your total starting wealth on any item where you pay 1/200 of its value every month for 30 years (this is to include principal etc)</p>\r\n            </Indexed>\r\n            <Indexed title='Housing'>\r\n                <p>You may choose to buy a house or apartment using a partial payment mortage, costing 40,000 c per square meter (min 20)</p>\r\n                <p>If not you may choose to rent a house or apartment for a monthly fee of 100 c per square meter (min 20)</p>\r\n                <p>In either of these are included running water, electricity, internet connection, food is an additional 3000 c per month generally</p>\r\n                <p>You may also choose to be homeless or even sell your house at the start of the game, however take note that being on your own is extremely dangerous and not recommended</p>\r\n            </Indexed>\r\n            <Indexed title='Your job'>\r\n\r\n                <p>It is recommended that you start out with a job, a job will pay out 8,000 c a month. If you choose a job in the above tabel the multiplier also applies to this amount.</p>\r\n                <h4>An adventurer job</h4>\r\n                <p>Once the game starts the DM may choose to give your character an adventuring job of some description, the recommended amount is 10,000 c per month plus bonus based on performance. Or 4,000 c if housing and food is provided by the job.</p>\r\n                <h4>Grand Larceny</h4>\r\n                <p>Crime generally doesn't pay, but your character may choose to start off with a criminal record. Roll 1d6 if you choose to be a criminal.<br />\r\n        It is also expected that your character has spent at least 30 points into the larceny skill</p>\r\n                <table>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>1</td>\r\n                            <td>You have been caught multiple times for your crimes and are a well known criminal, you start with reduced privileges according to the DMs discression and you start off with 50% less wealth</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>2</td>\r\n                            <td>You have been caught at least once and as such are a known criminal, you may be recognized and forfeit any profession mutliplier.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>3</td>\r\n                            <td>You have done some small petty crime and never been caught for it, you start with 500 c extra.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>4</td>\r\n                            <td>You have regularly committed petty crimes and never been caught, you start with 1,000 c extra.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>5</td>\r\n                            <td>You have committed at least one felony (violent crime) and is suspected for it, you start with 500 c extra</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>6</td>\r\n                            <td>You are a successful career criminal, the law enforcement knows you are guilty but can't prove it, you have several connections and start with 3,000 c extra.</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </Indexed>\r\n        </Indexer>\r\n    </Section>\r\n}\r\n\r\nconst Roll1D100 = () => Math.floor((Math.random() * 100) + 1);\r\n\r\nconst WealthRoller = () => {\r\n    const [firstD100, setFirstD100] = useState(0);\r\n    const [secondD100, setSecondD100] = useState(0);\r\n    const ReRoll = () => {\r\n        setFirstD100(Roll1D100());\r\n        setSecondD100(Roll1D100());\r\n    }\r\n    return <><button onClick={() => ReRoll()}>Roll</button>{firstD100} x {secondD100} = {firstD100 * secondD100} c</>\r\n}\r\n\r\nexport default Wealth;","import React from \"react\";\r\nimport Section from \"./Section\";\r\n\r\n\r\nconst Vehicles: React.FC = () => {\r\n    return <Section title='Vehicles'>\r\n        <h3>Vehicles</h3>\r\n        <table>\r\n            <thead><tr>\r\n                <th>name</th><th>value</th><th>class</th><th>description</th>\r\n            </tr></thead>\r\n            <tbody>\r\n                <tr> <td>bicyle</td><td>1000 c</td><td>simple</td><td>simple bicycle</td> </tr>\r\n\r\n                <tr> <td>motorcycle</td><td>5,000 c</td><td>simple</td><td>electric motorcycle</td> </tr>\r\n                <tr> <td>quadbike</td><td>6,000 c</td><td>simple</td><td>electric quadbike</td> </tr>\r\n\r\n                <tr> <td>sedan</td><td>20,000 c</td><td>car</td><td>basic electric car</td> </tr>\r\n                <tr> <td>van</td><td>40,000 c</td><td>car</td><td>electric van, lots of space</td> </tr>\r\n                <tr> <td>truck</td><td>80,000 c</td><td>car</td><td>electric truck, containers not included</td> </tr>\r\n                <tr> <td>campervan</td><td>90,000 c</td><td>car</td><td>mobile living space</td> </tr>\r\n\r\n                <tr> <td>paddle boat</td><td>2,000 c </td><td>boat</td><td>simple paddleboat</td> </tr>\r\n                <tr> <td>speed boat</td><td>5,0000 c </td><td>boat</td><td>electric speedboat</td> </tr>\r\n\r\n                <tr> <td>yacht</td><td>100,000 c </td><td>ship</td><td>luxury mobile living space</td> </tr>\r\n                <tr> <td>cruiser</td><td>1,000,000 c </td><td>ship</td><td>massive luxury seaside cruiser</td> </tr>\r\n                <tr> <td>battleship</td><td>140,000,000 c</td><td>ship</td><td>massive ship armed with various missiles</td> </tr>\r\n\r\n                <tr> <td>submarine</td><td>70,000,000 c</td><td>submarine</td><td>submarine armed with torpedoes</td> </tr>\r\n\r\n                <tr> <td>small plane</td><td>15,000 c</td><td>airplane</td><td>simple electric airplane, 2 seats</td> </tr>\r\n                <tr> <td>jumojet</td><td>90,000,000 c</td><td>airplane</td><td>huge electric airplane, 200 seats</td> </tr>\r\n                <tr> <td>fighterjet</td><td>40,000,000 c</td><td>airplane</td><td>armed airplane capable of hypersonic speed, 2 seats</td> </tr>\r\n\r\n                <tr> <td>rocket ship</td><td>450,000,000 c</td><td>spaceship</td><td>massive multistage ship using chemical thrusters for planetary ascent, fusion propulsion in space</td> </tr>\r\n                <tr> <td>spaceplane</td><td>800,000,000 c</td><td>spaceship/airplane</td><td>hypersonic single stage spaceplane equipped with fusion propuslion</td> </tr>\r\n\r\n                <tr> <td>FTL ship</td><td>2,000,000,000 c </td><td>FTL</td><td>spaceship equipped with hyperdrive capable of faster than light travel</td> </tr>\r\n            </tbody>\r\n        </table>\r\n    </Section>\r\n}\r\n\r\nexport default Vehicles;","import React from 'react';\r\nimport Section from './Section';\r\n\r\nconst CharacterSheetOverview = () => <Section title='Character sheet overview'>\r\n    <h1>Character sheet overview</h1>\r\n    <p>This is a quick look at each part of the character sheet, going section by section, top to bottom, left to right</p>\r\n\r\n    <h4>Name</h4>\r\n    <p>The name of the character, this should be what you want other players and the game master to refer to you in when they address you in character</p>\r\n\r\n    <h4>Gender</h4>\r\n    <p>Your characters sex and gender, note that Merlions have different sexes and genders than humans and shambras</p>\r\n\r\n    <h4>Species</h4>\r\n    <p>Which species is your character? Human, Shambra, Merlion, Nekovian and Synthoid are the valid options. See more under World & Lore -{\">\"} Humans/Merlions/Shambras/Nekovians/Synthoids</p>\r\n\r\n    <h4>Age</h4>\r\n    <p>The age of your character in Earth Years</p>\r\n\r\n    <h4>Character Points</h4>\r\n    <p>Character points are universally applicable experience points which can be used for anything. See more under Character Points and Experience.</p>\r\n\r\n    <h4>Experience multiplier</h4>\r\n    <p>How quickly you gain experience, depends on age and species. See more under Character Points and Experience.</p>\r\n\r\n    <h4>Background</h4>\r\n    <p>This should be a short synopsis of where you were born, lived and any noteworthy experiences you've had.</p>\r\n\r\n    <h4>Life</h4>\r\n    <p>Life refers to how much punishment your character can take before dying. Life is caluclated as strength + endurance + endurance. See health section for more information</p>\r\n\r\n    <h4>Mana</h4>\r\n    <p>Mana refers to how many spells you can cast per day, some spells use multiple points of mana. Mana is calculated as endurance + willpower + willpower</p>\r\n\r\n    <h4>Mental health</h4>\r\n    <p>Mental health refers to the state of your mind, it is caulcated as willpower + willpower. See more under Health</p>\r\n\r\n    <h4>Melee DB s / m / l</h4>\r\n    <p>Melee damage bonus, small / medium / large. You gain a damage bonus to melee weapons and unarmed attacks based on your strength. It's strength divided by 4, 3, 2 for small, medium and large. See more under Combat</p>\r\n\r\n    <h4>Homeworld</h4>\r\n    <p>Place of birth, eg. Earth or Mars or space</p>\r\n\r\n    <h4>Player</h4>\r\n    <p>The name of you, you is the player.</p>\r\n\r\n    <h4>Apperance traits</h4>\r\n    <p>How does your character look? Intensive eyes? Purple hair? Green pincers? Different colored tail? Tattoos? What would people notice if they saw your character. See more under Skills & Perks -{\">\"} Traits -{\">\"} Appearence Traits</p>\r\n\r\n    <h4>Strength</h4>\r\n    <p>Raw muscle strength, this affects health, carrying capacity, punching power.</p>\r\n\r\n    <h4>Endurance</h4>\r\n    <p>Endurance is your life force, modifies how far you can run, how much beer you can drink, how long you can survive a boxing match</p>\r\n\r\n    <h4>Agility</h4>\r\n    <p>Agility refers to hand eye coordination, reflexes, flexibility, balance and speed</p>\r\n\r\n    <h4>Perception</h4>\r\n    <p>Perception refers to your senses, awareness and alertness</p>\r\n\r\n    <h4>Intelligence</h4>\r\n    <p>Knowledge, memory, wisdom, the ability to think quickly and to contemplate deeply.</p>\r\n\r\n    <h4>Willpower</h4>\r\n    <p>Willpower refers to your sense of personality, force of will and self determination as well as natural leadership</p>\r\n\r\n    <h4>Personality traits</h4>\r\n    <p>What is your personality like? See more under Skills & Perks -{\">\"} Traits -{\">\"} Personality Traits</p>\r\n\r\n    <h4>Skills</h4>\r\n    <p>This is a non-exhaustive list of skills, Exp refers to how much experience points you have for the skill, rank is the number of points you have for it, most skills gain bonuses also from your base attributes (str/dex/end/int/will/per), see Perks & Traits -{\">\"} Skills for more information about each skill.</p>\r\n\r\n    <h4>Perks</h4>\r\n    <p>Perks are skill specializations, special abilities and modifiers you've acquired. See more under Skills & Perks -{\">\"} Perks</p>\r\n\r\n    <h4>Traits</h4>\r\n    <p>Traits are special mental and physical traits that modify how your character behaves and works, for the most part can only be aqcuired at character creation.</p>\r\n\r\n    <h4>Reputation</h4>\r\n    <p>Reputation refers to how well known you are and what groups of people think of you in various parts of the world</p>\r\n\r\n    <h4>Inventory</h4>\r\n    <p>Items in your pockets, backpack or otherwise stashed somewhere on your body.</p>\r\n\r\n    <h4>Equipment</h4>\r\n    <p>Items that are worn and able to be used immediately.</p>\r\n\r\n    <h4>Stash</h4>\r\n    <p>Items you own and have stashed away somewhere.</p>\r\n\r\n</Section>;\r\n\r\n\r\nexport default CharacterSheetOverview;","import React from 'react';\r\nimport MakeCharacter from '../components/playermanual/MakeCharacter';\r\nimport Combat from '../components/playermanual/Combat';\r\nimport Equipment from '../components/playermanual/Equipment';\r\nimport Wealth from '../components/playermanual/Wealth';\r\nimport Experience from '../components/playermanual/Experience';\r\nimport Vehicles from '../components/playermanual/Vehicles';\r\nimport Section from '../components/playermanual/Section';\r\nimport CharacterSheetOverview from '../components/playermanual/CharacterSheetOverview';\r\n\r\nconst PlayerManual: React.FC = () => {\r\n    return (<div>\r\n        <h1>The Player Manual</h1>\r\n        <p>This page is to help the player create characters and play the game, view each section below for more details.</p>\r\n        <hr />\r\n        <MakeCharacter key='pm1' />\r\n        <hr />\r\n        <CharacterSheetOverview key='pm2' />\r\n        <hr />\r\n        <Wealth key='pm3' />\r\n        <hr />\r\n        <Experience key='pm4' />\r\n        <hr />\r\n        <Combat key='pm5' />\r\n        <hr />\r\n        <Equipment key='pm6' />\r\n        <hr />\r\n        <Vehicles key='pm7' />\r\n        <hr />\r\n        <Health key='pm8' />\r\n    </div>);\r\n}\r\n\r\n\r\nconst Health = () =>\r\n    <Section title='health'>\r\n        <h3>Health</h3>\r\n        <i>There are two kinds of health, mental and physical. Injury to either will result in reduced ability and can lead to eventual death</i>\r\n        <h4>Physical Health</h4>\r\n        <p>\r\n            Physical health represents the integrity of body.\r\n        </p>\r\n        <p>If you are injured you take penalty to all physical activities with an equal amount of damage taken.</p>\r\n        <p>If your physical health (life) is reduced to zero you do not immediately die, rather you are partially incapacitated, any extraneous physical activity will cause you to take 1 damage</p>\r\n        <p>If your physical health reaches full negative (-100%) you become unconcious and start to die, you lose 1 life every x number of minutes (x = you endurance), once it hits -200% you are fully dead</p>\r\n        <h5>Pain and adrenaline</h5>\r\n        <p>When you receive an injury during combat your body will produce adrenaline, this prevents penalties to physical activities, it lasts 1 hour, each time it happens you lose 1 mental health.</p>\r\n        <h5>Painkillers</h5>\r\n        <p>Painkillers can reduce the penalty to physical activities by transfering them into mental penalties. The stronger the painkiller the more it dulls the mind.</p>\r\n        <h5>Recovery</h5>\r\n        <p>You heal physical injury generally slowly, you recover 1 per day that you do not perform any extraneous activity. If you perform extraneous activities you heal at the rate of 1 per 2 days. Recovery can not happen if you are injured, recovery starts the day after injury.</p>\r\n        <h4>Mental Health</h4>\r\n        <p>\r\n            Mental health represents the integrity of the mind.\r\n        </p>\r\n        <p>\r\n            If your mental health is injured you take a penalty to all mental activities equal to the amount of damage.\r\n        </p>\r\n        <p>Mental health injuries come from high levels of stress, over time it can accumulate.</p>\r\n        <p>While you can not directly die from mental health injury it can debilitate you, if you reach zero you enter a state of depression: mundane tasks require a roll, if you fail you lack the motivation to act and do nothing. Even in life threatening situations since your character has lost the will to live.</p>\r\n        <h5>Recovery</h5>\r\n        <p>Mental health recovery works similar to physical recovery, you recover 1 per day that you do not perform any highly stressful activity, in addition being exposed to a positive environment will increase it to 2 per day</p>\r\n    </Section>;\r\n\r\nexport default PlayerManual;"],"sourceRoot":""}