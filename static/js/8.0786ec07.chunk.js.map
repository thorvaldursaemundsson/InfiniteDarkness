{"version":3,"sources":["components/playermanual/Section.tsx","views/SkillPerkManual.tsx"],"names":["Section","title","tab","children","useState","isOpen","setIsOpen","tabSize","undefined","style","paddingLeft","onClick","perks","GetPerkList","SkillSection","GetSkillList","map","skill","name","description","useCases","uc","attribute","type","filter","p","perk","level","TraitSection","currentPerk","setCurrentPerk","GetTraits","trait","display","width","cost","SkillPerkManual"],"mappings":"wJAmBeA,IAXqB,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,IAAKC,EAAe,EAAfA,SAAe,EAClCC,oBAAS,GADyB,mBACvDC,EADuD,KAC/CC,EAD+C,KAE1DC,EAAU,IAGd,YAFYC,IAARN,IACAK,EAAUL,EAAM,MACb,yBAAKO,MAAO,CAAEC,YAAaH,IAC9B,kBAAC,IAAD,CAAQI,QAAS,kBAAML,GAAWD,KAAUJ,EAA5C,IAAoDI,EAAS,IAAM,KAClEA,GAAUF,K,0GCFbS,EAAQC,cACRC,EAAe,WACjB,OAAQ,6BACJ,sCACA,2IACCC,cAAeC,KAAI,SAAAC,GAAK,OACrB,oCAAE,kBAAC,IAAD,CAAShB,MAAOgB,EAAMC,MACpB,kBAAC,IAAD,CAAShB,IAAK,EAAGD,MAAM,QACnB,2BAAIgB,EAAME,aACV,oCACCF,EAAMG,SAASJ,KAAI,SAAAK,GAAE,OAAI,oCACtB,2BAAIA,EAAGH,MADe,OACDG,EAAGC,UADF,IACcD,EAAGE,KADjB,IAE1B,2BAAIF,EAAGF,kBAGX,kBAAC,IAAD,CAASjB,IAAK,EAAID,MAAM,SACpB,qCACCW,EAAMY,QAAO,SAAAC,GAAC,OAAIA,EAAER,OAASA,EAAMC,QAAMF,KAAI,SAAAU,GAAI,OAAI,oCAClD,4BAAKA,EAAKR,MACV,mCAFkD,KAEvB,GAAbQ,EAAKC,MAAW,6BAC7BD,EAAKP,oBAIR,mCAIhBS,EAAe,WAAO,IAAD,EACexB,mBAAS,IADxB,mBAChByB,EADgB,KACHC,EADG,KAEvB,OAAQ,6BACJ,sCACA,4NACA,kLACA,6FACCC,cAAYf,KAAI,SAAAgB,GACb,OAAQ,6BACJ,4BAAI,0BAAMvB,MAAO,CAAEwB,QAAS,eAAgBC,MAAO,UAAYF,EAAMd,MAArE,IAAmFW,IAAgBG,EAAMd,KACrG,kBAAC,IAAD,CAAQP,QAAS,kBAAMmB,EAAeE,EAAMd,QAA5C,KACA,kBAAC,IAAD,CAAQP,QAAS,kBAAMmB,EAAe,MAAtC,KAFJ,KAGCD,IAAgBG,EAAMd,KAAO,6BAC1B,2BAAG,mCAAH,KAAiBc,EAAMG,MACtBH,EAAMb,aAAqB,WAMjCiB,UAtDmB,WAC9B,OAAO,6BACH,kBAACtB,EAAD,MACA,kBAACc,EAAD","file":"static/js/8.0786ec07.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\ninterface ISection {\r\n    title: string;\r\n    tab?: number;\r\n}\r\n\r\nconst Section: React.FC<ISection> = ({ title, tab, children }) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    let tabSize = '0';\r\n    if (tab !== undefined)\r\n        tabSize = tab + 'px';\r\n    return <div style={{ paddingLeft: tabSize }}>\r\n        <Button onClick={() => setIsOpen(!isOpen)}>{title} {isOpen ? '-' : '+'}</Button>\r\n        {isOpen && children}\r\n    </div>;\r\n}\r\n\r\nexport default Section;","import React, { useState } from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport { GetTraits } from '../components/traits/Traits';\r\nimport { GetPerkList } from '../components/GetPerkList';\r\nimport { GetSkillList } from '../components/GetSkillList';\r\nimport Section from '../components/playermanual/Section';\r\n\r\nconst SkillPerkManual: React.FC = () => {\r\n    return <div>\r\n        <SkillSection />\r\n        <TraitSection />\r\n    </div>;\r\n}\r\nconst perks = GetPerkList();\r\nconst SkillSection = () => {\r\n    return (<div>\r\n        <h2>Skills</h2>\r\n        <p>Skills are the generic things a character can learn to do, every skill gains a bonus from it's main ability.</p>\r\n        {GetSkillList().map(skill =>\r\n            <><Section title={skill.name}>\r\n                <Section tab={5} title='uses'>\r\n                    <p>{skill.description}</p>\r\n                    <h4>Uses</h4>\r\n                    {skill.useCases.map(uc => <>\r\n                        <b>{uc.name}</b> - ({uc.attribute} {uc.type})\r\n                    <p>{uc.description}</p>\r\n                    </>)}\r\n                </Section>\r\n                <Section tab={5}  title='perks'>\r\n                    <h4>Perks</h4>\r\n                    {perks.filter(p => p.skill == skill.name).map(perk => <>\r\n                        <h5>{perk.name}</h5>\r\n                        <b>Cost</b>: {perk.level * 10}<br/>\r\n                        {perk.description()}\r\n\r\n                    </>)}\r\n                </Section>\r\n            </Section><hr/></>)}\r\n    </div>);\r\n}\r\n\r\nconst TraitSection = () => {\r\n    const [currentPerk, setCurrentPerk] = useState('');\r\n    return (<div>\r\n        <h2>Traits</h2>\r\n        <p>Traits are innate characteristics of a character, they can not be added or removed after the start of the game, some traits are purely negative, others positive, some have a combined effect</p>\r\n        <p>Traits often describe a characters behavior, characters with these traits are expected to roleplay in a way which does not conflict with that trait</p>\r\n        <p>It is recommended that a character have between 1 and 3 traits</p>\r\n        {GetTraits().map(trait => {\r\n            return (<div>\r\n                <h3><span style={{ display: 'inline-block', width: '200px' }}>{trait.name}</span> {currentPerk !== trait.name ?\r\n                    <Button onClick={() => setCurrentPerk(trait.name)}>?</Button> :\r\n                    <Button onClick={() => setCurrentPerk('')}>X</Button>} </h3>\r\n                {currentPerk === trait.name ? <div>\r\n                    <p><b>Cost</b>: {trait.cost}</p>\r\n                    {trait.description}</div> : null}\r\n            </div>);\r\n        })}\r\n    </div>)\r\n}\r\n\r\nexport default SkillPerkManual;"],"sourceRoot":""}