{"version":3,"sources":["components/general/Indexer.tsx","components/Lore/CharacterRoller.tsx","components/general/Ellipsis.tsx","components/playermanual/Experience.tsx","components/playermanual/MakeCharacter.tsx","components/playermanual/Combat.tsx","components/playermanual/Equipment.tsx","components/playermanual/Wealth.tsx","components/vehicles/Vehicles.ts","components/vehicles/LandVehicles.ts","components/vehicles/WaterVehicles.ts","components/vehicles/SpaceVehicles.ts","components/vehicles/AirVehicles.ts","components/vehicles/VehicleEditor.tsx","components/playermanual/Vehicles.tsx","components/playermanual/CharacterSheetOverview.tsx","components/playermanual/CarryingExhaustion.tsx","components/playermanual/Radiation.tsx","components/playermanual/Consumables.tsx","components/playermanual/Cybernetics.tsx","components/playermanual/HealthAndRest.tsx","components/playermanual/CharacterSizeAndSpeed.tsx","components/actioncards/DefaultActionCards.ts","components/actioncards/ActionCard.tsx","components/actioncards/ActionCards.tsx","views/PlayerManual.tsx"],"names":["Indexed","title","children","source","className","href","id","Indexer","index","anyChildren","indexedItems","child","x","undefined","props","push","map","i","js","chosenRoll","background","CharacterRoller","useState","characterData","setCharacterData","optionSelected","setOptionSelected","onChoose","onClick","rollCharacterDataAndSet","strength","numberOfDice","sidesPerDice","endurance","agility","perception","intelligence","willpower","cd","ar","c","style","sumN","length","n","reduce","a","b","rollCharacterData","dice","charData","counter","roll","setter","numbers","Math","floor","random","getAbility","age","racialMod","ability","find","pred","ageSpan","GenericCharacterRoller","raceData","startingAge","setAge","experiencePoints","experienceMultipler","isEdit","onChange","str","txt","explain","species","sizeOptions","racialMods","cursorStyle","cursor","Ellipsis","text","cutOff","isOpen","setIsOpen","substring","MakeCharacter","initiallyOpen","Section","humansData","shambrasData","merlionsData","nekovianData","synthsData","DamageTypes","Terrain","CombatStarts","Actions","Turns","Dodging","DamageReduction","Bleeding","MeleeAttacks","Blocking","RangedAttacks","Firearms","useCases","uc","name","attribute","description","results","r","key","SplashDamage","Distance","setN","strs","s","w","sqrt","Cover","DualWielding","MassiveDamage","Combat","plusMinus","abs","armorThSizeWide","width","ArmorTable","armors","bs","armor","ArmorRow","descriptionOpen","setDescriptionOpen","extra","armorType","pa","strengthMod","perceptionMod","damageAbsorbtion","damageReduction","minimumDamage","actionPointMod","bigNumberSeparator","cost","weight","colSpan","WeaponTable","data","borderLeft","weapon","size","writeDamageDice","damage","armorpiercing","hitbonus","weightConverter","value","strengthRequirement","FirearmTable","f","FireArmRow","firearmRowStyle","getAmmoInfo","ammo","AmmoTypesInformation","Error","splash","splashRange","splashRadius","lowDamageZone","fireArmClass","range","fireCost","fireAction","join","reload","capacity","rps","toFixed","AmmoTable","Fragment","types","t","charAt","toUpperCase","slice","loudness","hearingRange","deafnessRange","deafnessTime","Equipment","MeleeWeapons","FirearmCrafter","FirearmModifications","fm","effects","e","AmmoModifications","am","ArmorCrafter","bodySuits","armorPlates","powerArmors","integratedSystems","Condition","label","effect","valueModifier","Quality","Roll1D100","WealthRoller","firstD100","setFirstD100","secondD100","setSecondD100","WealthCalculator","multiplier","setMultiplier","credits","type","parseInt","target","parseFloat","Wealth","costLevels","cl","rank","nextRanks","Array","from","max","innerCounter","innerSummer","CostChart","nr","Experience","Electricity","Synthoil","RocketFuel","TritiumDeuterium","HyperMatter","MicroFusionCell","weightKg","input","output","convertionRatio","convertionSpeed","MicroFusionThruster","fuelUse","fuelUnitsConsumeRate","impulseKn","SmallHabitatSection","passengerCount","cargoPerPerson","isEnclosed","isLivingSpace","meterSquarePerPerson","LandVehicles","medium","passengers","cargoKg","fuelType","topSpeed","acceleration","parts","WaterVehicles","SpaceVehicles","airVehicleParts","rollAmounts","numberOf1d100","passengerDamage","airVehicleDamageTexts","damageAmountNumber","damageText","AirVehicles","quantity","vehicleReducer","state","dispatch","whatToUpdate","VehicleEditor","baseVehicle","useReducer","vehicle","passengersCount","impulseSum","p","m","ft","part","RollOMeter","partsList","amountList","damageAmounts","currentRolls","setCurrentRolls","partN","dmg","currentParts","setCurrentParts","spacing","convertNumberToText","das","filter","da","amount","rolls","v","d100","temp","forEach","rollAmount","landVehicleParts","waterVehicleParts","spaceVehicleParts","VehicleTable","vehicles","vehicleToEdit","setVehicleToEdit","onSelect","costConverter","VehicleRow","Vehicles","CharacterSheetOverview","shortWidth","sizes","CarryingCapacity","currentWeight","setCurrentWeight","cargoWeight","setCargoWeight","setStrength","previousGravity","setPreviousGravity","currentGravity","setCurrentGravity","currentSize","setCurrentSize","weightFactor","strengthFactor","penalty","textDecoration","Character","getCarryCapacity","Radiation","Consumables","Food","CharacterSizeMods","consumption","Cooking","u","Medicine","ConsumableMedicine","tool","charges","medicineSkillRolls","Tools","ConsumableTools","Weapons","ConsumableWeapons","Cybernetics","HealthAndRest","tdWidth","borderBottom","CharacterSizeAndSpeed","secondaryMod","averageHeight","averageWeight","speedBase","DefaultActionCards","actionPointUse","ActionCard","ActionCards","emptyFlexboxes","ac","array","RollingSkills","PlayerManual","route"],"mappings":"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","file":"static/js/3.47d3f2e9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ninterface IIndexedProps {\r\n    title: string;\r\n    source?: string | undefined;\r\n}\r\n\r\nexport const Indexed: React.FC<IIndexedProps> = ({ title, children, source }) => {\r\n    return <>\r\n        <h3><a className='notalink' href={'#' + title} id={title}>{title}</a> <a href={'#' + source}>^</a></h3>\r\n        {children}\r\n    </>;\r\n}\r\n\r\n\r\n\r\ninterface IIndexerProps {\r\n    title: string;\r\n}\r\n\r\nconst Indexer: React.FC<IIndexerProps> = ({ children, title }) => {\r\n\r\n    let index: string[] = [];\r\n    const anyChildren: any = children;\r\n\r\n    const indexedItems: JSX.Element[] = [];\r\n\r\n    for (var child in anyChildren) {\r\n        var x = anyChildren[child];\r\n        if (x.props.title === undefined) {\r\n        }\r\n        else {\r\n            indexedItems.push(<Indexed title={x.props.title} source={title}>{x.props.children}</Indexed>);\r\n            index.push(x.props.title);\r\n        }\r\n    }\r\n\r\n    return <>\r\n        <h4><a className='notalink' href={'#' + title} id={title}>Table of contents </a></h4>\r\n        {index.map(i => <h5> <a href={'#' + i}>{i}</a> </h5>)}\r\n        <hr />\r\n        {indexedItems.map(js => js)}\r\n    </>;\r\n}\r\n\r\n\r\n\r\n\r\nexport default Indexer;","import React, { useState } from \"react\";\r\nimport { EditNumber } from \"../general/HideText\";\r\nimport { IDice, IRaceData, IRacialMod } from \"../races/Races\";\r\n\r\n\r\n\r\nexport interface ICharacterData {\r\n    strength: number[];\r\n    agility: number[];\r\n    endurance: number[];\r\n    perception: number[];\r\n    willpower: number[];\r\n    intelligence: number[];\r\n}\r\n\r\ninterface ICharacterRollerProps extends IRacialMod {\r\n    onChoose?: (data: ICharacterData | undefined) => void;\r\n}\r\n\r\nconst chosenRoll: React.CSSProperties = { background: '#99FF99' };\r\n\r\nconst CharacterRoller: React.FC<ICharacterRollerProps> = (props) => {\r\n    const [characterData, setCharacterData] = useState<ICharacterData[]>([]);\r\n    const [optionSelected, setOptionSelected] = useState(-1);\r\n\r\n    const onChoose = props.onChoose;\r\n\r\n    return (<><div className=\"flexbox\">\r\n        <button onClick={() => rollCharacterDataAndSet(props, setCharacterData)}>Roll</button>\r\n\r\n        <div className=\"flexContainer\">\r\n            Strength {props.strength.numberOfDice}d{props.strength.sidesPerDice}<br />\r\n            Endurance {props.endurance.numberOfDice}d{props.endurance.sidesPerDice}<br />\r\n            Agility {props.agility.numberOfDice}d{props.agility.sidesPerDice}<br />\r\n            Perception {props.perception.numberOfDice}d{props.perception.sidesPerDice}<br />\r\n            Intelligence {props.intelligence.numberOfDice}d{props.intelligence.sidesPerDice}<br />\r\n            Willpower {props.willpower.numberOfDice}d{props.willpower.sidesPerDice}<br />\r\n        </div>\r\n\r\n        {characterData.map((cd, i, ar) => {\r\n            const c = optionSelected === i ? chosenRoll : null;\r\n            return <div className=\"flexContainer\" style={{ ...c }}>\r\n                {sumN(cd.strength)}<br />\r\n                {sumN(cd.endurance)}<br />\r\n                {sumN(cd.agility)}<br />\r\n                {sumN(cd.perception)}<br />\r\n                {sumN(cd.intelligence)}<br />\r\n                {sumN(cd.willpower)}<br />\r\n                <button onClick={() => setOptionSelected(i)}>X</button>\r\n            </div>\r\n        })}\r\n\r\n    </div>\r\n        {(onChoose !== undefined && characterData.length > 0 && optionSelected !== -1) ? <div className=\"flexContainer\"><button onClick={() => onChoose(characterData[optionSelected])}>Ok</button></div> : null}\r\n    </>);\r\n}\r\n\r\nexport const sumN = (n: number[]) => `  ${n.reduce(function (a, b) { return a + b; }, 0)}`;\r\nconst howManyTimesCanYouReroll = 3;\r\nexport const rollCharacterData = (dice: IRacialMod): ICharacterData[] => {\r\n    let charData: ICharacterData[] = [];\r\n    if (dice === undefined) {\r\n        return [{\r\n            strength: [4],\r\n            agility: [4],\r\n            endurance: [4],\r\n            perception: [4],\r\n            intelligence: [4],\r\n            willpower: [4]\r\n        }];\r\n    }\r\n    for (let counter = 0; counter < howManyTimesCanYouReroll; counter++) {\r\n        charData.push({\r\n            strength: roll(dice.strength),\r\n            agility: roll(dice.agility),\r\n            endurance: roll(dice.endurance),\r\n            perception: roll(dice.perception),\r\n            willpower: roll(dice.willpower),\r\n            intelligence: roll(dice.intelligence),\r\n        });\r\n    }\r\n    return charData;\r\n}\r\n\r\n\r\nexport const rollCharacterDataAndSet = (dice: IRacialMod, setter: React.Dispatch<React.SetStateAction<ICharacterData[]>>) => {\r\n    let charData: ICharacterData[] = rollCharacterData(dice);\r\n    setter(charData);\r\n}\r\n\r\nconst roll = (dice: IDice) => {\r\n    let numbers: number[] = [];\r\n    for (let counter = 0; counter < dice.numberOfDice; counter++) {\r\n        numbers.push(Math.floor((Math.random() * dice.sidesPerDice)) + 1);\r\n    }\r\n    return numbers;\r\n}\r\n\r\n\r\ninterface IGenericCharacterRoller {\r\n    raceData: IRaceData;\r\n    startingAge?: number | undefined;\r\n    onChoose?: (data: ICharacterData | undefined) => void;\r\n}\r\n\r\nconst getAbility = (age: number, racialMod: IRacialMod[], ability: 'strength' | 'agility' | 'endurance' | 'perception' | 'intelligence' | 'willpower') => {\r\n    var x = racialMod.find(pred => pred.ageSpan[0] < age && pred.ageSpan[1] > age);\r\n    if (x === undefined) {\r\n        x = racialMod[0];\r\n    }\r\n    switch (ability) {\r\n        case 'agility': return x.agility;\r\n        case 'strength': return x.strength;\r\n        case 'endurance': return x.endurance;\r\n        case 'perception': return x.perception;\r\n        case 'intelligence': return x.intelligence;\r\n        case 'willpower': return x.willpower;\r\n    }\r\n}\r\n\r\nexport const GenericCharacterRoller: React.FC<IGenericCharacterRoller> = ({ raceData, startingAge, onChoose }) => {\r\n    const [age, setAge] = useState(startingAge || 24);\r\n    return <div>\r\n        Age: {age}<br />\r\n        Starting Exp: {raceData.experiencePoints(age)}<br />\r\n        Multiplier Exp: {raceData.experienceMultipler(age)}<br />\r\n        {startingAge === undefined ?\r\n            <EditNumber isEdit=\"edit\" onChange={(str) => setAge(str)} txt={age} explain=\"\" /> : age}\r\n        <CharacterRoller\r\n            ageSpan={[age, age]}\r\n            species={'human'}\r\n            sizeOptions={['medium']}\r\n            strength={getAbility(age, raceData.racialMods, 'strength')}\r\n            agility={getAbility(age, raceData.racialMods, 'agility')}\r\n            endurance={getAbility(age, raceData.racialMods, 'endurance')}\r\n            intelligence={getAbility(age, raceData.racialMods, 'intelligence')}\r\n            willpower={getAbility(age, raceData.racialMods, 'willpower')}\r\n            perception={getAbility(age, raceData.racialMods, 'perception')}\r\n            onChoose={onChoose}\r\n        />\r\n    </div>;\r\n}\r\n\r\nexport default CharacterRoller;","import React, { useState, CSSProperties } from \"react\";\r\n\r\ninterface IEllipsisProps {\r\n    text: string | undefined;\r\n    cutOff: number;\r\n}\r\n\r\nconst cursorStyle: CSSProperties = {\r\n    cursor: 'pointer'\r\n}\r\n\r\nconst Ellipsis: React.FC<IEllipsisProps> = ({ text, cutOff }) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    if (text === undefined) return null;\r\n    if (text.length < cutOff)\r\n        return <p>{text}</p>\r\n    else if (!isOpen && text.length >= cutOff)\r\n        return <p className=\"ellipsis\" style={cursorStyle} onClick={() => setIsOpen(true)}>{text.substring(0, cutOff)}...</p>\r\n    else return <p className=\"ellipsis\" style={cursorStyle} onClick={() => setIsOpen(false)}>{text}</p>\r\n}\r\n\r\nexport default Ellipsis;","import React from \"react\";\r\nimport Section from \"../Section\";\r\n\r\n\r\nconst Experience: React.FC = () => {\r\n    return <Section title='Experience points and multiplier'>\r\n        <p>To increase skills, base stats, buy perks and traits you spend experience points, your starting experience points depend on your species and starting age. Older characters start with more experience, younger characters have a high experience multiplier which allows them to gain experience points faster.</p>\r\n        <h4>Cost</h4>\r\n        <p>The cost of increasing a skill is equal to the amount you increase to per step. For example if you have 4 ranks and wish to increase to 6 it costs 11, because you must first increase to 5 and then to 6. 5 + 6 = 11<br />\r\n        Please consult the following chart when increasing multiple steps</p>\r\n        <CostChart />\r\n\r\n        <p>To gain experience your character needs practice. You gain experience points in a skill when you use it and it fulfills <i>any</i> of the following conditions:</p>\r\n        <ul>\r\n            <li>The chance to fail is at least 50% (your dice roll needs to be at least 11 or higher)</li>\r\n            <li>You are in a dangerous situation and failure is likely to result in harm</li>\r\n            <li>You are actively being tutored by someone who has at least 2 ranks higher in said skill</li>\r\n        </ul>\r\n        <p>You can only gain 1 experience point per day, if you gain experience in multiple skills then you choose which</p>\r\n        <p>Experience multipler is applied to the maximum amount you may get, but you always only get 1 per skill, so if you hav a multipler of 2 then you can choose two skills that you qualify for</p>\r\n        <p>If the experience multipler is a fractional number then the experienced gained is carried over to the next day, but only if you get it.\r\n            <br />\r\n            For example you have multiplier of 1.5, you gain experience in 2 skills on day 1, at the end of day 1 you may choose which of the two you gain a point in.<br />\r\n            On day 2 the 0.5 surplus carries over and you have 2 possible on this day. One of which has to be the other skill you didn't choose.\r\n        </p>\r\n    </Section>\r\n}\r\nconst max = 21;\r\n\r\ninterface CostLevel {\r\n    rank: number;\r\n    nextRanks: number[];\r\n}\r\n\r\nconst costLevels: CostLevel[] = [];\r\n\r\nfor (let counter = 0; counter < max; counter++) {\r\n    const cl = {\r\n        rank: counter,\r\n        nextRanks: Array.from(Array(max - 1), (x, index) => 0),\r\n    };\r\n    for (let innerCounter = counter; innerCounter < max - 1; innerCounter++) {\r\n        cl.nextRanks[innerCounter] = innerCounter + 1;\r\n        for (let innerSummer = innerCounter; innerSummer < max - 1; innerSummer++) {\r\n            if (innerSummer === 0) continue;\r\n            cl.nextRanks[innerSummer] += cl.nextRanks[innerSummer - 1];\r\n        }\r\n    }\r\n    costLevels.push(cl);\r\n}\r\n\r\n\r\nconst CostChart: React.FC = () => {\r\n    return <table className=\"th20\">\r\n        <thead>\r\n            <tr>\r\n                <th>from/to</th>\r\n                {costLevels.map(r => r.rank !== 0 ? <th>{r.rank}</th> : null)}\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {costLevels.map(cl => cl.rank !== 20 ? <tr>\r\n                <td>{cl.rank}</td>\r\n                {cl.nextRanks.map(nr => <td>{nr !== 0 ? nr : '-'}</td>)}\r\n            </tr> : null)}\r\n        </tbody>\r\n    </table>\r\n}\r\n\r\nexport default Experience;","import Section from \"../Section\";\r\nimport React from \"react\";\r\nimport { GenericCharacterRoller } from \"../Lore/CharacterRoller\";\r\nimport { IOpenableViewItem } from \"../../views/IViewProps\";\r\nimport { humansData } from \"../races/Humans\";\r\nimport { shambrasData } from \"../races/Shambras\";\r\nimport { merlionsData } from \"../races/Merlions\";\r\nimport { nekovianData } from \"../races/Nekovians\";\r\nimport { synthsData } from \"../races/Synth\";\r\nconst MakeCharacter: React.FC<IOpenableViewItem> = ({ initiallyOpen }) => {\r\n    return <Section title='How to make a character' initiallyOpen={initiallyOpen}>\r\n        <h3>Alternative method</h3>\r\n        <p>Go to \"Game Master\" then go to \"Character Creator Wizard\". It will give you your options and perform calculations for you.</p>\r\n        <Section title='Ability roller'>\r\n            <Section title='Human dice roller'><GenericCharacterRoller raceData={humansData} /></Section>\r\n            <Section title='Shambra dice roller'><GenericCharacterRoller raceData={shambrasData} /></Section>\r\n            <Section title='Merlion dice roller'><GenericCharacterRoller raceData={merlionsData} /></Section>\r\n            <Section title='Nekovian dice roller'><GenericCharacterRoller raceData={nekovianData} /></Section>\r\n            <Section title='Synth dice roller'><GenericCharacterRoller raceData={synthsData} /></Section>\r\n        </Section>\r\n        <h3>Step 1 - concept</h3>\r\n        <h4>Roll attributes</h4>\r\n        <p>The absolute first step is to roll your base attributes, strength, agility, endurance, perception, intelligence, willpower</p>\r\n        <i>When you see something like \"2d8\" the first number indicates the number of dice, in this case 2, the latter number indicates the number of sides, in this case two 8 sided dice, the result added up</i>\r\n        <p>Depending on your final age and species you will have different dice roll (see world and lore -{\">\"} your species -{\">\"} playing as your species for precise information)</p>\r\n        <p>Roll the dice for each attribute in 3 sets, you may pick one of these three complete sets</p>\r\n        <p>You may choose to make the dice \"safe\" by going down 2 size and then add a flat +1 to the final number (1d10 -{\">\"} 1d8), the average is the same but distance is lower</p>\r\n        <p>The first step is conceptual and mostly abstract, but will feed into the next steps. Begin by answering at least all of these questions.</p>\r\n        <h4>Where was my character born?</h4>\r\n        <h4>How old is my character currently?</h4>\r\n        <h4>What kind of upbringing did my character have?</h4>\r\n        <h4>How does my character's upbringing bias my character's point of view?</h4>\r\n        <h4>What major events happened in my characters life?</h4>\r\n        <h4>How did those events shape my characters personality?</h4>\r\n        <h4>What lessons and skills did my character learn from that?</h4>\r\n        <p>There may be more questions you want to ask depending on your answers.</p>\r\n        <h3>Step 2 - outlining your character</h3>\r\n        <p>Based on the answer in step 1...</p>\r\n        <h4>Adjust your age</h4>\r\n        <p>The older you start at the more experience points (applicable experience) you start with.</p>\r\n        <p>Finally the younger you are the bigger your multiplier, whenever you gain experience points in game you multiply them by this.</p>\r\n\r\n        <h4>Select between 2 and 4 \"main skills\" and as many additional secondary skills as you need.</h4>\r\n        <p>You'll want to put points into your main skills, note that the cost increases rapidly.\r\n        The cost for each step is what you have + 1\r\n    Save some experience points for perks</p>\r\n        <p>Also notice that your attributes play a part in your skill total,\r\n        for example pilot is a perception skill,\r\n    when you roll for pilot you roll 2d10 + pilot + perception</p>\r\n        <h3>Step 3 - choose your perks</h3>\r\n        <p>Perks are specializations, they either grant new capabilities under a skill or make a specific skill usage more powerful/likely to succeed (skills have multiple uses)</p>\r\n        <p>Note that perks often come with skill requirements, and for skills that you don't put points into are often not worth taking.</p>\r\n\r\n    </Section>;\r\n}\r\n\r\nexport default MakeCharacter;","import Section from \"../Section\";\r\nimport React, { useState } from \"react\";\r\nimport Indexer, { Indexed } from \"../general/Indexer\";\r\nimport Firearms from \"../skills/firearms\";\r\n\r\nconst Combat: React.FC = () => {\r\n    return <Section title='Combat'>\r\n        <Indexer title='combat'>\r\n            <Indexed title='Combat start'>\r\n                <CombatStarts />\r\n            </Indexed>\r\n            <Indexed title='Actions'>\r\n                <Actions />\r\n            </Indexed>\r\n            <Indexed title='Turns'>\r\n                <Turns />\r\n            </Indexed>\r\n            <Indexed title='Dodging and active defense'>\r\n                <Dodging />\r\n            </Indexed>\r\n            <Indexed title='Blocking'>\r\n                <Blocking />\r\n            </Indexed>\r\n            <Indexed title='Armor and damage reduction'>\r\n                <DamageReduction />\r\n            </Indexed>\r\n            <Indexed title='Bleeding, critical and dying'>\r\n                <Bleeding />\r\n            </Indexed>\r\n            <Indexed title='Melee attacking'>\r\n                <MeleeAttacks />\r\n            </Indexed>\r\n            <Indexed title='Dual wielding'>\r\n                <DualWielding />\r\n            </Indexed>\r\n            <Indexed title='Ranged attacks and guns'>\r\n                <RangedAttacks />\r\n            </Indexed>\r\n            <Indexed title='Distance'>\r\n                <Distance />\r\n            </Indexed>\r\n            <Indexed title='Cover'>\r\n                <Cover />\r\n            </Indexed>\r\n            <Indexed title='Splash damage'>\r\n                <SplashDamage />\r\n            </Indexed>\r\n            <Indexed title='Terrain'>\r\n                <Terrain />\r\n            </Indexed>\r\n            <Indexed title='Damage Types'>\r\n                <DamageTypes />\r\n            </Indexed>\r\n            <Indexed title='Massive Damage'>\r\n                <MassiveDamage />\r\n            </Indexed>\r\n        </Indexer>\r\n    </Section >;\r\n}\r\n\r\nconst DamageTypes = () => {\r\n    return <>\r\n        <p>Damage types oftend do not matter. In a case when they do some extra effect may come into play. If a damage source counts as two or more then protection needs to protect against both.</p>\r\n        <ul>\r\n            <li><b>Slashing</b> - Done by blade weapons like knives, swords, claws, teeth</li>\r\n            <li><b>Piercing </b> - Done by pointy weapons like spears, crossbows, bows, also when stabbing with a blade weapon, horns (when impaling)</li>\r\n            <li><b>Bludgeoning</b> - Done by blunt weapons, clubs, fists, horns. Falling damage counts as bludgeoing</li>\r\n            <li><b>Ballistic</b> - Done by firearms that fire projectiles</li>\r\n            <li><b>Thermal</b> - Done by flame, lasers, heat, plasma.</li>\r\n            <li><b>Electrical</b> - Done by lightning bolts, shocks, plasma</li>\r\n            <li><b>Blast</b> - Done by explosives and shockwaves</li>\r\n        </ul>\r\n    </>;\r\n};\r\n\r\nconst Terrain = () => {\r\n    return <>\r\n        <p>There are generally three types of terrain, normal, difficult and hazardous</p>\r\n        <h5>Normal terrain</h5>\r\n        <p>Normal terrain typically means flat hard ground that you can easily travel across and stand on. Terrain is assumed normal if not stated otherwise</p>\r\n        <h5>Difficult Terrain</h5>\r\n        <p>Difficult terain is any kind of terrain that is difficult to traverse, it may be uneven or soft or sticky. Difficult terrain requires 2 meters of movement for each 1 meter traveled.\r\n            To move faster you need to make an 2d10 + agility + acrobatics roll, DC depends on speed. If you fail by 10 points or more you stumble and fall prone, with your movement and action used up.\r\n            <br />\r\n            If you have penalties from exhaustion or carrying too much then these apply here too. (-5 per level) Note that exhaustion and carrying over capacity limits maximum speed.\r\n        </p>\r\n        <ul>\r\n            <li>Power walk: 15</li>\r\n            <li>Jog: 20</li>\r\n            <li>Run: 25</li>\r\n            <li>Sprint: 30</li>\r\n        </ul>\r\n        <h5>Hazardous terrain</h5>\r\n        <p>Hazardous terrain refers to any terrain that is dangerous to travel across. It is usually also difficult terrain.</p>\r\n    </>;\r\n}\r\n\r\nconst CombatStarts = () => {\r\n    return <>\r\n        <p>Combat starts when one group or individual assaults another group or individual, depending on whether the assault is an ambush or not.</p>\r\n        <h5>Sequence</h5>\r\n        <p>Sequence is the order turns, it is rolled at the start of the first turn. Your sequence is 2d10 + perception + agility + modifier. Modifiers can come from perks, traits and the situation</p>\r\n        <p>If one side has exceptionally high sequence then members of that team can get one free action on the first turn. To get this they must exceed their enemies highest sequence by 20.</p>\r\n        <p>Some actions can be done in response to actions done to you, such as active dodging and blocking. If however you've already spent your action then to dodge or block you must forgo your next turn and take a -4 sequence penalty</p>\r\n        <h5>Ambush</h5>\r\n        <p>An ambush is defined by whether the defender knows the attack is coming.</p>\r\n        <p>If it is an unseen ambush (the defenders are not aware of the attackers) the attackers gain +20 on their sequence</p>\r\n        <p>If it is a surprise attack (the defender are aware of the attacker but did not expect to be attacked) the attackers gain +10 on their sequence</p>\r\n        <p>If the defenders know they are going to be attacked then there is no modifier</p>\r\n        <h5>Counter-ambush</h5>\r\n        <p>If the defenders know they are going to be attacked and stand prepared for it but the attackers don't know that they know the defenders gain a +10 on their sequence</p>\r\n    </>;\r\n}\r\n\r\nconst Actions = () => {\r\n    return <>\r\n        <p>During combat characters make take actions on their turn, actions use action points. At the start of your turn your action points are refreshed.</p>\r\n        <h5>Move action</h5>\r\n        <p>Moving 1 meter uses 1 action point, if you spend 3 action points on moving you may move up to your remaining movement speed without spending action points.\r\n            You can move multiple times, if you take other actions then your move is interrupted.</p>\r\n        <p>Falling prone uses 1 action point, standing up uses 3. Swiming, climbing and jumping counts individual as move actions.\r\n            So if you run and then jump you must use a total of 6 action points.</p>\r\n        <h5>Ending your turn</h5>\r\n        <p>If you end your turn with action points remaining you add an equal amount to your active defense until the start of your next turn.</p>\r\n        <p>For example, if you have 5 action points and 20 active defense, you end your turn doing nothing.\r\n            Your defense increases by 5, 5 + 20 = 25. Until your next turn your defense is 25</p>\r\n        <h5>Overextend</h5>\r\n        <p>You can overextend your action points, meaning you can use more action points than you have, doing so puts you into negative action points.\r\n            And you can go into negative equal to your max action points. And when you end your turn your negative is deducted from your defense.\r\n            Additionally, overextending action points are deducted from your next turn action points.</p>\r\n        <p>For example if you have 5 action points, active defense 20 and run and then jump, using 6 action points, you now have -1 action points.\r\n            You end your turn with -1 action points, your active defense is 19 until the start of your next turn. On the start of your next turn you only have 4 action points.\r\n        </p>\r\n        <h5>Reaction</h5>\r\n        <p>A reaction is an action that is can be taken immediately in response to an action, reactions describe the situations they may be taken.\r\n            Reactions uses action points same as actions on your turn, you can go into negative action points same as if you were overextending, and same rules apply when you do,</p>\r\n        <p>For example, you have 5 action points and active defense 20. You take an action that uses 3, you now have 2 action points remaining.\r\n            You then end your turn with 22 active defense, an enemy throws a grenade at you, you are allowed to roll a contested acrobatics vs explosives and you succeed.\r\n            You use your reaction to move out of the blast radius, using 3 action points to move. This causes you to overextend and your active defense drops to 19.\r\n            At the start of your next turn you have 4 action points.\r\n            <br/>\r\n            However if before your next turn another enemy throws another grenade and you react again to move you will go into 16 active defense and have overextended to -4.\r\n            If someone then attacks you, you do not have enough action points to attempt to block, because blocking uses more action points than you can overextend.\r\n        </p>\r\n    </>;\r\n}\r\n\r\nconst Turns = () => {\r\n    return <>\r\n        <p>Each turn starts with the characters performing one action in order of highest sequence to lowest</p>\r\n        <p><b>Optional Rule</b>: give players limited time to decide what they do on each of their turns, it discourages players to think they can delibarate and ponder when everyone is waiting for them.\r\n            The recommended time for that is between 10-30 seconds and maximum one question. Exceeding this means the player character takes the active dodge action.<br />\r\n            A secondary benefit is that the players feel the tension of battle more intensely.</p>\r\n    </>;\r\n}\r\n\r\nconst Dodging = () => {\r\n    return <>\r\n        <p>To hit you in combat a creature must make a roll that equals or exceeds your defense</p>\r\n        You use your base defense (the first number) when\r\n        <ul>\r\n            <li>You are not expecting to be attacked (eg, surprised)</li>\r\n            <li>You are doing something that requires concentration</li>\r\n            <li>You are doing something that requires stillness</li>\r\n            <li>You are immobilized</li>\r\n        </ul>\r\n        You use your active defense (the last number) when:\r\n        <ul>\r\n            <li>You are in combat</li>\r\n        </ul>\r\n    </>;\r\n}\r\n\r\nconst DamageReduction = () => {\r\n    return <>\r\n        <p>Armor gives you damage reduction, this damage reduction is always applied before damage multipliers and after damage reducers. Damage calculation is always calculated to the maximum benefit of the wearer of the armor.</p>\r\n    </>;\r\n}\r\n\r\nconst Bleeding = () => {\r\n    return <>\r\n        <p>A character has five stages of life</p>\r\n        <ol>\r\n            <li>Undamaged: Life is at 100%, no damage has been taken.</li>\r\n            <li>Nominal: Life is above 0, during combat they suffer no negative penalties, after combat they gain one exhaustion and mental health damage. The damage they've taken is also applied to all physical skill checks as determined by the GM.</li>\r\n            <li>Critical: Life is 0 or less, but more than -100%. They must roll 2d10 + endurance vs total damage taken to stay conscious, they take 1 point of damage if they do any physically challenging activity.\r\n                <br />A critical character can be forcefully awakened with adrenaline (administer medicine 20). Doing so imposes one exhaustion and mental health damage. They still take damage and can bleed.</li>\r\n            <li>Dying: Life is below -100% but above -200%. They are unconscious and can not perform any action, they can not be awakened.</li>\r\n            <li>Dead: Life is equal or below -200%. This state is permanent and irreversible, there's no coming back, roll up a new character.</li>\r\n        </ol>\r\n        <p>Exhaustion and mental health damage is cumulative. So if you are brought to dying you gain 3 levels of exhaustion at the end of combat, 4 if adrenaline was administered.\r\n            <br />Note that damage to mental health prevents recovery of mental health so if a character is damaged daily with no time for recovery they will break down psychologically.\r\n        </p>\r\n        <p>\r\n            Bleeding happens when you take a certain amount of damage or if the GM decides it is appropriate, bleeding can happen once per turn and can stack. Damage from bleeding does not cause further bleeding even if it takes you below a life threshold.\r\n            <br />A single first aid will stop all bleeding.\r\n        </p>\r\n        <ul>\r\n            <li>While nominal if you take 50% or more of your life in a single round: Light bleeding deals 1 damage per minute for 1d10 minutes. Certain weapons can guarantee bleeding</li>\r\n            <li>While critical if you take any damage: Intermediate bleeding deals 1 damage per 4 rounds for a total of 4 x 1d20 rounds</li>\r\n            <li>While dying if you take any damage: Heavy bleeding deals 1 damage every turn, lasts until character bleeds out or has first aid performed on them.</li>\r\n        </ul>\r\n        <p>If bleeding causes you to go to a different stage then those effects take hold but the bleeding type does not change. Unless you take more damage from any other source than bleeding.</p>\r\n        <Section title='example'>\r\n            <p>Example: Character <b>John Done</b> has 15 total life. He is shot and takes 8 points of damage.</p>\r\n            <p>John Doe is reduced to 7 life, and must roll 1d10 bleed damage. John rolls 8.</p>\r\n            <p>Combat ends and John takes 1 level of exhaustion and 1 mental health damage</p>\r\n            <p>After 70 minutes John has taken enough damage that he is now critical, he immediately must make a check to stay awake, 2d10 + endurance vs 15 (total damage taken at this point)</p>\r\n            <p>Luckily John rolls a total of 17 and stays awake, if he performs any action that requires a strength, endurance or agility check (even passive!) he will take 1 damage</p>\r\n            <p>John takes 1 more level of exhaustion and mental health damage from entering critical stage.</p>\r\n            <p>If he takes damage from any action at this stage he will start bleeding at an intermediate rate.</p>\r\n            <p>So it's very important to stop bleeding as soon as possible, even if the bleeding is light!</p>\r\n            <p>Another 10 minute passes and John takes the final 8th damage from his initial bleeding, this puts him at -1 life but since the damage was from bleeding he does not have to roll for intermediate bleeding.</p>\r\n\r\n        </Section>\r\n    </>;\r\n}\r\n\r\nconst MeleeAttacks = () => {\r\n    return <>\r\n        <p>A melee attack is anything from a punch to a cut with a sword. You roll 2d10 + Combat (skill), if the roll is equal or exceeds the targets defense then you hit. Uses action points, different types of attacks uses different amount of action points.</p>\r\n         <h5>Flanking (optional rule)</h5>\r\n        <p>When a target is flanked (facing more than one melee combatant) the attackers will gain bonus to hit equal to the number of flankers x2. This does not apply if they are flanked too.</p>\r\n        <h5>Two weapon fighting</h5>\r\n        <p>When you are using two melee weapons you may make one second attack immediately after the first on the same target. This attack does not benefit from your agility bonus to hit or strength bonus to damage. The second weapon must be a light weapon if your strength is 6 or less.\r\n            If you use multiple attacks option with two weapons only the first attack gets a bonus attack from the off-hand weapon, multi-attack penalty applies to off-hand weapon.\r\n        </p>\r\n        <h5>Special attack options</h5>\r\n        <p>Special attack options can replace a single attack or one of many multiattacks.</p>\r\n        <ul>\r\n            <li><b>Grapple</b>: Uses 4 action points. You may attempt to grab someone, make a 2d10 + combat + agility roll vs the target's defense.\r\n                Followed by an contest of 2d10 + strength + athletics vs 2d10 + strength + athletics or 2d10 + agility + acrobatics.<br />\r\n                If you win the target is grappled, while grappled the target may not move, if you move you can drag them with you using 2 meters of movement per 1 meter moved.</li>\r\n            <li><b>Wrestle</b>: Uses 4 action points. You may attempt to wrestle a target that you are currently grappling. You make roll 2d10 + strength + athletics contest by 2d10 + strength + athletics or 2d10 + agility + acrobatics of the target.<br />\r\n                If you succeed you must use your action every turn to restrain them, while restrained they may only use their action to attempt to break free.</li>\r\n            <li><b>Shove</b>: Uses 4 action points. You may attempt to shove someone, make a 2d10 + combat + agility roll vs the target's defense.\r\n                Followed by an contest of 2d10 + strength + athletics vs 2d10 + strength + athletics or 2d10 + agility + acrobatics.<br />\r\n                If you win you can either push them the length of the space you occupy (minimum 1 meter) or push them prone. That decision must be made before you roll the dice.</li>\r\n            <li><b>Disarm</b>: Uses 4 action points. You may attempt to grab an item the target is holding with their hands.make a 2d10 + combat + agility roll vs the target's defense.<br />\r\n                If you hit you now both hold the item in your hand and on subsequent turns you can use your action to prevent them from using their action to use the item, if you do so they waste their action.<br />\r\n                You may as a part of the disarm action (or the target on their turn with their action) may also attempt to pull it from their hands, to do so roll 2d10 + strength + athletics vs 2d10 + strength + athletics.<br />\r\n                If you win you take the item from them, if you fail you lose your grip.\r\n            </li>\r\n        </ul>\r\n        <p>If multiple creatures attempt to perform grapple, shove or disarm the same target they can work together, they must perform the same action in consecutive turn order.<br />\r\n            The second creature receives a +3 bonus on their strength roll.<br />\r\n            The third creature receives a +6 bonus on their strength roll.<br />\r\n            The fourth and every after receives a +9 bonus on their strength roll.\r\n        </p>\r\n    </>;\r\n}\r\n\r\nconst Blocking = () => {\r\n    return <>\r\n        <p>Blocking is an reactive action that can be done against melee attacks. When you are hit with a melee attack you may use your melee attack to block.\r\n            Roll 2d10 + agility + combat, if you exceed their attack roll then you block the attack and damage is reduced by 1/2 rounded down.\r\n        </p>\r\n        <p>Blocking uses 3 action points </p>\r\n        </>;\r\n}\r\n\r\nconst RangedAttacks = () => {\r\n    return <>\r\n        <p>\r\n            When you shoot someone your roll must hit the targets active defense to hit.\r\n            Guns have multiple types of attacks, snipe shots, aimed shots, semi-burst, burst and oppressive fire\r\n        </p>\r\n        <p>Using a weapon that has a higher strength requirement imposes a burden to your aiming, penalty to aiming is 10x what you are missing</p>\r\n        {Firearms.useCases.map(uc => <>\r\n            <h5>{uc.name} ({uc.attribute})</h5>\r\n            <p>{uc.description}</p>\r\n            <ul>\r\n                {uc.results !== undefined ? uc.results.map(r => <li key={`c_ra_li_${r}`}>{r}</li>) : null}\r\n            </ul>\r\n        </>)}\r\n        <h5>Firearm loudness and hearing loss</h5>\r\n        <p>(Optional rule) Firearms can be heard from away, but it varies heavily on the caliber and conditions. Without ear protection firearms can cause temporary hearing loss.</p>\r\n        <h5>Firing into melee range</h5>\r\n        <p>Shooting someone who is standing within melee range and has melee weapons or unarmed available allows them to use their reaction to reduce your attack roll by 2d10 + agility + combat, doing so counts as a blocking action and follows similar rules.</p>\r\n    </>;\r\n}\r\n\r\nconst SplashDamage = () => {\r\n    return <>\r\n        <p>Some weapons do splash damage, meaning they hit an area, some weapons have a \"low damage\" zone outside the splash area where damage is reduced to 25% (rounded down)</p>\r\n        <ul>\r\n            <li>The area of effect (including low damage zone) is specified by the weapon</li>\r\n            <li>All who are caught inside the area of effect roll damage seperately, damage absorbtion applies, defense does not apply, cover applies</li>\r\n            <li>Characters who still have a move action may make an acrobatics roll against the attack roll for half damage\r\n                <ul>\r\n                    <li>Defeating the roll by 10 or more means no damage is taken, but the character moves out of the area</li>\r\n                </ul>\r\n            </li>\r\n            <li>Objects caught within the zone are also damaged</li>\r\n            <li>The target to hit an area is 10, standard range penalties apply, missing means you off target</li>\r\n        </ul>\r\n        <p>Some weapons that do splash damage are thrown or otherwise follow a ballistic path. These can potentially hit places that are not within direct line of sight. For these situations add +10 and range penalties are doubled.</p>\r\n    </>;\r\n}\r\n\r\nconst Distance: React.FC = () => {\r\n    const [n, setN] = useState(6);\r\n    const strs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\r\n    const weights = [0.2, 0.5, 1, 2, 4, 5, 8, 10, 15, 20, 25, 30, 50, 75, 100];\r\n    const distancePenalty = 5;\r\n    return <>\r\n        <h5>Range penalty</h5>\r\n        <p>Targets become harder to hit when they are further away, each {distancePenalty} meters away gives you a -1 to hit penalty. Some conditions affect range penalties, these conditions stack with other conditions, perks and weapon stats.</p>\r\n        <ul>\r\n            <li>No gravity and no atmosphere: range penalties halfed (does not apply to lasers)</li>\r\n            <li>Rain or heavy winds: double range penalties</li>\r\n            <li>Light mist or smoke: double range penalites</li>\r\n            <li>Mist or smoke: quadrouple range penalties</li>\r\n        </ul>\r\n        <p>Guns have a maximum range, beyond this it's impossible to hit. In space this range is 2x</p>\r\n        <p>Bullets slow down and lose energy to the air, depending on the gun you may deal lower damage, as an optional rule you may reduce damage by 50% at half firearm range, this should stack with any inherit firearm range damage penalty.</p>\r\n        <h5>Throwing</h5>\r\n        <p>\r\n            Throwing maximum distance is a matter of strength, each meter adds -1 hit penalty. Throwing an object that is not balanced may impose double or more penalty.\r\n            <br />Maximum range is N x strength / Square root of mass of object in kg. However some objects may allow you to exceed this by swinging it around your body to build momentum. Using your entire turn you can up to double maximum distance.\r\n            <br />Where N depends on your species. For <button onClick={() => setN(6)}>humans</button> it is 6, for <button onClick={() => setN(5)}>Merlions and Nekovians</button> it is 5, for <button onClick={() => setN(4)}>Shambras</button> it is 4.\r\n            <br />You may consult the following table\r\n        </p>\r\n        <p>Humans have half distance penalty when throwing.</p>\r\n        <table>\r\n            <thead>\r\n                <tr><th>Weights Strengths</th>{strs.map(s => <th key={`c_d_th_${s}`}>{s}</th>)}</tr>\r\n            </thead>\r\n            {weights.map(w => <tr key={`c_d_tr_${w}`}>\r\n                <td>{w}</td>\r\n                {strs.map(s => <td key={`c_d_td_${s}`}>\r\n                    {Math.floor(((s / Math.sqrt(w)) * n))}\r\n                </td>)}\r\n            </tr>)}\r\n        </table>\r\n    </>;\r\n}\r\n\r\nconst Cover = () => {\r\n    return <>\r\n        <p>Hinding behind a cover, whether partially or fully gives your character cover, cover grants both base defense and damage reduction</p>\r\n        <p>Damage reduction depends on the type of material is covering you, thickness and hardness matter. When damage absorbtion from cover is applied it stacks with all other sources, armor piercing is applied only once to the entire stack.\r\n            Cover does not grant any benefits from close range combat rolls or thrown explosive rolls, only firearms and non-explosive thrown like knives.\r\n            Firearms that deal splash damage like shotguns and missile launchers always apply base defense and cover damage absorbtion, but may destroy the cover depending on the damage.\r\n        </p>\r\n        <p>Each time damage is taken through damage absorbtion each source drops their damage absorbtion by 1 point, when dropped to zero they no longer provide any benefit.</p>\r\n        <p>If damage exceeds damage absorbtion x 10 then the cover or armor is instantly destroyed. Damage from multiple bullets count seperately for this purpose.</p>\r\n        <table>\r\n            <thead><th>thiccness/material</th><th>wood</th><th>concrete</th><th>metal</th></thead>\r\n            <tbody>\r\n                <tr><td>1cm</td><td>1</td><td>2</td><td>4</td></tr>\r\n                <tr><td>2cm</td><td>2</td><td>4</td><td>8</td></tr>\r\n                <tr><td>5cm</td><td>4</td><td>8</td><td>16</td></tr>\r\n                <tr><td>20cm</td><td>8</td><td>16</td><td>60</td></tr>\r\n                <tr><td>1m</td><td>16</td><td>40</td><td>200</td></tr>\r\n            </tbody>\r\n        </table>\r\n        <h5>Low cover</h5>\r\n        <p>Low cover (25% +) of your body is covered, you gain +4 base defense, 25% chance to apply damage absorbtion from cover</p>\r\n        <h5>High cover</h5>\r\n        <p>Mid cover (50% +) of your body is covered, you gain +8 base defense, 50% chance to apply damage absorbtion from cover</p>\r\n        <h5>Massive cover</h5>\r\n        <p>High cover (75% +) of your body is covered, you gain +12 base defense, 75% chance to apply damage absorbtion from cover</p>\r\n        <h5>total cover</h5>\r\n        <p>Your entire body is covered, you gain +20 base defense if the enemy knows where you are, if they do not then they must guess the hex, 100% chance to apply damage absorbtion from cover.\r\n            Total cover also prevents you from attacking.\r\n        </p>\r\n    </>;\r\n}\r\n\r\nconst DualWielding = () => {\r\n    return <>\r\n        <p>You can use two weapons, one in each hand, but without an appropriate perk you lose your ability and skill bonuses to the off-hand. The off-hand also gains no bonus to damage from strength. Your off hand counts as having 2 lower strength for the purpose of strength requirement</p>\r\n        <p>With the Double Handed trait both hands count as your main hand, you can use either hand for a weapon. If </p>\r\n        <p>If you put medium or large weapon in your off hand then the strength requirement increases to 3. Attempting to use a large weapon with one hand increases strength requirement by 2.</p>\r\n        <p>Small melee weapons have a default strength requirement of 1. Medium melee weapons have a default strength requirement of 3. Large melee weapons have a default requirement of 5.</p>\r\n        <p>Two handed firearms (anything but hand-guns and the Fantry Lasergun) can not be dual wielded.</p>\r\n    </>;\r\n}\r\n\r\n\r\nconst MassiveDamage = () => {\r\n    return <>\r\n        <p><i>Optional rule</i></p>\r\n        <p>When you take more than or equal to 75% or your life att once or causes you to be reduced to dying state (-100% but above -200%) you roll on the massive damage table.\r\n            You roll on different tables depending on the source of the damage. If the damage has multiple types (such as plasma weapons) then you roll on both.\r\n            <br />\r\n            * Means that this injury will naturally heal or is not permanent, otherwise a you need medical assistance. (surgery, medicine, cloning, etc)\r\n            <br />\r\n            <br /> Any injury that causes a penalty to agility also inflicts the same penalty to your active defense\r\n            You do not roll on the massive damage table if you are brought to a dying state due to bleeding.\r\n        </p>\r\n        <p>Roll a 1d10, subtract from the result by an amount equal to life left if above 0</p>\r\n        <Section title='Slashing'>\r\n            <table>\r\n                <thead>\r\n                    <tr><th>Roll</th><th>Injury</th><th>Effect</th></tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr> <td>0</td> <td>No injury</td> <td>If the result is 0 or below there is no effect</td></tr>\r\n                    <tr> <td>1-3</td> <td>Huge scar</td> <td>If allowed to heal naturally this will leave a huge ugly scar</td></tr>\r\n                    <tr> <td>4-5</td> <td>Ruptured tendons</td> <td>Roll a d4 (or d8 for shambra) to determine which limb has ruptured tendons, this limb can not take actions.</td></tr>\r\n                    <tr> <td>6-7</td> <td>Hemorrhage</td> <td>You are rapidly bleeding, at the end of your turn you lose 1 life for 1d10 rounds</td></tr>\r\n                    <tr> <td>8</td> <td>Lose a finger</td> <td>Roll a d10 to determine which finger, if you use the hand with a missing finger you must roll willpower + 2d10 vs 15 to ignore the pain</td></tr>\r\n                    <tr> <td>9</td> <td>Eye injury</td> <td>Roll a d2 (or d4 for shambra) to determine which eye is injured, this eye can not see anything</td></tr>\r\n                    <tr> <td>10</td> <td>Lose a limb</td> <td>Roll a dice to determine which arm or leg, roll a d100 to determine how much is lost (100=all).\r\n                        This limb can no longer be used to take actions\r\n                    </td> </tr>\r\n                </tbody>\r\n            </table>\r\n        </Section>\r\n        <Section title='Piercing'>\r\n            <table>\r\n                <thead>\r\n                    <tr><th>Roll</th><th>Injury</th><th>Effect</th></tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr> <td>0</td><td>No injury</td><td>If the result is 0 or below there is no effect</td> </tr>\r\n                    <tr> <td>1-2</td> <td>Punctured muscle</td> <td>Roll 1d4 (or 1d8 for shambra), a limb has a punctured muscle and whenver you take an action with that limb you suffer -3 penalty.\r\n                        If it is a leg you lose 1 speed.</td> </tr>\r\n                    <tr> <td>3-4</td> <td>Punctured belly</td> <td>Your digestive tract has been punctured, you are stunned for 1d2 rounds and lose 1 speed.</td> </tr>\r\n                    <tr> <td>5-6</td> <td>Punctured artery</td> <td>You lose 2 life at the end of each your turns for 1d4 rounds</td> </tr>\r\n                    <tr> <td>7-8</td> <td>Punctured lung</td> <td>One of your lungs is punctured and can't be used, add 3 levels of exhaustion.\r\n                        If your other lung is punctured you can no longer breathe,\r\n                        you fall unsconsious when you run out of breath (as per holding breath rules), your brain dies 10 minutes later</td> </tr>\r\n                    <tr> <td>9</td> <td>Ruptured organ</td> <td>You can't heal without medical assitance and surgery</td> </tr>\r\n                    <tr> <td>10</td> <td>Pierced head</td> <td>Roll a 1d4, on 1 and 2 an eye is destroyed, on 3 and 4 an ear is destroyed</td> </tr>\r\n                </tbody>\r\n            </table>\r\n\r\n        </Section>\r\n        <Section title='Bludgeoning'>\r\n            <table>\r\n                <thead>\r\n                    <tr><th>Roll</th><th>Injury</th><th>Effect</th></tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr> <td>0</td><td>No injury</td><td>If the result is 0 or below there is no effect</td> </tr>\r\n                    <tr> <td>1-3</td> <td>Broken nose</td> <td>Your nose is broken</td> </tr>\r\n                    <tr> <td>3-4</td> <td>Internal bleeding</td> <td>You lose 1 life at the end of your round for 1d10 rounds due to internal bleeding</td> </tr>\r\n                    <tr> <td>5-6</td> <td>Broken rib</td> <td>You have a broken rib, you can only use 1 action</td> </tr>\r\n                    <tr> <td>7</td> <td>Broken jaw</td> <td>Your jaw is broken, you can't speak or chew or bite</td> </tr>\r\n                    <tr> <td>8-9</td> <td>Broken limb</td> <td>Roll a 1d4 (or 1d8 for shambra), that limb is has a fractured bone and can not be used to take actions.</td> </tr>\r\n                    <tr> <td>10</td> <td>Concussion</td> <td>You are stunned for 1d4 rounds and can take no actions during that time. You can't take actions that require intelligence or a skill check, your willpower, agility and perception count as 1.\r\n                        Someone must use their move action every turn for 1 hour to prevent you from falling asleep and entering a coma.\r\n                        Takes 4 weeks of healing to recover, or 1 week with a medicine check vs 20</td> </tr>\r\n                </tbody>\r\n            </table>\r\n\r\n        </Section>\r\n        <Section title='Ballistic'>\r\n            <table>\r\n                <thead>\r\n                    <tr><th>Roll</th><th>Injury</th><th>Effect</th></tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr> <td>0</td><td>No injury</td><td>If the result is 0 or below there is no effect</td> </tr>\r\n                    <tr> <td>1-2</td> <td>Punctured muscle</td> <td>Roll 1d4 (or 1d8 for shambra), a limb has a punctured muscle and whenver you take an action with that limb you suffer -3 penalty.\r\n                        If it is a leg you lose 1 speed.</td> </tr>\r\n                    <tr> <td>3-4</td> <td>Punctured belly</td> <td>Your digestive tract has been punctured, you are stunned for 1d2 rounds and lose 1 speed.</td> </tr>\r\n                    <tr> <td>5-6</td> <td>Ruptured artery</td> <td>You lose 1 life at the end of each your turnfor 1d10 rounds</td> </tr>\r\n                    <tr> <td>7-8</td> <td>Punctured lung</td> <td>One of your lungs is punctured and can't be used, add 3 levels of exhaustion.\r\n                        If your other lung is punctured you can no longer breathe,\r\n                        you fall unsconsious when you run out of breath (as per holding breath rules), your brain dies 10 minutes later</td> </tr>\r\n                    <tr> <td>9</td> <td>Ruptured organ</td> <td>You can't heal without medical assitance and surgery</td> </tr>\r\n                    <tr> <td>10</td> <td>Blasted bone</td> <td>Roll 1d4 (or 1d8 for shambra), a limb has had its bones completely shattered and can not be used for any action.</td></tr>\r\n                </tbody>\r\n            </table>\r\n\r\n        </Section>\r\n        <Section title='Thermal'>\r\n            <table>\r\n                <thead>\r\n                    <tr><th>Roll</th><th>Injury</th><th>Effect</th></tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr> <td>0</td><td>No injury</td><td>If the result is 0 or below there is no effect</td> </tr>\r\n                    <tr> <td>1-3</td> <td>Burn scar</td> <td>You have an ugly burn scar</td> </tr>\r\n                    <tr> <td>4-5</td> <td>Heat stroke</td> <td>You gain 1 exhaustion</td> </tr>\r\n                    <tr> <td>6-7</td> <td>First degree burns</td> <td>Natural healing is halved and suffer -2 penalty to all strength and agility checks, restored when fully halved or perception + medicine vs 20.\r\n                        If you get this again you suffer second degree burns</td> </tr>\r\n                    <tr> <td>8</td> <td>Second degree burns</td> <td>Natural healing is halved, suffer -4 penalty to all strength and agility checks and you lose 1d4 maximum life. Perception + medicine vs 25 recovers this.\r\n                        If you get this again you suffer third degree burns</td> </tr>\r\n                    <tr> <td>9</td> <td>Third degree burns</td> <td>Natural healing is reduced to a quarter, suffer -6 penalty to all strength and agility checks and you lose 2d4 maximum life.\r\n                        Perception + medicine vs 25 recovers this.\r\n                        This effect is cumulative if you get first or second or third again.</td> </tr>\r\n                    <tr> <td>10</td> <td>Burning flesh</td> <td>You are burning, you take 1d6 fire damage at the start of your turn, this is not reduced by any damage absorbtion, you (or someone else) can put it out using an action (agility + athletics vs 15).\r\n                        The fire distracts you and you can not take any perception actions, you have -3 on agility actions</td> </tr>\r\n                </tbody>\r\n            </table>\r\n\r\n        </Section>\r\n        <Section title='Electric'>\r\n            <table>\r\n                <thead>\r\n                    <tr><th>Roll</th><th>Injury</th><th>Effect</th></tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr> <td>0</td><td>No injury</td><td>If the result is 0 or below there is no effect</td> </tr>\r\n                    <tr> <td>1-2</td> <td>System shock</td> <td>You are stunned for 1 round</td> </tr>\r\n                    <tr> <td>3-4</td> <td>Arc flash burn</td> <td>Roll on the thermal table</td> </tr>\r\n                    <tr> <td>5-6</td> <td>Muscle spasms</td> <td>You suffer -3 penalty to actions that require agility as your muscles spasm for 1d4 rounds</td> </tr>\r\n                    <tr> <td>7</td> <td>Brain damage</td> <td>You suffer brain damage, roll 1d6, you suffer that much penalty to all actions that use agility, perception, intelligence or willpower.\r\n                        Heals naturally at the rate of 1 per long rest</td> </tr>\r\n                    <tr> <td>8</td> <td>Fibrillation</td> <td>You are stunned for 1d4 rounds, after that you have -5 on all endurance checks. Heals naturally after 2 long rests.</td> </tr>\r\n                    <tr> <td>9</td> <td>Severe nerve damage</td> <td>You can no longer feel anything, you don't suffer from pain and automatically fail all perception checks that rely on touch.\r\n                        Your agility is reduced by 3.\r\n                        Medicine vs 25 allows this to recover after 4 long rests, otherwise it naturally heals after 10 years.</td> </tr>\r\n                    <tr> <td>10</td> <td>Cardiac arrest</td> <td>You are stunned for 1d10 rounds, first aid check can undo this.\r\n                        If you are stunned for more than 8 rounds like this then your heart does not start on its own and you die.</td> </tr>\r\n                </tbody>\r\n            </table>\r\n\r\n        </Section>\r\n        <Section title='Blast'>\r\n            <table>\r\n                <thead>\r\n                    <tr><th>Roll</th><th>Injury</th><th>Effect</th></tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr> <td>0</td><td>No injury</td><td>If the result is 0 or below there is no effect</td> </tr>\r\n                    <tr> <td>1-2</td> <td>Tinnitus</td> <td>You hear a constant ringing noise and suffer -2 on all perception checks. This naturally heals after 10 long rests but every once in a while you will hear a ringing noise.</td> </tr>\r\n                    <tr> <td>3-4</td> <td>Vertigo</td> <td>Your balance is upset, you must make a perception + acrobatics vs 10 to stand up and perception + acrobatics vs 15 to walk or run otherwise you fall prone. This lasts 1d6 rounds.</td> </tr>\r\n                    <tr> <td>5-6</td> <td>Migranes</td> <td>Every day there is a 10% chance you will have a migrane 1d6 hours after you wake up. While in a migrane you suffer a -6 to all agility, intelligence and perception actions.\r\n                        The migrane lasts for 1d4 hours.\r\n                        This can only be healed with a intelligence + medicine check vs 25 at a clinic.</td> </tr>\r\n                    <tr> <td>7-8</td> <td>Concussion</td> <td>You are stunned for 1d4 rounds and can take no actions during that time. You can't take actions that require intelligence or a skill check, your willpower, agility and perception count as 1.\r\n                        Someone must use their move action every turn for 1 hour to prevent you from falling asleep and entering a coma.\r\n                        Takes 4 weeks of healing to recover, or 1 week with a medicine check vs 20</td> </tr>\r\n\r\n                    <tr> <td>9-10</td> <td>Collapsed lung</td> <td>One of your lungs is collapsed and can't be used, add 3 levels of exhaustion.\r\n                        If your other lung is collapsed you can no longer breathe,\r\n                        you fall unsconsious when you run out of breath (as per holding breath rules), your brain dies 10 minutes later</td> </tr>\r\n                </tbody>\r\n            </table>\r\n\r\n        </Section>\r\n    </>;\r\n}\r\n\r\nexport default Combat;","\r\nimport React, { CSSProperties, useState } from \"react\";\r\nimport Section from \"../Section\"\r\nimport Firearms, { FireArm, AmmoInformation, AmmoTypesInformation, Ammo, AmmoModifications, FirearmModifications } from \"../equipment/Firearms\";\r\nimport MeleeWeapons, { MeleeWeapon } from \"../equipment/MeleeWeapons\";\r\nimport Ellipsis from \"../general/Ellipsis\";\r\nimport Indexer, { Indexed } from \"../general/Indexer\";\r\nimport { bodySuits, armorPlates, PowerArmor, powerArmors, ArmorData, integratedSystems } from \"../equipment/Armors\";\r\nimport ArmorCrafter from \"../equipment/ArmorCrafter\";\r\nimport { bigNumberSeparator, weightConverter } from \"../../utils/utilFunctions\";\r\nimport FirearmCrafter from \"../equipment/FirearmCrafter\";\r\nimport { Condition, Quality, writeDamageDice } from \"../equipment/Item\";\r\n\r\nconst Equipment: React.FC = () => {\r\n    return (<Section title='Equipment'>\r\n        <h2>Equipment</h2>\r\n        <p>Euipment is everything your character can wear on their body or hold and use.</p>\r\n        <Indexer title='equipment'>\r\n            <Indexed title='Melee Weapons'>\r\n                <h4>Glossary</h4>\r\n                <table>\r\n                    <thead><tr><th>abbreviation</th><th>meaning</th></tr></thead>\r\n                    <tbody>\r\n                        <tr><td>AP</td><td>Armor piercing, this weapon ignores this much damage, example AP 2 = ignores up to 2 damage reduction</td></tr>\r\n                        <tr><td>D</td><td>Damage, example D 1d8+1 = roll a 8 sided dice, add 1</td></tr>\r\n                        <tr><td>HB (CQ/OQ)</td><td>Hit bonus, close quarters/open quarters, example HB 2 = add 2 to skill roll, HB -3 CQ = subtract 3 if in close quarters</td></tr>\r\n                    </tbody>\r\n                </table>\r\n                <h4>Melee weapons</h4>\r\n\r\n                <WeaponTable data={MeleeWeapons}></WeaponTable>\r\n                <p>Light weapons gain 1/4 of your strength (rounded down) as a damage bonus, they are characterized as one handed weapon that can be easily concealed\r\n                    <br />\r\n                    Medium weapons gain 1/3 of your strength (rounded down) as a bonus damage, they are characterized as one handed weapons that are too big to be easily concealed\r\n                    <br />\r\n                    Heavy weapons gain 1/2 of your strength (rounded down) as bonus damage, they are characterized as two handed weapons and often are too big for close quarter combat\r\n                </p>\r\n                <p>Close quarters is defined as being adjecent to 2 or more walls or large obstacles, open quarters is empty space around you (nothing to take cover behind)</p>\r\n                <p>Melee weapons cause bleeding if damage dealt from single attack is equal to or greater than 50% of the target's life, bludgeoning weapons like hammers cause internal bleeding.</p>\r\n            </Indexed>\r\n            <Indexed title='Firearms'>\r\n                <h4>Guns</h4>\r\n                <p>All firearms cause bleeding, except lasers. Removing bullets requires a surgery, (medicine check DC = 10 + 3 per bullet), each bullet remaining in body reduces max life by 3.</p>\r\n                <FirearmCrafter />\r\n                <hr />\r\n                <FirearmTable data={Firearms} />\r\n                <p> Condition adds to to hit modifier, quality adds to both to hit and damage. </p>\r\n                <h5>Overheating</h5>\r\n                <p>Some firearms overheat in certain situations.\r\n                    Sub-machine guns and assault rifles (fully automatic rifle) when using fully automatic mode will overheat when they use twice their magazine capacity.\r\n                    Once overheated they deal -2 damage and have -4 to hit. Cooling takes 10 minutes.</p>\r\n                <p>Machineguns can be belt fed ammunition and do not overheat due to built in cooling.</p>\r\n                <p>Energy weapons overheat when they have expended half of their capacity in 1 minute (10 rounds).\r\n                    Once overheated energy weapons can not be fired. Cooling takes 10 minutes\r\n                </p>\r\n                <h5>Firearm modifications</h5>\r\n                <p>In addition to the various weapons there are modifications which can affect the firearms performance in various ways</p>\r\n                <ul>\r\n                    {FirearmModifications.map(fm => <li key={`pm_e_fm_${fm.name}`}><b>{fm.name}</b>: {fm.description}\r\n                        <br />\r\n                        <ul>{fm.effects.map(e => <li key={`pm_e_fm_fme_${e}`}>{e}</li>)}</ul>\r\n                        Weight: {fm.weight}\r\n                        <br />Cost: {fm.cost}\r\n                    </li>)}\r\n                </ul>\r\n\r\n                <h4>Ammunition</h4>\r\n                <p>All ammunition comes various forms and serve different purposes and come in different costs</p>\r\n                {AmmoTable(AmmoTypesInformation)}\r\n                <b>Modifications</b>\r\n                <ul>\r\n                    {AmmoModifications.map(am => <li key={`pme_am_${am.name}`}><b>{am.name}</b>: {am.description}<br /> cost: {am.cost * 100}%</li>)}\r\n                </ul>\r\n            </Indexed>\r\n            <Indexed title='Body Armors'>\r\n                <p>Armors come in many forms, anything that offers either damage reduction or armor penalty counts as body armor. Damage reduction is applied to any incoming damage, armor penalty is applied to all agility based rolls. Every time an armor fails to absorb all damage it loses damage reduction by 1. If it hits 0 then it is no longer able to offer protection</p>\r\n                <p>Armor have up to three layers, the inner body suit, the armor plates and the power armor frame</p>\r\n                <p>Additionally armor cost is affected by three factors, quality/condition, size, coverage</p>\r\n                <p>Quality/condition simply applies to total damage reduction, however pristine and intact give no benefit. They merely act as a buffer</p>\r\n                <p>Size applies to weight and cost, but not to protection. Armors must often be custom made to the wearer</p>\r\n                <ul>\r\n                    <li>Tiny: -25% cost/weight</li>\r\n                    <li>Small: -10% cost/weight</li>\r\n                    <li>Medium: no effect</li>\r\n                    <li>Large: +10% cost/weight</li>\r\n                    <li>Huge: +25% cost/weight</li>\r\n                </ul>\r\n                <p>Coverage is a matter of how much the armor covers the body, as a matter of rule simplification armors are assumed to protect the more vital areas first.\r\n                    When coverage is less than full roll a 1d6 dice and if the dice equals or exceeds the value then you benefit, otherwise you don't.\r\n                    When blocking you always receive protection from armor as it is assumed that the character blocks using armor or shield.<br />\r\n                    Full plate armors require vast or full protection.<br />\r\n                    Power Armor requires vast or full protection.<br />\r\n                    Armor plates require body suits.\r\n                </p>\r\n                <ul>\r\n                    <li>Full protection: 100% cost/weight and 6/6 protection (no roll needed) - entire body protected</li>\r\n                    <li>Vast majority protection: 90% cost/weight and 5/6 roll - entire body except for hands</li>\r\n                    <li>Major protection: 80% cost/weight and 4/6 roll - helmet, body, legs and joints</li>\r\n                    <li>Half protection: 70% cost/weight and 3/6 roll - helmet, body, joints</li>\r\n                    <li>Small protection: 50% cost/weight and 2/6 roll (not available for power armor) - helmet and body</li>\r\n                    <li>Minor protection: 30% cost/weight and 1/6 roll (not available for power armor) - open face helmet and torso</li>\r\n                </ul>\r\n                <p>A power armor battery lasts for 5 days (or exactly 80 hours) of active use, takes 8 hours to fully recharge if plugged into a household electric socket. Can be plugged into electric vehicle socket, will recharge in 30 minutes.</p>\r\n                <p>Agility penalty applies to rolls and defense score. Your effective agility score can be reduced below zero for skill rolls but not defense.</p>\r\n                <ArmorCrafter />\r\n                <h5>Body Suit</h5>\r\n                <ArmorTable armors={bodySuits} />\r\n                <h5>Armor Plates</h5>\r\n                <ArmorTable armors={armorPlates} />\r\n                <h5>Power Armor Frame</h5>\r\n                <ArmorTable armors={powerArmors} />\r\n                <h5>Integrated systems</h5>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th style={{ width: '20%' }}>Name</th>\r\n                            <th>Description</th>\r\n                            <th style={{ width: '15%' }}>Cost</th>\r\n                            <th style={{ width: '15%' }}>Weight</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {integratedSystems.map(i => <tr key={`pm_e_ar_is_${i.name}`}>\r\n                            <td>{i.name}</td>\r\n                            <td><Ellipsis text={i.description} cutOff={40} /></td>\r\n                            <td>{bigNumberSeparator(i.cost)}</td>\r\n                            <td>{i.weight}</td>\r\n                        </tr>)}\r\n                    </tbody>\r\n                </table>\r\n\r\n                <h5>Armor Degradation</h5>\r\n                <i>Armor is degraded every time it is penetrated, ie whenver the wearer takes damage.</i>\r\n                <p>When you take damage while wearing armor roll a d20, if the roll is equal or above then the armor takes no damage.\r\n                    Otherwise the armor permanently loses 1 point of damage absorbtion (keep track of original value when this happens).<br />\r\n                    Since you can't roll a zero on a d20 you only need to roll if more than one point of damage goes through.<br />\r\n                    To repair it requires spare parts, the spare parts cost an equal fraction of total loss divided by half.<br />\r\n                    Repair requires a mechanics roll equal to repair cost / 200 rounded down. And if it is a power armor, an equal roll for electronics.<br />\r\n                    It takes 1 hour per point to repair.<br />\r\n                    If damage absorbtion is reduced to zero then the power armor effects no longer work. However some effects like hermetic seal will immediately stop working if even one point is reduced.\r\n                </p>\r\n                <p>\r\n                    For example, a Carbon Reinforced Kevlar, Fullplate Steel armor has 10 damage absorbtion. If you then receive 12 damage points, 10 is subtracted for a total of 2.<br />\r\n                    If you roll 1 on a d20 the damage absorbtion will be reduced to 9.<br />\r\n                    The armor costed 14000 credits, so (14000 * (1 / 10)) / 2) = 700 credits, DC 3, 1 hour.\r\n                </p>\r\n                <p>\r\n                    A  Carbon Reinforced Kevlar, Fullplate Titan Alloy, Titan Power Armor has 16 damage absorbtion. If you then receive 20 damage points five times, 16 is subtracted for a total of 4 x 5.<br />\r\n                    If you roll 3 on a d20 the damage absorbtion will be reduced to 15, 14, 13, 12 then 11.<br />\r\n                    The armor costed 33000 credits, so (33000 * (5 / 16)) / 2) = 1030, 2060, 3090, 4125, 5150 credits, DC 5, 10, 15, 20, 25 taking 1,2,3,4,5 hour.\r\n                </p>\r\n                <p>Armor quality is applied to agility penalty per piece, penalty can not be reduced below zero so a better than normal quality power armor does nothing.</p>\r\n            </Indexed>\r\n            <Indexed title='Quality and Condition'>\r\n                <p>Quality and condition are optional rules that can increase variety and make items feel more personal. Unless stated otherwise quality and condition effects apply to skill rolls using tools.</p>\r\n                <h4>Condition</h4>\r\n                <p>Condition refers to the wear and tear of an item that is used in skill checks, it is also affected by direct damage and repair.</p>\r\n                <table>\r\n                    <thead>\r\n                        <tr><th>Condition</th><th>Effect</th><th>Value</th></tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {Condition.map(c => <tr key={`pm_e_qq_c_${c.label}`}> <td>{c.label}</td><td>{plusMinus(c.effect)}</td><td>{c.valueModifier * 100}%</td></tr>)}\r\n                    </tbody>\r\n                </table>\r\n                <p>When an item has been used a number of times equal to the users skill it drops in condition by 1 step, a repair skill check can prevent this. A failed repair can cause the quality to drop.</p>\r\n                <p>Someone who knows how to repair an item can always choose to repair them, each time lets you increase the condition by 1 step.</p>\r\n                <p>An item that is allowed to deteriorate below broken can no longer be used for its intended purpose, it is completely ruined.</p>\r\n                <p>Any item is always assumed to be at pristine quality if possible, the player may choose to buy a used item, at which it will cost less. Multiplie factors aways appy multiplicative, a broken trash item costs x 0.4 x 0.4 = 0.16, or 16% of its base value, buying it at start costs therefore 8%.</p>\r\n                <p>Players choosing to buy a house using these factors will take the combined effects to their mental health.</p>\r\n                <h4>Quality</h4>\r\n                <p>Quality refers to the materials used, the precision of the craft and it can even refer to if it's made for one person in particular</p>\r\n                <table>\r\n                    <thead>\r\n                        <tr><th>Quality</th><th>Effect</th><th>Value</th></tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {Quality.map(c => <tr key={`pm_e_qq_q_${c.label}`}> <td>{c.label}</td><td>{plusMinus(c.effect)}</td><td>{c.valueModifier * 100}%</td></tr>)}\r\n                    </tbody>\r\n                </table>\r\n                <p>Improving the quality of an item is not possible without supplying new material, these materials need to be of equivalent or higher quality, a failed attempt will consume the materials. A badly failed will reduce condition.</p>\r\n                <p>Items with quality below trash can not be used.</p>\r\n                <p>Items with quality great, superb, awful and trash can generally not be bought on the mainstream market.</p>\r\n            </Indexed>\r\n        </Indexer>\r\n\r\n    </Section>);\r\n}\r\n\r\nconst plusMinus = (n: number) => {\r\n    if (n === 0) return '+/- 0';\r\n    else if (n > 0) return `+${n}`;\r\n    else return `-${Math.abs(n)}`;\r\n};\r\n\r\ninterface IArmorTableProps {\r\n    armors: ArmorData[];\r\n}\r\n\r\nconst armorThSizeWide: CSSProperties = {\r\n    width: '30%'\r\n}\r\n\r\nconst ArmorTable: React.FC<IArmorTableProps> = ({ armors }) => {\r\n    return <table>\r\n        <thead>\r\n            <tr>\r\n                <th style={armorThSizeWide}>Name</th>\r\n                <th style={armorThSizeWide}>Damage Absorbtion:Minimum damage</th>\r\n                <th>Mod</th>\r\n                <th>Cost</th>\r\n                <th>Weight</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {armors.map(bs => <ArmorRow key={`pm_e_ar_${bs.name}`} armor={bs}></ArmorRow>)}\r\n        </tbody>\r\n    </table>;\r\n}\r\ninterface IArmorRow {\r\n    armor: ArmorData;\r\n}\r\nconst ArmorRow: React.FC<IArmorRow> = ({ armor }) => {\r\n    const [descriptionOpen, setDescriptionOpen] = useState(false);\r\n    let extra = '';\r\n    if (armor.armorType === 'powerArmor') {\r\n        const pa: PowerArmor = armor as PowerArmor;\r\n        extra = `| ${pa.strengthMod} | ${pa.perceptionMod}`;\r\n    }\r\n    if (descriptionOpen)\r\n        return <>\r\n            <tr onClick={() => setDescriptionOpen(false)}>\r\n                <td>{armor.name}</td>\r\n                <td>{armor.damageAbsorbtion.damageReduction}:{armor.damageAbsorbtion.minimumDamage}</td>\r\n                <td>{armor.actionPointMod} {extra}</td>\r\n                <td>{bigNumberSeparator(armor.cost)}</td>\r\n                <td>{armor.weight}</td>\r\n            </tr>\r\n            <tr><td colSpan={5}><Ellipsis text={armor.description} cutOff={120}></Ellipsis></td></tr>\r\n        </>;\r\n    else\r\n        return (<tr onClick={() => setDescriptionOpen(true)}>\r\n            <td>{armor.name}</td>\r\n            <td>{armor.damageAbsorbtion.damageReduction}:{armor.damageAbsorbtion.minimumDamage}</td>\r\n            <td>{armor.actionPointMod} {extra} </td>\r\n            <td>{bigNumberSeparator(armor.cost)}</td>\r\n            <td>{armor.weight}</td>\r\n        </tr>);\r\n}\r\n\r\n\r\ninterface WeaponTableProps {\r\n    data: MeleeWeapon[];\r\n}\r\n\r\nconst WeaponTable: React.FC<WeaponTableProps> = ({ data }) => {\r\n    const s: CSSProperties = {\r\n        borderLeft: '1px dotted lightgrey'\r\n    }\r\n\r\n    return (<table>\r\n        <thead>\r\n            <tr>\r\n                <th>Size</th>\r\n                <th>Name</th>\r\n                <th>Damage</th>\r\n                <th>AP</th>\r\n                <th>HB</th>\r\n                <th>Weight</th>\r\n                <th>Value</th>\r\n                <th>Strength req</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {data.map(weapon => {\r\n                return <tr key={`equipment_firearms_row_${weapon.name}`}>\r\n                    <td style={s}>{weapon.size}</td>\r\n                    <td style={s}>{weapon.name}</td>\r\n                    <td style={s}>{writeDamageDice(weapon.damage, 0)}</td>\r\n                    <td style={s}>{weapon.armorpiercing}</td>\r\n                    <td style={s}>{weapon.hitbonus}</td>\r\n                    <td style={s}>{weightConverter(weapon.weight)}</td>\r\n                    <td style={s}>{bigNumberSeparator(weapon.value)} c</td>\r\n                    <td style={s}> {weapon.strengthRequirement} </td>\r\n                </tr>\r\n            })}\r\n        </tbody>\r\n    </table>);\r\n}\r\n\r\ninterface FirearmTableProps {\r\n    data: FireArm[];\r\n}\r\n\r\nconst FirearmTable: React.FC<FirearmTableProps> = ({ data }) => {\r\n    return (<table>\r\n        <thead>\r\n            <tr>\r\n                <th>Class</th>\r\n                <th>Name</th>\r\n                <th>Damage</th>\r\n                <th>AP</th>\r\n                <th>HB</th>\r\n                <th>Range</th>\r\n                <th>Action (points)</th>\r\n                <th>Ammo/Cap (reload time)</th>\r\n                <th>Weight</th>\r\n                <th>Value</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {data.map(f => FireArmRow(f))}\r\n        </tbody>\r\n    </table>)\r\n}\r\n\r\nconst firearmRowStyle: CSSProperties = {\r\n    cursor: 'pointer'\r\n};\r\n\r\nconst getAmmoInfo = (ammo: Ammo): AmmoInformation => {\r\n    const c = AmmoTypesInformation.find(a => a.ammo === ammo);\r\n    if (c !== undefined) return c;\r\n    else throw new Error();\r\n}\r\n\r\nconst FireArmRow = (f: FireArm) => {\r\n    const [descriptionOpen, setDescriptionOpen] = useState(false);\r\n    const splash = f.splashRange ? 'Splash' : '';\r\n    const splashRadius = splash ? `;${f.lowDamageZone} m radius` : '';\r\n    return (<><tr style={firearmRowStyle} onClick={() => setDescriptionOpen(!descriptionOpen)}>\r\n        <td>{f.fireArmClass}</td>\r\n        <td>{f.name}</td>\r\n        <td>{writeDamageDice(f.damage, 0)} {f.splashRange !== undefined ? `(s)` : ' '}</td>\r\n        <td>{f.armorpiercing || 0}</td>\r\n        <td>{f.hitbonus || 0}</td>\r\n        <td>{f.range}</td>\r\n        <td>{f.fireCost} | {f.fireAction.join(', ')}</td>\r\n        <td>{f.reload} | {f.capacity} ({f.ammo}) {f.rps !== undefined ? '/ rpr: ' + f.rps * 6 : null}</td>\r\n\r\n        <td>{weightConverter(f.weight)}</td>\r\n        <td title={(getAmmoInfo(f.ammo).cost * f.capacity).toFixed(0)}>{bigNumberSeparator(f.value)}</td>\r\n    </tr>\r\n        {descriptionOpen && <tr>\r\n            <td>STR: {f.strengthRequirement}</td>\r\n            <td>\r\n                {splash}{splashRadius}\r\n            </td>\r\n            <td colSpan={8}><Ellipsis text={f.description} cutOff={100} /></td>\r\n        </tr>}\r\n    </>);\r\n}\r\n\r\nconst capitalize = (str: string): string =>\r\n    str.charAt(0).toUpperCase() + str.slice(1);\r\n\r\nconst AmmoTable = (ammo: AmmoInformation[]) =>\r\n    <table>\r\n        <thead>\r\n            <tr>\r\n                <th>Type</th>\r\n                <th>Cost (per 1)</th>\r\n                <th>Weight (pet 1)</th>\r\n                <th>Modifications</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {ammo.map(a =>\r\n                <React.Fragment key={`pm_e_at_tr1_${a.ammo}`}>\r\n                    <tr>\r\n                        <td>{a.ammo}</td>\r\n                        <td>{a.cost}</td>\r\n                        <td>{a.weight}</td>\r\n                        <td>\r\n                            {a.types.map(t => capitalize(t)).join(', ')}\r\n                        </td>\r\n                    </tr>\r\n                    <tr >\r\n                        <td className='univeralBorderBottom' colSpan={3}>{a.description}</td>\r\n                        <td className='univeralBorderBottom'> Heard from: {a.loudness.hearingRange}, deaf from:{a.loudness.deafnessRange} for {a.loudness.deafnessTime} rounds </td>\r\n                    </tr>\r\n                </React.Fragment>)}\r\n        </tbody>\r\n    </table>;\r\n\r\nexport default Equipment;","import React, { useState } from \"react\";\r\nimport Section from \"../Section\";\r\nimport Indexer, { Indexed } from \"../general/Indexer\";\r\n\r\n\r\nconst Wealth: React.FC = () => {\r\n    return <Section title='Wealth'>\r\n\r\n\r\n        <h2>Wealth</h2>\r\n        <i>Personal wealth varies greatly, while there are ultra rich people players may not start as one. In addition, due to the lack of widespread extreme poverty players will generally start of with wealth in similar orders of magnitude.</i>\r\n        <Indexer title='wealth'>\r\n            <Indexed title='Starting wealth'>\r\n                <p>Every character starts off with a flat 1d100 x 1d100 c </p>\r\n                <WealthRoller />\r\n            </Indexed>\r\n            <Indexed title='Wealth from age'>\r\n\r\n                <p>Additionally your character gets money from working and saving up over time. Gaining different amounts at different stages</p>\r\n                <ul>\r\n                    <li>Age 16-19: 50 c / year</li>\r\n                    <li>Age 20-29: 200 c / year</li>\r\n                    <li>Age 30-49: 400 c / year</li>\r\n                    <li>Age 50-69: 200 c / year</li>\r\n                    <li>Age 60-79: 100 c / year</li>\r\n                    <li>Age 80+: 50 c / year</li>\r\n                </ul>\r\n                <WealthCalculator />\r\n                <p>This is then multiplied by your profession, keep in mind that your your character has different professions over different ages then you need to apply those per category</p>\r\n                <p>Professions also require a certain amount of skill point investment (perks count), with higher multiplier at higher rates</p>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Profession</th>\r\n                            <th>Skills</th>\r\n                            <th>1st mult req</th>\r\n                            <th>1st mult</th>\r\n                            <th>2nd mult req</th>\r\n                            <th>2n mult</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>None of the below</td>\r\n                            <td>any</td>\r\n                            <td>300</td>\r\n                            <td>x1.5</td>\r\n                            <td>400</td>\r\n                            <td>x2</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Doctor</td>\r\n                            <td>Medicine</td>\r\n                            <td>90</td>\r\n                            <td>3x</td>\r\n                            <td>120</td>\r\n                            <td>4x</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Engineer</td>\r\n                            <td>Computer, Mechanics</td>\r\n                            <td>80</td>\r\n                            <td>x2</td>\r\n                            <td>140</td>\r\n                            <td>x2.5</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Scientist</td>\r\n                            <td>computer, science</td>\r\n                            <td>120</td>\r\n                            <td>x1.5</td>\r\n                            <td>140</td>\r\n                            <td>x2</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Pilot</td>\r\n                            <td>Pilot</td>\r\n                            <td>80</td>\r\n                            <td>x1.5</td>\r\n                            <td>120</td>\r\n                            <td>x2</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Salesman</td>\r\n                            <td>persuasion, empathy</td>\r\n                            <td>60</td>\r\n                            <td>x1.5</td>\r\n                            <td>90</td>\r\n                            <td>x2</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Soldier/Police</td>\r\n                            <td>firearms, survival, stealth, combat, athletics, investigation</td>\r\n                            <td>120</td>\r\n                            <td>x1.5</td>\r\n                            <td>180</td>\r\n                            <td>x3</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Attorney</td>\r\n                            <td>empathy, intimidation, persuasion, subterfuge</td>\r\n                            <td>160</td>\r\n                            <td>x2</td>\r\n                            <td>240</td>\r\n                            <td>x3</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Entrepreneur/Trader/Middle Management</td>\r\n                            <td>empathy, intimidation, investigation, persuasion, subterfuge</td>\r\n                            <td>150</td>\r\n                            <td>x1.5</td>\r\n                            <td>250</td>\r\n                            <td>x2.5</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </Indexed>\r\n            <Indexed title='Starting items'>\r\n                <p>Any items/housing/etc you buy at character creation cost 50% less, for example a computer costs only 1000 c if you buy it at character creation.</p>\r\n                <p>Additionally any item costing 10,000 c (before discount) or more may be paid via partial payment, you may spend up to 100x your total starting wealth on any item where you pay 1/200 of its value every month for 30 years (this is to include principal etc)</p>\r\n            </Indexed>\r\n            <Indexed title='Housing'>\r\n                <p>You may choose to buy a house or apartment using a partial payment mortage, costing 40,000 c per square meter (min 20)</p>\r\n                <p>If not you may choose to rent a house or apartment for a monthly fee of 100 c per square meter (min 20)</p>\r\n                <p>In either of these are included running water, electricity, internet connection, food is an additional 3000 c per month generally</p>\r\n                <p>You may also choose to be homeless or even sell your house at the start of the game, however take note that being on your own is extremely dangerous and not recommended</p>\r\n            </Indexed>\r\n            <Indexed title='Your job'>\r\n\r\n                <p>It is recommended that you start out with a job, a job will pay out 8,000 c a month. If you choose a job in the above tabel the multiplier also applies to this amount.</p>\r\n                <h4>An adventurer job</h4>\r\n                <p>Once the game starts the DM may choose to give your character an adventuring job of some description, the recommended amount is 10,000 c per month plus bonus based on performance. Or 4,000 c if housing and food is provided by the job.</p>\r\n                <h4>Grand Larceny</h4>\r\n                <p>Crime generally doesn't pay, but your character may choose to start off with a criminal record. Roll 1d6 if you choose to be a criminal.<br />\r\n        It is also expected that your character has spent at least 30 points into the larceny skill</p>\r\n                <table>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>1</td>\r\n                            <td>You have been caught multiple times for your crimes and are a well known criminal, you start with reduced privileges according to the DMs discression and you start off with 50% less wealth</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>2</td>\r\n                            <td>You have been caught at least once and as such are a known criminal, you may be recognized and forfeit any profession mutliplier.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>3</td>\r\n                            <td>You have done some small petty crime and never been caught for it, you start with 500 c extra.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>4</td>\r\n                            <td>You have regularly committed petty crimes and never been caught, you start with 1,000 c extra.</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>5</td>\r\n                            <td>You have committed at least one felony (violent crime) and is suspected for it, you start with 500 c extra</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>6</td>\r\n                            <td>You are a successful career criminal, the law enforcement knows you are guilty but can't prove it, you have several connections and start with 3,000 c extra.</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </Indexed>\r\n        </Indexer>\r\n    </Section>\r\n}\r\n\r\nconst Roll1D100 = () => Math.floor((Math.random() * 100) + 1);\r\n\r\nconst WealthRoller = () => {\r\n    const [firstD100, setFirstD100] = useState(0);\r\n    const [secondD100, setSecondD100] = useState(0);\r\n    const ReRoll = () => {\r\n        setFirstD100(Roll1D100());\r\n        setSecondD100(Roll1D100());\r\n    }\r\n    return <><button onClick={() => ReRoll()}>Roll</button>{firstD100} x {secondD100} = {firstD100 * secondD100} c</>\r\n}\r\n\r\nconst WealthCalculator: React.FC = () => {\r\n    const [age, setAge] = useState(24);\r\n    const [multiplier, setMultiplier] = useState(1);\r\n\r\n    let credits = 0;\r\n    for (let a = 0; a < age; a++) {\r\n        if (a < 16) continue;\r\n        else if (a < 20) credits += 50;\r\n        else if (a < 30) credits += 200;\r\n        else if (a < 50) credits += 400;\r\n        else if (a < 60) credits += 100;\r\n        else credits += 50;\r\n    }\r\n    return <>\r\n        <input style={{ width: '15%' }} value={age} type='text' onChange={(e) => setAge(parseInt(e.target.value))} ></input> age |\r\n        <input style={{ width: '15%' }} value={multiplier} type='text' onChange={(e) => setMultiplier(parseFloat(e.target.value))} ></input> multiplier<br />\r\n        Credits: {credits * multiplier}\r\n    </>;\r\n}\r\n\r\nexport default Wealth;","\r\nexport type Medium = 'land' | 'air' | 'water' | 'subwater' | 'space' | 'hyperspace';\r\n\r\nexport interface FuelType {\r\n    name: string;\r\n    description: string;\r\n    cost: number;\r\n}\r\n\r\n\r\nexport const Electricity: FuelType = {\r\n    name: 'electricity',\r\n    description: 'requires battery to hold charge',\r\n    cost: 0.01\r\n};\r\n\r\nexport const Synthoil: FuelType = {\r\n    name: 'synthoil',\r\n    description: 'synthetic hydrocarbon based oil',\r\n    cost: 20,\r\n};\r\n\r\nexport const RocketFuel: FuelType = {\r\n    name: 'rocket fuel',\r\n    description: 'cryogenic methane and oxygen, stored in cryogenic tanks. 3.5:1 ratio methane:oxygen',\r\n    cost: 40,\r\n};\r\n\r\nexport const TritiumDeuterium: FuelType = {\r\n    name: 'tritium deuterium',\r\n    description: 'mixture of tritium and deuterium used to run micro fusion powerplants, 1 unit of this creates 10 million electricity units, tritium is radioactive',\r\n    cost: 150000,\r\n};\r\n\r\nexport const DeuteriumLithium: FuelType = {\r\n    name: 'deuterium lithium',\r\n    description: 'mixture of deuterium and lithium used to run small, medium and large fusion powerplants, 1 unit of this creates 20 million electricity units',\r\n    cost: 30000,\r\n}\r\n\r\nexport const HyperMatter: FuelType = {\r\n    name: 'exotic hypermatter',\r\n    description: 'a exotic matter which has strange properties like negative energy',\r\n    cost: 2000000,\r\n}\r\n\r\nexport interface Part {\r\n    name: string;\r\n    description: string;\r\n    cost: number;\r\n    weightKg: number;\r\n    /**\r\n     * one if not defined\r\n     */\r\n    quantity?: number | undefined;\r\n}\r\n\r\nexport interface EnergyConverter {\r\n    input: FuelType;\r\n    output: FuelType;\r\n    convertionRatio: number;\r\n    convertionSpeed: number;\r\n}\r\n\r\nexport interface Thruster {\r\n    fuelUse: FuelType;\r\n    fuelUnitsConsumeRate: number;\r\n    impulseKn: number;\r\n}\r\n\r\nexport interface PassengerSection {\r\n    passengerCount: number;\r\n    cargoPerPerson: number;\r\n    isEnclosed: boolean;\r\n    isLivingSpace: boolean;\r\n    meterSquarePerPerson: number;\r\n}\r\n\r\nexport const MicroFusionCell: Part & EnergyConverter = {\r\n    name: 'Micro Fusion Cell',\r\n    description: 'uses Tritium Deuterium fusion fuel, can generate up to 1 unity of electricity per second',\r\n    cost: 500000,\r\n    weightKg: 5000,\r\n    input: TritiumDeuterium,\r\n    output: Electricity,\r\n    convertionRatio: 1 / 10000000,\r\n    convertionSpeed: 1,\r\n};\r\n\r\nexport const SmallFusionCell: Part & EnergyConverter = {\r\n    name: 'Small Fusion Cell',\r\n    description: 'uses Deuterium lithium fusion fuel, can generate up to 5 unity of electricity per second',\r\n    cost: 1500000,\r\n    weightKg: 15000,\r\n    input: DeuteriumLithium,\r\n    output: Electricity,\r\n    convertionRatio: 1 / 100000000,\r\n    convertionSpeed: 5,\r\n};\r\n\r\nexport const MediumFusionCell: Part & EnergyConverter = {\r\n    name: 'Medium Fusion Cell',\r\n    description: 'uses Deuterium lithium fusion fuel, can generate up to 25 unity of electricity per second',\r\n    cost: 5000000,\r\n    weightKg: 50000,\r\n    input: DeuteriumLithium,\r\n    output: Electricity,\r\n    convertionRatio: 1 / 100000000,\r\n    convertionSpeed: 25,\r\n};\r\n\r\nexport const LargeFusionCell: Part & EnergyConverter = {\r\n    name: 'Large Fusion Cell',\r\n    description: 'uses Deuterium lithium fusion fuel, can generate up to 300 unity of electricity per second',\r\n    cost: 40000000,\r\n    weightKg: 500000,\r\n    input: DeuteriumLithium,\r\n    output: Electricity,\r\n    convertionRatio: 1 / 100000000,\r\n    convertionSpeed: 300,\r\n};\r\n\r\nexport const HugeFusionCell: Part & EnergyConverter = {\r\n    name: 'Huge Fusion Cell',\r\n    description: 'uses Deuterium lithium fusion fuel, can generate up to 3500 unity of electricity per second',\r\n    cost: 400000000,\r\n    weightKg: 5000000,\r\n    input: DeuteriumLithium,\r\n    output: Electricity,\r\n    convertionRatio: 1 / 100000000,\r\n    convertionSpeed: 3500,\r\n};\r\n\r\nexport const FusionPowerPlant: Part & EnergyConverter = {\r\n    name: 'Fusion Power Plant',\r\n    description: 'uses Deuterium lithium fusion fuel, can generate up to 40000 unity of electricity per second',\r\n    cost: 4000000000,\r\n    weightKg: 50000000,\r\n    input: DeuteriumLithium,\r\n    output: Electricity,\r\n    convertionRatio: 1 / 100000000,\r\n    convertionSpeed: 40000,\r\n};\r\n\r\nexport const ElectricMotor: Part & Thruster = {\r\n    name: 'Electric Motor',\r\n    description: 'Electric motor, converts electric units into mechanical movement',\r\n    cost: 1000,\r\n    weightKg: 1,\r\n    fuelUse: Electricity,\r\n    fuelUnitsConsumeRate: 1,\r\n    impulseKn: 6.5,\r\n};\r\n\r\nexport const ElectricPropeller: Part & Thruster = {\r\n    name: 'Electric Propeller',\r\n    description: 'Electric propeller, converts electric units into thrust',\r\n    cost: 10000,\r\n    weightKg: 10,\r\n    fuelUse: Electricity,\r\n    fuelUnitsConsumeRate: 9,\r\n    impulseKn: 65\r\n};\r\n\r\nexport const MicroFusionThruster: Part & Thruster = {\r\n    name: 'Fusion Thruster',\r\n    description: 'Taps into a fusion power cell to create propulsion',\r\n    cost: 100000,\r\n    weightKg: 1000,\r\n    fuelUse: TritiumDeuterium,\r\n    fuelUnitsConsumeRate: 1,\r\n    impulseKn: 1140\r\n};\r\n\r\nexport const FusionThruster: Part & Thruster = {\r\n    name: 'Fusion Thruster',\r\n    description: 'Taps into a fusion power cell to create propulsion',\r\n    cost: 150000,\r\n    weightKg: 1000,\r\n    fuelUse: DeuteriumLithium,\r\n    fuelUnitsConsumeRate: 1,\r\n    impulseKn: 2280\r\n};\r\n\r\nexport const InternalCombusionEngine: Part & Thruster = {\r\n    name: 'Internal Combusion Engine',\r\n    description: 'Converts synthoil units into mechanical movement',\r\n    cost: 900,\r\n    weightKg: 1,\r\n    fuelUse: Synthoil,\r\n    fuelUnitsConsumeRate: 1,\r\n    impulseKn: 6.5,\r\n};\r\n\r\nexport const JetEngine: Part & Thruster = {\r\n    name: 'Jet Engine',\r\n    description: 'Converts synthoil units into air propulsion',\r\n    cost: 2000,\r\n    weightKg: 2,\r\n    fuelUse: Synthoil,\r\n    fuelUnitsConsumeRate: 1,\r\n    impulseKn: 10,\r\n};\r\n\r\nexport const RocketEngine: Part & Thruster = {\r\n    name: 'Rocket Engine',\r\n    description: 'Converts rocket fuel units into propulsion',\r\n    cost: 5000,\r\n    weightKg: 2,\r\n    fuelUse: RocketFuel,\r\n    fuelUnitsConsumeRate: 5,\r\n    impulseKn: 500,\r\n};\r\n\r\nexport const SmallHabitatSection: Part & PassengerSection = {\r\n    name: 'Small habitat section',\r\n    description: 'Can house 3 people, includes base amenities and storage, radiation shielding, airtight. 7 meter radius 2.5 meter tall cylinder',\r\n    cost: 7000,\r\n    weightKg: 7000,\r\n    passengerCount: 3,\r\n    cargoPerPerson: 10,\r\n    isEnclosed: true,\r\n    isLivingSpace: true,\r\n    meterSquarePerPerson: 30,\r\n};\r\n\r\nexport const MediumHabitatSection: Part & PassengerSection = {\r\n    name: 'Small habitat section',\r\n    description: 'Can house 9 people, includes base amenities and storage, radiation shielding, airtight. 19 meter radius 2.5 meter tall cylinder',\r\n    cost: 19000,\r\n    weightKg: 19000,\r\n    passengerCount: 9,\r\n    cargoPerPerson: 10,\r\n    isEnclosed: true,\r\n    isLivingSpace: true,\r\n    meterSquarePerPerson: 30,\r\n};\r\n\r\nexport const LargeHabitatSection: Part & PassengerSection = {\r\n    name: 'Small habitat section',\r\n    description: 'Can house 31 people, includes base amenities and storage, radiation shielding, airtight. 30 meter radius 2.5 meter tall cylinder',\r\n    cost: 30000,\r\n    weightKg: 30000,\r\n    passengerCount: 31,\r\n    cargoPerPerson: 10,\r\n    isEnclosed: true,\r\n    isLivingSpace: true,\r\n    meterSquarePerPerson: 30,\r\n};\r\n\r\nexport const HugeHabitatSection: Part & PassengerSection = {\r\n    name: 'Small habitat section',\r\n    description: 'Can house 31 people, includes base amenities and storage, radiation shielding, airtight. 61 meter radius 2.5 meter tall cylinder',\r\n    cost: 30000,\r\n    weightKg: 30000,\r\n    passengerCount: 97,\r\n    cargoPerPerson: 15,\r\n    isEnclosed: true,\r\n    isLivingSpace: true,\r\n    meterSquarePerPerson: 40,\r\n};\r\n\r\n\r\n\r\nexport const Parts: Part[] = [\r\n    MicroFusionCell, SmallFusionCell, MediumFusionCell, LargeFusionCell, HugeFusionCell, FusionPowerPlant,\r\n    ElectricMotor, ElectricPropeller, MicroFusionThruster, FusionThruster, InternalCombusionEngine, JetEngine, RocketEngine\r\n];\r\n\r\nexport const AllFuelTypes: FuelType[] = [\r\n    Electricity, Synthoil, RocketFuel, TritiumDeuterium, DeuteriumLithium, HyperMatter\r\n]\r\n\r\nexport interface FuelEngine extends FuelType {\r\n    maxUnits?: number;\r\n    maxUsage?: number;\r\n}\r\n\r\nexport interface Vehicle {\r\n    medium: Medium[];\r\n    name: string;\r\n    /** passenger/crew stations and life support */\r\n    passengers: number;\r\n    /** total carry weight mass */\r\n    cargoKg: number;\r\n    fuelType: FuelEngine[];\r\n    parts: Part[];\r\n    /**\r\n     * kilometers\r\n     */\r\n    range: number;\r\n    /**\r\n     * meters per second\r\n     */\r\n    topSpeed: number;\r\n    /** meters per second per second */\r\n    acceleration: number;\r\n    cost: number;\r\n    description: string;\r\n}\r\n\r\nexport interface IDice {\r\n    numberOfDice: 1 | 2 | 3 | 4 | 5 | 6;\r\n    sidesPerDice: 4 | 6 | 8 | 10 | 12 | 20;\r\n}\r\n\r\nexport interface IRollAmount {\r\n    numberOf1d100: number;\r\n    sidesPerDice: number;\r\n    text: string;\r\n    passengerDamage?: IDice | undefined;\r\n}\r\n\r\nexport interface IDamageAmount {\r\n    damageAmountNumber: number;\r\n    damageText: string,\r\n}","import { Vehicle, Electricity } from \"./Vehicles\";\r\n\r\nconst LandVehicles: Vehicle[] = [\r\n    {\r\n        name: 'bicyle',\r\n        medium: ['land'],\r\n        passengers: 1,\r\n        cargoKg: 1,\r\n        fuelType: [],\r\n        range: 0,\r\n        topSpeed: 15,\r\n        acceleration: 5,\r\n        cost: 1000,\r\n        description: 'simple bicycle, speed and range depends on person using it (see athletics run, add 100% speed and range)',\r\n        parts: [],\r\n    },\r\n    {\r\n        name: 'motorcycle',\r\n        medium: ['land'],\r\n        passengers: 2,\r\n        cargoKg: 10,\r\n        fuelType: [Electricity],\r\n        range: 1000,\r\n        topSpeed: 55,\r\n        acceleration: 7,\r\n        cost: 5000,\r\n        description: 'electric motorcycle',\r\n        parts: [],\r\n    },\r\n    {\r\n        name: 'quadbike',\r\n        medium: ['land'],\r\n        passengers: 2,\r\n        cargoKg: 20,\r\n        fuelType: [Electricity],\r\n        range: 1000,\r\n        topSpeed: 35,\r\n        acceleration: 6,\r\n        cost: 6000,\r\n        description: 'electric quadcycle',\r\n        parts: [],\r\n    },\r\n    {\r\n        name: 'sedan',\r\n        medium: ['land'],\r\n        passengers: 4,\r\n        cargoKg: 100,\r\n        fuelType: [Electricity],\r\n        range: 1500,\r\n        topSpeed: 50,\r\n        acceleration: 8,\r\n        cost: 20000,\r\n        description: 'basic car',\r\n        parts: [],\r\n    },\r\n    {\r\n        name: 'truck',\r\n        medium: ['land'],\r\n        passengers: 6,\r\n        cargoKg: 10000,\r\n        fuelType: [Electricity],\r\n        range: 1500,\r\n        topSpeed: 40,\r\n        acceleration: 3,\r\n        cost: 200000,\r\n        description: 'large car with ample space, siginificant cargo size',\r\n        parts: [],\r\n    },\r\n    {\r\n        name: 'van',\r\n        medium: ['land'],\r\n        passengers: 8,\r\n        cargoKg: 150,\r\n        fuelType: [Electricity],\r\n        range: 1600,\r\n        topSpeed: 45,\r\n        acceleration: 7,\r\n        cost: 40000,\r\n        description: 'large car with lots of space',\r\n        parts: [],\r\n    },\r\n    {\r\n        name: 'campervan',\r\n        medium: ['land'],\r\n        passengers: 8,\r\n        cargoKg: 1500,\r\n        fuelType: [Electricity],\r\n        range: 2500,\r\n        topSpeed: 40,\r\n        acceleration: 5,\r\n        cost: 90000,\r\n        description: 'truck fitted with housing, huge battery capacity',\r\n        parts: [],\r\n    },\r\n    {\r\n        name: 'bus',\r\n        medium: ['land'],\r\n        passengers: 50,\r\n        cargoKg: 2000,\r\n        fuelType: [Electricity],\r\n        range: 2000,\r\n        topSpeed: 35,\r\n        acceleration: 3,\r\n        cost: 240000,\r\n        description: 'truck fitted with housing, huge battery capacity',\r\n        parts: [],\r\n    },\r\n];\r\n\r\nexport default LandVehicles;","import { Electricity, Vehicle } from \"./Vehicles\";\r\n\r\nconst WaterVehicles: Vehicle[] = [\r\n    {\r\n        name: 'paddle boat',\r\n        medium: ['water'],\r\n        passengers: 2,\r\n        cargoKg: 400,\r\n        fuelType: [],\r\n        range: 0,\r\n        topSpeed: 2,\r\n        acceleration: 1,\r\n        cost: 2000,\r\n        description: 'basic paddleboat',\r\n        parts: [],\r\n    },\r\n    {\r\n        name: 'jetski',\r\n        medium: ['water'],\r\n        passengers: 4,\r\n        cargoKg: 600,\r\n        fuelType: [Electricity],\r\n        range: 60,\r\n        topSpeed: 55,\r\n        acceleration: 7,\r\n        cost: 10000,\r\n        description: 'fast moving water ski',\r\n        parts: [],\r\n    },\r\n    {\r\n        name: 'speed boat',\r\n        medium: ['water'],\r\n        passengers: 8,\r\n        cargoKg: 2000,\r\n        fuelType: [Electricity],\r\n        range: 100,\r\n        topSpeed: 45,\r\n        acceleration: 5,\r\n        cost: 40000,\r\n        description: 'electric speed boat',\r\n        parts: [],\r\n    },\r\n    {\r\n        name: 'yacht',\r\n        medium: ['water'],\r\n        passengers: 10,\r\n        cargoKg: 60000,\r\n        fuelType: [Electricity],\r\n        range: 1000,\r\n        topSpeed: 40,\r\n        acceleration: 3,\r\n        cost: 400000,\r\n        description: 'luxury boat often fitted with solar panels to allow slow recharge anywhere. Has living quarters for all passengers.',\r\n        parts: [],\r\n    },\r\n    {\r\n        name: 'small ferry',\r\n        medium: ['water'],\r\n        passengers: 100,\r\n        cargoKg: 80000,\r\n        fuelType: [Electricity],\r\n        range: 200,\r\n        topSpeed: 30,\r\n        acceleration: 3,\r\n        cost: 300000,\r\n        description: 'a simple ferry designed to carry many people or a batch of cargo a small distance. Has seats for all passengers or it can provide bunk beds for half (uses 90% of cargo mass)',\r\n        parts: []\r\n    },\r\n    {\r\n        name: 'large ferry',\r\n        medium: ['water'],\r\n        passengers: 1000,\r\n        cargoKg: 800000,\r\n        fuelType: [Electricity],\r\n        range: 500,\r\n        topSpeed: 30,\r\n        acceleration: 3,\r\n        cost: 800000,\r\n        description: 'a simple ferry designed to carry many people or a batch of cargo a medium distance. Has seats for all passengers or it can provide bunk beds for half (uses 90% of cargo mass)',\r\n        parts: []\r\n    },\r\n    {\r\n        name: 'small freighter',\r\n        medium: ['water'],\r\n        passengers: 10,\r\n        cargoKg: 2000000,\r\n        fuelType: [Electricity],\r\n        range: 1200000,\r\n        topSpeed: 40,\r\n        acceleration: 3,\r\n        cost: 1000000,\r\n        description: 'very small cargo ship outfitted with a micro fusion power',\r\n        parts: [],\r\n    },\r\n    {\r\n        name: 'freighter',\r\n        medium: ['water'],\r\n        passengers: 15,\r\n        cargoKg: 10000000,\r\n        fuelType: [Electricity],\r\n        range: 1200000,\r\n        topSpeed: 40,\r\n        acceleration: 3,\r\n        cost: 4000000,\r\n        description: 'cargo ship equipped with micro fusion reactor for near unlimited range',\r\n        parts: [],\r\n    },\r\n    {\r\n        name: 'large freighter',\r\n        medium: ['water'],\r\n        passengers: 25,\r\n        cargoKg: 50000000,\r\n        fuelType: [Electricity],\r\n        range: 1200000,\r\n        topSpeed: 40,\r\n        acceleration: 3,\r\n        cost: 10000000,\r\n        description: 'large cargo ship equipped with micro fusion reactor for near unlimited range',\r\n        parts: [],\r\n    },\r\n    {\r\n        name: 'cruiser',\r\n        medium: ['water'],\r\n        passengers: 1200,\r\n        cargoKg: 2000000,\r\n        fuelType: [Electricity],\r\n        range: 2000000,\r\n        topSpeed: 14,\r\n        acceleration: 1,\r\n        cost: 3500000,\r\n        description: 'cruiser fitted with on board small fusion generator capable of running for years without refueling, weapon capable',\r\n        parts: [],\r\n    },\r\n    {\r\n        name: 'battleship',\r\n        medium: ['water'],\r\n        passengers: 1000,\r\n        cargoKg: 20000000,\r\n        fuelType: [Electricity],\r\n        range: 2000000,\r\n        topSpeed: 22,\r\n        acceleration: 0.8,\r\n        cost: 150000000,\r\n        description: 'battleship fitted with on board small fusion generator, large railguns, laser cannons and missiles',\r\n        parts: [],\r\n    },\r\n    {\r\n        name: 'submarine',\r\n        medium: ['water', 'subwater'],\r\n        passengers: 40,\r\n        cargoKg: 10000,\r\n        fuelType: [Electricity],\r\n        range: 1000000,\r\n        topSpeed: 12,\r\n        acceleration: 1,\r\n        cost: 70000000,\r\n        description: 'fusion powered submarine',\r\n        parts: [],\r\n    },\r\n    {\r\n        name: 'civilian submarine',\r\n        medium: ['water', 'subwater'],\r\n        passengers: 10,\r\n        cargoKg: 10000,\r\n        fuelType: [Electricity],\r\n        range: 10000,\r\n        topSpeed: 4,\r\n        acceleration: 1,\r\n        cost: 700000,\r\n        description: 'battery powered submarine',\r\n        parts: [],\r\n    }\r\n];\r\n\r\nexport default WaterVehicles;","import { HyperMatter, Electricity, Synthoil, RocketFuel, Vehicle, MicroFusionCell, MicroFusionThruster, SmallHabitatSection } from \"./Vehicles\";\r\n\r\nconst SpaceVehicles: Vehicle[] = [\r\n    {\r\n        name: 'rocketship',\r\n        medium: ['air', 'space'],\r\n        passengers: 4,\r\n        cargoKg: 10000,\r\n        fuelType: [RocketFuel],\r\n        range: 0,\r\n        topSpeed: 24000,\r\n        acceleration: 45,\r\n        cost: 450000000,\r\n        description: 'rocket ship capable of taking off and landing on any planet with less than 3g atmosphere, space capable, radiation shield for interplanetary travel, single use, mostly used for getting off planets with heavy gravity and without oxygen atmosphe',\r\n        parts: []\r\n    },\r\n    {\r\n        name: 'spaceplane',\r\n        medium: ['air', 'space'],\r\n        passengers: 4,\r\n        cargoKg: 10000,\r\n        fuelType: [Synthoil, RocketFuel],\r\n        range: 0,\r\n        topSpeed: 36000,\r\n        acceleration: 40,\r\n        cost: 900000000,\r\n        description: 'hypersonic airplane with rocket switch, capable of both flying through air and space, only needs refuel and basic service after every use. Sufficient for getting into orbit from a runway and back again',\r\n        parts: []\r\n    },\r\n    {\r\n        name: 'Escape pod',\r\n        medium: ['space', 'air'],\r\n        passengers: 2,\r\n        fuelType: [],\r\n        range: 0,\r\n        topSpeed: 0,\r\n        acceleration: 0,\r\n        description: 'keeps up to two passengers in cryostasis, considered safe for up to 1 year, contains a parachute so if it hits an atmosphere it will land safely. Air for 1 day prior to cryostasis.',\r\n        cost: 10000,\r\n        cargoKg: 100,\r\n        parts: []\r\n    },\r\n    {\r\n        name: 'Ferry Class Spaceship',\r\n        medium: ['space'],\r\n        passengers: 10,\r\n        cargoKg: 100000,\r\n        fuelType: [Electricity],\r\n        range: 0,\r\n        topSpeed: 2008000,\r\n        acceleration: 3,\r\n        cost: 10000000,\r\n        description: 'small sized space ship, fitted with micro fusion power, capable of maintaining 0.3g for 8 days without refueling, ' +\r\n            'virtually unlimited range within a solar system. ' +\r\n            '380 metric ton dry mass 18m long, 7m radius, 11 metric ton fusion fuel',\r\n        parts: [MicroFusionCell, MicroFusionThruster, MicroFusionThruster, MicroFusionThruster, MicroFusionThruster, MicroFusionThruster, MicroFusionThruster, MicroFusionThruster, MicroFusionThruster, MicroFusionThruster, SmallHabitatSection, SmallHabitatSection, SmallHabitatSection]\r\n    },\r\n    {\r\n        name: 'Freighter Class Spaceship',\r\n        medium: ['space'],\r\n        passengers: 100,\r\n        cargoKg: 1000000,\r\n        fuelType: [Electricity],\r\n        range: 0,\r\n        topSpeed: 2600000,\r\n        acceleration: 3,\r\n        cost: 30000000,\r\n        description: 'medium sized space ship, fitted with micro fusion power, capable of maintaining 0.3g for 10 days without refueling, ' +\r\n            'virtually unlimited range within a solar system. ' +\r\n            '3,100 metric ton dry mass, 42m long, 19m radius 108 metric ton fusion fuel',\r\n        parts: []\r\n    },\r\n    {\r\n        name: 'Interceptor Class Spaceship',\r\n        medium: ['space'],\r\n        passengers: 80,\r\n        cargoKg: 500000,\r\n        fuelType: [Electricity],\r\n        range: 0,\r\n        topSpeed: 26000000,\r\n        acceleration: 5,\r\n        cost: 32000000,\r\n        description: 'medium sized space ship, fitted with micro fusion power, capable of maintaining 0.5g for 60 days without refueling, ' +\r\n            'virtually unlimited range within a solar system, but in particular designed for extreme range and interception. ' +\r\n            '3,100 metric ton dry mass, 42m long, 19m radius, 50000 metric ton fusion fuel',\r\n        parts: []\r\n    },\r\n    {\r\n        name: 'Cruiser Class Spaceship',\r\n        medium: ['space'],\r\n        passengers: 1000,\r\n        cargoKg: 10000000,\r\n        fuelType: [Electricity],\r\n        range: 0,\r\n        topSpeed: 2600000,\r\n        acceleration: 3,\r\n        cost: 150000000,\r\n        description: 'large space ship, fitted with small fusion power, capable of maintaining 0.3g for 10 days without refueling, ' +\r\n            'virtually unlimited range within a solar system. ' +\r\n            '24,720 metric ton dry mass, 170m long, 30m radius, 820 metric ton fusion fuel',\r\n        parts: []\r\n    },\r\n    {\r\n        name: 'Battleship Class Spaceship',\r\n        medium: ['space'],\r\n        passengers: 10000,\r\n        cargoKg: 100000000,\r\n        fuelType: [Electricity],\r\n        range: 0,\r\n        topSpeed: 2600000,\r\n        acceleration: 3,\r\n        cost: 750000000,\r\n        description: 'huge space ship, fitted with fusion power, capable of maintaining 0.3g for 10 days without refueling, ' +\r\n            'virtually unlimited range within a solar system. ' +\r\n            '180,000 metric ton dry mass, 480m long, 61m radius, 8200 metric ton fusion fuel',\r\n        parts: []\r\n    },\r\n    {\r\n        name: 'Hyperspace Class Spaceship',\r\n        medium: ['space', 'hyperspace'],\r\n        passengers: 10000,\r\n        cargoKg: 100000000,\r\n        fuelType: [Electricity, HyperMatter],\r\n        range: 0,\r\n        topSpeed: 2600000,\r\n        acceleration: 3,\r\n        cost: 1500000000,\r\n        description: 'huge space ship, fitted with fusion power, capable of maintaining 0.3g for 10 days without refueling,' +\r\n            ' virtually unlimited range within a solar system, can enter hyperspace and travel up to 50 times the speed of light. ' +\r\n            '200,000 metric ton dry mass, 480m long, 70m radius, 8300 metric ton fusion fuel',\r\n        parts: []\r\n    },\r\n];\r\n\r\nexport default SpaceVehicles;","import { Synthoil, Electricity, Vehicle, IRollAmount, IDamageAmount } from \"./Vehicles\";\r\n\r\nexport const airVehicleParts: string[] = ['cockpit nose', 'cockpit window', 'side window', 'enterance',\r\n    'front landing gear', 'hind left landing gear', 'hind right landing gear', 'pitch stabilizer', 'pitch elevator',\r\n    'yaw stabilizer', 'yaw elevator', 'front or left engine', 'front or right engine', 'front or left propeller blades/jet turbine',\r\n    'front or right propeller blades/jet turbine', 'left or front engine mount', 'right or front engine mount', 'left wing', 'left elevator',\r\n    'right wing', 'right elevator', 'left spoiler', 'right spoiler', 'front fuselage', 'mid fuselage', 'hind fuselage',\r\n    'left battery core/fuel tank', 'right battery core/fuel tank', 'computer', 'antenna', 'speaker', 'cockpit systems display', 'navigation controls',\r\n    'radar display', 'radar', 'navigation display', 'control wheel', 'throttle lever', 'altitude meter', 'gyrometer', 'compass', 'internal camera', 'external camers'];\r\n\r\nexport const rollAmounts: IRollAmount[] = [\r\n    {\r\n        text: 'Land safely with 10 points to spare',\r\n        numberOf1d100: 0,\r\n        sidesPerDice: 0,\r\n    },\r\n    {\r\n        text: 'Land safely',\r\n        numberOf1d100: 1,\r\n        sidesPerDice: 1,\r\n    },\r\n    {\r\n        text: 'Crashland safely',\r\n        numberOf1d100: 2,\r\n        sidesPerDice: 4,\r\n        passengerDamage: {\r\n            sidesPerDice: 4,\r\n            numberOfDice: 2,\r\n        }\r\n    },\r\n    {\r\n        text: 'Crashland violently',\r\n        numberOf1d100: 4,\r\n        sidesPerDice: 6,\r\n        passengerDamage: {\r\n            sidesPerDice: 12,\r\n            numberOfDice: 2,\r\n        }\r\n    },\r\n    {\r\n        text: 'Crashland catastrophically',\r\n        numberOf1d100: 10,\r\n        sidesPerDice: 6,\r\n        passengerDamage: {\r\n            sidesPerDice: 20,\r\n            numberOfDice: 4,\r\n        }\r\n    }\r\n];\r\n\r\nexport const airVehicleDamageTexts: IDamageAmount[] = [\r\n    {\r\n        damageAmountNumber: 0,\r\n        damageText: 'pristine',\r\n    },\r\n    {\r\n        damageAmountNumber: 1,\r\n        damageText: 'worn',\r\n    },\r\n    {\r\n        damageAmountNumber: 2,\r\n        damageText: 'Slightly damaged',\r\n    },\r\n    {\r\n        damageAmountNumber: 3,\r\n        damageText: 'Moderately damaged',\r\n    },\r\n    {\r\n        damageAmountNumber: 4,\r\n        damageText: 'Severely damaged',\r\n    },\r\n    {\r\n        damageAmountNumber: 5,\r\n        damageText: 'Extremely damaged',\r\n    },\r\n    {\r\n        damageAmountNumber: 6,\r\n        damageText: 'Obliterated',\r\n    }\r\n];\r\n\r\nconst AirVehicles: Vehicle[] = [\r\n    {\r\n        name: 'microplane',\r\n        medium: ['air'],\r\n        passengers: 1,\r\n        cargoKg: 150,\r\n        fuelType: [Electricity],\r\n        range: 120,\r\n        topSpeed: 140,\r\n        acceleration: 25,\r\n        cost: 28000,\r\n        description: 'Can drive on normal roads and use them as runways. More or less a flying car, wings can be folded.',\r\n        parts: []\r\n    },\r\n    {\r\n        name: 'tiny airplane',\r\n        medium: ['air'],\r\n        passengers: 2,\r\n        cargoKg: 300,\r\n        fuelType: [Electricity],\r\n        range: 800,\r\n        topSpeed: 130,\r\n        acceleration: 20,\r\n        cost: 35000,\r\n        description: 'tiny electric airplane with high speed and low range. One parachute included.',\r\n        parts: [\r\n            { name: 'parachute', description: 'max 140kg, includes altimeter and oxygenator', weightKg: 5, cost: 7000 },\r\n        ],\r\n    },\r\n    {\r\n        name: 'small cargoplane',\r\n        medium: ['air'],\r\n        passengers: 4,\r\n        cargoKg: 800,\r\n        fuelType: [Electricity],\r\n        range: 1000,\r\n        topSpeed: 120,\r\n        acceleration: 18,\r\n        cost: 80000,\r\n        description: 'small electric cargoplane with low range and decent speed. Two parachutes included.',\r\n        parts: [\r\n            { name: 'parachute', description: 'max 140kg, includes altimeter and oxygenator', weightKg: 5, cost: 7000, quantity: 2 },\r\n        ],\r\n    },\r\n    {\r\n        name: 'medium cargoplane',\r\n        medium: ['air'],\r\n        passengers: 10,\r\n        cargoKg: 1800,\r\n        fuelType: [Electricity],\r\n        range: 1200,\r\n        topSpeed: 120,\r\n        acceleration: 18,\r\n        cost: 160000,\r\n        description: 'medium electric cargoplane with low range and decent speed. Two parachutes included.',\r\n        parts: [\r\n            { name: 'parachute', description: 'max 140kg, includes altimeter and oxygenator', weightKg: 5, cost: 7000, quantity: 2 },\r\n        ],\r\n    },\r\n    {\r\n        name: 'large cargoplane',\r\n        medium: ['air'],\r\n        passengers: 25,\r\n        cargoKg: 8000,\r\n        fuelType: [Electricity],\r\n        range: 1600,\r\n        topSpeed: 110,\r\n        acceleration: 15,\r\n        cost: 640000,\r\n        description: 'medium electric cargoplane with low range and decent speed. Four parachutes included.',\r\n        parts: [\r\n            { name: 'parachute', description: 'max 140kg, includes altimeter and oxygenator', weightKg: 5, cost: 7000, quantity: 4 },\r\n        ],\r\n    },\r\n    {\r\n        name: 'huge electroplane',\r\n        medium: ['air'],\r\n        passengers: 100,\r\n        cargoKg: 200000,\r\n        fuelType: [Electricity],\r\n        range: 2500,\r\n        topSpeed: 130,\r\n        acceleration: 22,\r\n        cost: 16000000,\r\n        description: 'large airplane capable of medium range flight. Ten parachutes included.',\r\n        parts: [\r\n            { name: 'parachute', description: 'max 140kg, includes altimeter and oxygenator', weightKg: 5, cost: 7000, quantity: 10 },\r\n        ],\r\n    },\r\n    {\r\n        name: 'airship',\r\n        medium: ['air'],\r\n        passengers: 200,\r\n        cargoKg: 400000,\r\n        fuelType: [Electricity],\r\n        range: 1000000,\r\n        topSpeed: 140,\r\n        acceleration: 24,\r\n        cost: 50000000,\r\n        description: 'massive electric airplane fitted with micro fusion capable of staying airborne for months. Fifty parachutes included.',\r\n        parts: [\r\n            { name: 'parachute', description: 'max 140kg, includes altimeter and oxygenator', weightKg: 5, cost: 7000, quantity: 50 },\r\n        ],\r\n    },\r\n    {\r\n        name: 'fighterplane',\r\n        medium: ['air'],\r\n        passengers: 2,\r\n        cargoKg: 250,\r\n        fuelType: [Electricity, Synthoil],\r\n        range: 600,\r\n        topSpeed: 410,\r\n        acceleration: 40,\r\n        cost: 40000000,\r\n        description: 'super sonic electric airplane, switches to jetfuel when going super sonic, fitted with laser cannons. Two ejection chairs included.',\r\n        parts: [\r\n            { name: 'ejection seat', description: 'max 90kg, includes altimeter and oxygenator', weightKg: 50, cost: 25000, quantity: 2 }\r\n        ],\r\n    },\r\n    {\r\n        name: 'hyperplane',\r\n        medium: ['air'],\r\n        passengers: 2,\r\n        cargoKg: 250,\r\n        fuelType: [Synthoil],\r\n        range: 1200,\r\n        topSpeed: 3400,\r\n        acceleration: 45,\r\n        cost: 60000000,\r\n        description: 'hyper sonic airplane, uses synthetic jetfuel, capable of hypersonic cruise. Two parachute chairs included.',\r\n        parts: [\r\n            { name: 'ejection seat', description: 'max 90kg, includes altimeter and oxygenator', weightKg: 50, cost: 25000, quantity: 2 }\r\n        ],\r\n    },\r\n];\r\n\r\nexport default AirVehicles;","import React from \"react\";\r\nimport { useReducer } from \"react\";\r\nimport { weightConverter } from \"../../utils/utilFunctions\";\r\nimport { Vehicle } from \"./Vehicles\";\r\n\r\ninterface IVehicleEditorProps {\r\n    baseVehicle: Vehicle;\r\n}\r\n\r\n\r\n\r\ninterface IVehicleDispatcher {\r\n    whatToUpdate: 'name' | 'description';\r\n    value: string;\r\n}\r\n\r\nconst vehicleReducer = (state: Vehicle, dispatch: IVehicleDispatcher): Vehicle => {\r\n    switch (dispatch.whatToUpdate) {\r\n        case 'name': return { ...state, name: dispatch.value };\r\n        case 'description': return { ...state, description: dispatch.value };\r\n        default: return state;\r\n    }\r\n}\r\n\r\n\r\n\r\nconst VehicleEditor: React.FC<IVehicleEditorProps> = ({ baseVehicle }) => {\r\n    const [vehicle, dispatch] = useReducer(vehicleReducer, baseVehicle);\r\n\r\n    let passengersCount = 0;\r\n    let impulseSum = 0;\r\n    let weight = 0;\r\n\r\n    for (let i in vehicle.parts) {\r\n        let p: any = vehicle.parts[i];\r\n        if (p.passengerCount !== undefined) { //PassengerSection\r\n            passengersCount += p.passengerCount;\r\n        }\r\n        else if (p.fuelUse !== undefined) { //Thruster\r\n            impulseSum += p.impulseKn;\r\n        }\r\n        weight += vehicle.parts[i].weightKg;\r\n    }\r\n\r\n    let acceleration = impulseSum / weight;\r\n\r\n    return <>\r\n        <h3>Vehicle Editor</h3>\r\n        <b>Name</b>: <input type='text' value={vehicle.name} onChange={e => dispatch({ whatToUpdate: 'name', value: e.target.value })} /><br />\r\n        <b>Cost</b>: {vehicle.cost}<br />\r\n        <b>Description</b>: <input type='text' value={vehicle.description} onChange={e => dispatch({ whatToUpdate: 'description', value: e.target.value })} /><br />\r\n        <b>Medium</b>: {vehicle.medium.map(m => <span>{m} </span>)}<br />\r\n        <b>Max Cargo</b>: {vehicle.cargoKg}kg<br />\r\n        <b>Fuel</b>: {vehicle.fuelType.map(ft => <span>{ft.name}</span>)}<br />\r\n        <b>Passengers</b>: {passengersCount}<br />\r\n        <b>Weight</b>: {weightConverter(weight)} <br />\r\n        <b>Accelleration</b>: {acceleration.toFixed(3)} m/s/s <br />\r\n        <b>Part Breakdown</b> {vehicle.parts.map(part => <span>{part.name}, </span>)}\r\n    </>;\r\n}\r\n\r\n\r\nexport default VehicleEditor;","import React, { useState } from \"react\";\r\nimport Section from \"../Section\";\r\nimport Ellipsis from \"../general/Ellipsis\";\r\nimport Indexer, { Indexed } from \"../general/Indexer\";\r\nimport { IDamageAmount, IDice, IRollAmount, Vehicle } from \"../vehicles/Vehicles\";\r\nimport LandVehicles from \"../vehicles/LandVehicles\";\r\nimport WaterVehicles from \"../vehicles/WaterVehicles\";\r\nimport SpaceVehicles from \"../vehicles/SpaceVehicles\";\r\nimport AirVehicles, { airVehicleDamageTexts, airVehicleParts, rollAmounts } from \"../vehicles/AirVehicles\";\r\nimport { weightConverter } from \"../../utils/utilFunctions\";\r\nimport VehicleEditor from \"../vehicles/VehicleEditor\";\r\n\r\n\r\nconst Vehicles: React.FC = () => {\r\n    return <Section title='Vehicles'>\r\n        <Indexer title='Vehicles'>\r\n            <Indexed title='Land vehicles'>\r\n                <VehicleTable vehicles={LandVehicles} parts={landVehicleParts} />\r\n            </Indexed>\r\n            <Indexed title='water vehicles'>\r\n                <VehicleTable vehicles={WaterVehicles} parts={waterVehicleParts} />\r\n\r\n            </Indexed>\r\n            <Indexed title='air'>\r\n                <Section title='Landing & crashlanding'>\r\n                    <h5>Landing</h5>\r\n                    <p>Whenever you land there is a risk that a part of the airplane takes some damage or is worn. When you crash the risk increases considerably.</p>\r\n                    <p>Crashing into water with a water plane reduces the passenger damage by 1 dice. Crashing into a hard slope or vertical wall like side of mountain increases damage by 2 dice</p>\r\n                    <p>The first step is to find the part that is damaged, roll 1d100, the second step is to find the amount of damage, 1, 1d4 or 1d6 depending on landing success</p>\r\n                    <h6>Level of damage</h6>\r\n                    <p>There are 6 levels of damage (level 0 being undamaged, pristine). Damages reduce resell value and pilot skill addadtively. Repair is mechanics + intelligence.\r\n                        Some parts are essencial and the certain functions do not work without them.\r\n                    </p>\r\n                    <ol>\r\n                        <li>Worn: no effect on performance, repair 20. -1% value</li>\r\n                        <li>Slightly damaged: -2 on pilot, repair 20. -2% value</li>\r\n                        <li>Moderately damaged: -4 on pilot , repair 25 + 2% of plane value for spare parts. -4% value</li>\r\n                        <li>Severely damaged: part does not work, -6 on pilot, repair 25 + 4% of plane value for spare parts. -4% value</li>\r\n                        <li>Extremely damaged: part does not work, -6 on pilot, repair 30 + 5% of plane value for spare parts. -5% value</li>\r\n                        <li>Obliterated: part is frigg'n gone, -8 on pilot repair 35 + 6% of plane value for spare parts. -6% value </li>\r\n                    </ol>\r\n\r\n                    <RollOMeter partsList={airVehicleParts} amountList={rollAmounts} damageAmounts={airVehicleDamageTexts} />\r\n                </Section>\r\n                <VehicleTable vehicles={AirVehicles} parts={airVehicleParts} />\r\n            </Indexed>\r\n            <Indexed title='space'>\r\n                <VehicleTable vehicles={SpaceVehicles} parts={spaceVehicleParts} />\r\n            </Indexed>\r\n        </Indexer>\r\n    </Section>\r\n}\r\n\r\ninterface IRollOmeterProps {\r\n    partsList: string[];\r\n    amountList: IRollAmount[];\r\n    damageAmounts: IDamageAmount[];\r\n    passengerDamage?: IDice | undefined;\r\n}\r\n\r\nconst RollOMeter: React.FC<IRollOmeterProps> = ({ partsList, amountList, damageAmounts }) => {\r\n    const [currentRolls, setCurrentRolls] = useState<{ d100: number, index: number }[]>([]);\r\n    const [currentParts, setCurrentParts] = useState<{ partN: number, dmg: number }[]>(partsList.map((p, i) => {\r\n        return { partN: i, dmg: 0 };\r\n    }));\r\n    const spacing = Math.floor(100 / partsList.length);\r\n    const rollAmount = (amount: IRollAmount) => {\r\n        const rolls = [...Array(amount.numberOf1d100)].map((v, i) => {\r\n            let r = Math.floor(Math.random() * (partsList.length + 1));\r\n            return { d100: r * spacing + 1, index: r };\r\n        });\r\n        setCurrentRolls(rolls);\r\n        const temp = currentParts;\r\n        rolls.forEach(i => {\r\n            if (temp[i.index] !== undefined)\r\n                temp[i.index].dmg += Math.floor(Math.random() * amount.sidesPerDice) + 1;\r\n        });\r\n        setCurrentParts(temp);\r\n    }\r\n\r\n    const convertNumberToText = (n: number): string => {\r\n        const das = damageAmounts.filter(da => da.damageAmountNumber === n);\r\n        if (das.length === 1) return das[0].damageText;\r\n        else return 'obliderated';\r\n    }\r\n\r\n    return <>\r\n        <ol>\r\n            {amountList.map(a => <li>\r\n                {a.text}: roll {a.numberOf1d100}d100, apply 1d{a.sidesPerDice} damage <button onClick={() => rollAmount(a)}>appy</button>\r\n                {a.passengerDamage && <>{a.passengerDamage.numberOfDice}d{a.passengerDamage.sidesPerDice} damage to passengers</>}\r\n            </li>)}\r\n        </ol>\r\n        <hr />\r\n        {currentRolls.map(r => {\r\n            if (currentParts[r.index] === undefined || partsList[currentParts[r.index].partN] === undefined) return null;\r\n            return <>{` ${partsList[currentParts[r.index].partN]} ${convertNumberToText(currentParts[r.index].dmg)} ${currentParts[r.index].dmg}`}<br /></>;\r\n        })}\r\n        <hr />\r\n        <ul>\r\n            {currentParts.map((p, i) => <li>({i * spacing + 1} - {i * spacing + spacing}) -{'>'}{partsList[p.partN]}: {convertNumberToText(p.dmg)} ({p.dmg})</li>)}\r\n        </ul>\r\n    </>;\r\n}\r\n\r\nconst landVehicleParts: string[] = [];\r\n\r\nconst waterVehicleParts: string[] = [];\r\n\r\nconst spaceVehicleParts: string[] = [];\r\n\r\ninterface IVehicleTableProps {\r\n    vehicles: Vehicle[];\r\n    parts: string[];\r\n}\r\n\r\nconst VehicleTable: React.FC<IVehicleTableProps> = ({ vehicles }) => {\r\n    const [vehicleToEdit, setVehicleToEdit] = useState<Vehicle | undefined>(undefined);\r\n\r\n    const viewVehicleToEdit = (v: Vehicle | undefined) => {\r\n        if (v === undefined) return null;\r\n        else return <VehicleEditor baseVehicle={v} />;\r\n    }\r\n\r\n    return (<>\r\n        {viewVehicleToEdit(vehicleToEdit)}\r\n        <table className='datatable'>\r\n            <thead>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>Type</th>\r\n                    <th>Passengers</th>\r\n                    <th>Capacity</th>\r\n                    <th>Cost</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {vehicles.map(v => <VehicleRow onSelect={(v) => { setVehicleToEdit(v); }} vehicle={v} />)}\r\n            </tbody>\r\n        </table>\r\n    </>);\r\n}\r\n\r\ninterface IVehicleRowProps {\r\n    vehicle: Vehicle;\r\n    onSelect: (v: Vehicle) => void;\r\n}\r\n\r\nconst costConverter = (credits: number) => {\r\n    if (credits < 10000) return `${credits} c`;\r\n    if (credits < 10000000) return `${(credits / 1000).toFixed(0)}k c`;\r\n    return `${(credits / 1000000).toFixed(0)}m c`;\r\n}\r\n\r\nconst VehicleRow: React.FC<IVehicleRowProps> = ({ vehicle, onSelect }) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    if (isOpen)\r\n        return <>\r\n            <tr className='datatableclicker' onClick={() => setIsOpen(false)}>\r\n                <td>{vehicle.name}</td>\r\n                <td>{vehicle.medium.map(m => <span>{m} </span>)}</td>\r\n                <td>{vehicle.passengers}</td>\r\n                <td>{weightConverter(vehicle.cargoKg * 1000)}</td>\r\n                <td>{costConverter(vehicle.cost)}</td>\r\n            </tr>\r\n            <tr>\r\n                <td>&nbsp;acc/v/r/fuel</td>\r\n                <td>{vehicle.acceleration}m/s/s</td>\r\n                <td>{vehicle.topSpeed * 3.6}km/h</td>\r\n                <td>{vehicle.range}km</td>\r\n                <td>{vehicle.fuelType.map(m => <span>{m.name} </span>)}</td>\r\n            </tr>\r\n            <tr>\r\n                <td colSpan={4}><Ellipsis text={vehicle.description} cutOff={120} ></Ellipsis></td>\r\n                <td> <button onClick={() => onSelect(vehicle)}>Edit</button>  </td>\r\n            </tr>\r\n        </>;\r\n    else return <tr className='datatableclicker' onClick={() => setIsOpen(true)}>\r\n        <td>{vehicle.name}</td>\r\n        <td>{vehicle.medium.map(m => <span>{m} </span>)}</td>\r\n        <td>{vehicle.passengers}</td>\r\n        <td>{weightConverter(vehicle.cargoKg * 1000)}</td>\r\n        <td>{costConverter(vehicle.cost)}</td>\r\n    </tr>\r\n}\r\n\r\n\r\n\r\n\r\nexport default Vehicles;","import React from 'react';\r\nimport Section from '../Section';\r\n\r\nconst CharacterSheetOverview = () => <Section title='Character sheet overview'>\r\n    <h1>Character sheet overview</h1>\r\n    <p>This is a quick look at each part of the character sheet, going section by section, top to bottom, left to right</p>\r\n\r\n    <h4>Name</h4>\r\n    <p>The name of the character, this should be what you want other players and the game master to refer to you in when they address you in character</p>\r\n\r\n    <h4>Gender</h4>\r\n    <p>Your characters sex and gender, note that Merlions have different sexes and genders than humans and shambras</p>\r\n\r\n    <h4>Species</h4>\r\n    <p>Which species is your character? Human, Shambra, Merlion, Nekovian and Synthoid are the valid options. See more under World & Lore -{\">\"} Humans/Merlions/Shambras/Nekovians/Synthoids</p>\r\n\r\n    <h4>Age</h4>\r\n    <p>The age of your character in Earth Years</p>\r\n\r\n    <h4>Experience Points</h4>\r\n    <p>Experience points are universally applicable experience points which can be used for anything. See more under Experience Points and Experience. Your age and species determine your starting experience.</p>\r\n\r\n    <h4>Experience multiplier</h4>\r\n    <p>How quickly you gain experience, depends on age and species. See more under Experience Points and Experience.</p>\r\n\r\n    <h4>Player</h4>\r\n    <p>The player's name</p>\r\n\r\n    <h4>Background</h4>\r\n    <p>This should be a short synopsis of where you were born, lived and any noteworthy experiences you've had. Having one helps you rolplay and the GM integrate your character into the world.</p>\r\n\r\n    <h4>Life</h4>\r\n    <p>Life refers to how much punishment your character can take before dying. Life is caluclated as strength + 2x endurance. At 9 and 18 athletics add +1 life. See health section for more information</p>\r\n\r\n    <h4>Mental health</h4>\r\n    <p>Mental health refers to the state of your mind, it is caulcated as willpower + willpower. See more under Health</p>\r\n\r\n    <h4>Sequence</h4>\r\n    <p>Sequence is your turn order bonus during combat. Agility + Perception. When combat starts roll 1d20 + sequence, turn goes from highest to lowest. (special rules apply for very high values)</p>\r\n\r\n    <h4>Damage Absorbtion</h4>\r\n    <p>This number is subtracted from incoming damage. You get it primarily from armor, but also from perks and traits.</p>\r\n\r\n    <h4>Defense</h4>\r\n    <p>Defense is the number enemies must overcome to hit you with attacks.<br />\r\n    First number is your <b>base defense</b>: (depends on size).<br />\r\n    Second is <b>active defense</b>: base + agility + skill (combat or acrobatics, whichever is higher).<br />\r\n    Benefits to defense apply at a level, cover applies to base and up. Since passives is based on base it inherits the same benefit, active likewise.\r\n    </p>\r\n\r\n    <h4>Carrying capacity</h4>\r\n    <p>How much your character can carry without becoming encumbered. See carrying capacity for more details</p>\r\n\r\n    <h4>Speed</h4>\r\n    <p>Your character's base speed. This is walking speed outside of combat. A move action in combat uses 3 action points and you can move up to your speed in meters.</p>\r\n\r\n    <h4>Action points</h4>\r\n    <p>This is how many action points your character starts with at the start of your turn. It is 4 + agility / 2, each 6 ranks of acrobatics and combat give +1 too. Certain perks and traits can add action points, as do certain stimulants.</p>\r\n\r\n    <h4>Apperance Traits</h4>\r\n    <p>Describe how your character looks like, how tall, how heavy.</p>\r\n\r\n    <h4>Strength</h4>\r\n    <p>Raw muscle strength, this affects health, carrying capacity, punching power.</p>\r\n\r\n    <h4>Endurance</h4>\r\n    <p>Endurance is your life force, modifies how far you can run, how much beer you can drink, how long you can survive a boxing match</p>\r\n\r\n    <h4>Agility</h4>\r\n    <p>Agility refers to hand eye coordination, reflexes, flexibility, balance and speed</p>\r\n\r\n    <h4>Perception</h4>\r\n    <p>Perception refers to your senses, awareness and alertness</p>\r\n\r\n    <h4>Intelligence</h4>\r\n    <p>Knowledge, memory, wisdom, the ability to think quickly and to contemplate deeply.</p>\r\n\r\n    <h4>Willpower</h4>\r\n    <p>Willpower refers to your sense of personality, force of will and self determination as well as natural leadership</p>\r\n\r\n    <h4>Size</h4>\r\n    <p>Tiny, small, medium, large and huge are the typical character size range. Size determines speed and how you fit into a hex.</p>\r\n    <p>Different sizes need different amount of hexes</p>\r\n    <ul>\r\n        <li>Minute: 1</li>\r\n        <li>Tiny: 1</li>\r\n        <li>Small: 1</li>\r\n        <li>Medium: 1</li>\r\n        <li>Large: 1</li>\r\n        <li>Huge: 2</li>\r\n        <li>Gigantic: 4</li>\r\n        <li>Colossal: 7</li>\r\n        <li>Titanic: 19</li>\r\n    </ul>\r\n    <p>Who can move through a hex if someone else is in it? Yes means that you may move through a hex if the other character in it is friendly.\r\n        Yes * means you can but it uses double movement.<br />\r\n        Yes + means that you can both occupy the same hex.<br />\r\n    No means that you must shove the other one aside.</p>\r\n    <table>\r\n        <thead>\r\n            <tr>\r\n                <th> </th>\r\n                <th>Minute</th>\r\n                <th>Tiny</th>\r\n                <th>Small</th>\r\n                <th>Medium</th>\r\n                <th>Large</th>\r\n                <th>Huge</th>\r\n                <th>Gigantic</th>\r\n                <th>Colossal</th>\r\n                <th>Titanic</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            <tr>\r\n                <td>Minute</td> <td className=\"yesP\">yes+</td> <td className=\"yesP\">yes+</td> <td className=\"yesP\">yes+</td> <td className=\"yes\">yes</td> <td className=\"yes\">yes</td> <td className=\"yesX\">yes*</td> <td className=\"yesX\">yes*</td> <td>no</td> <td>no</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Tiny</td> <td className=\"yesP\">yes+</td> <td className=\"yesP\">yes+</td> <td className=\"yes\">yes</td> <td className=\"yes\">yes</td> <td className=\"yesX\">yes*</td> <td className=\"yesX\">yes*</td> <td>no</td> <td>no</td> <td>no</td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td>Small</td> <td className=\"yesP\">yes+</td> <td className=\"yes\">yes</td> <td className=\"yes\">yes</td> <td className=\"yesX\">yes*</td> <td className=\"yesX\">yes*</td><td>no</td> <td>no</td> <td>no</td> <td>no</td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td>Medium</td> <td className=\"yes\">yes</td> <td className=\"yes\">yes</td> <td className=\"yesX\">yes*</td> <td className=\"yesX\">yes*</td><td>no</td> <td>no</td> <td>no</td> <td>no</td> <td>no</td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td>Large</td> <td className=\"yes\">yes</td> <td className=\"yesX\">yes*</td> <td className=\"yesX\">yes*</td><td>no</td> <td>no</td> <td>no</td> <td>no</td> <td>no</td> <td>no</td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td>Huge</td> <td className=\"yesX\">yes*</td> <td className=\"yesX\">yes*</td><td>no</td> <td>no</td> <td>no</td> <td>no</td> <td>no</td> <td>no</td> <td>no</td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td>Gigantic</td> <td className=\"yesX\">yes*</td><td>no</td> <td>no</td> <td>no</td> <td>no</td> <td>no</td> <td>no</td> <td>no</td> <td>no</td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td>Colossal</td> <td>no</td> <td>no</td> <td>no</td> <td>no</td> <td>no</td> <td>no</td> <td>no</td> <td>no</td> <td>no</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Titanic</td> <td>no</td> <td>no</td> <td>no</td> <td>no</td> <td>no</td> <td>no</td> <td>no</td> <td>no</td> <td>no</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n\r\n    <h4>Personality traits</h4>\r\n    <p>What is your personality like? See more under Skills & Perks -{\">\"} Traits -{\">\"} Personality Traits. Used to determine if you are roleplaying according to your character.</p>\r\n\r\n    <h4>Skills</h4>\r\n    <p>This is a non-exhaustive list of skills, Exp refers to how much experience points you have for the skill, rank is the number of points you have for it, most skills gain bonuses also from your base attributes (str/dex/end/int/will/per), see Perks & Traits -{\">\"} Skills for more information about each skill.</p>\r\n\r\n    <h4>Perks</h4>\r\n    <p>Perks are skill specializations, special abilities and modifiers you've acquired. See more under Skills & Perks -{\">\"} Perks</p>\r\n\r\n    <h4>Traits</h4>\r\n    <p>Traits are special mental and physical traits that modify how your character behaves and works, for the most part can only be aqcuired at character creation.</p>\r\n\r\n    <h4>Reputation</h4>\r\n    <p>Reputation refers to how well known you are and what groups of people think of you in various parts of the world</p>\r\n\r\n    <h4>Inventory</h4>\r\n    <p>Items in your pockets, backpack or otherwise stashed somewhere on your body.</p>\r\n\r\n    <h4>Equipment</h4>\r\n    <p>Items that are worn and able to be used immediately.</p>\r\n\r\n    <h4>Stash</h4>\r\n    <p>Items you own and have stashed away somewhere.</p>\r\n\r\n</Section>;\r\n\r\n\r\nexport default CharacterSheetOverview;","import React, { useState } from 'react';\r\nimport Section from '../Section';\r\nimport { CSSProperties } from '@material-ui/core/styles/withStyles';\r\nimport { Character, CharacterSize } from '../Character';\r\n\r\nconst shortWidth: CSSProperties = {\r\n    width: '25%'\r\n};\r\n\r\nconst sizes: CharacterSize[] = ['minute', 'tiny', 'small', 'medium', 'large', 'huge', 'gigantic', 'colossal', 'titanic'];\r\n\r\nconst CarryingCapacity: React.FC = () => {\r\n    const [currentWeight, setCurrentWeight] = useState(80);\r\n    const [cargoWeight, setCargoWeight] = useState(0);\r\n    const [strength, setStrength] = useState(5);\r\n    const [previousGravity, setPreviousGravity] = useState(100);\r\n    const [currentGravity, setCurrentGravity] = useState(100);\r\n    const [currentSize, setCurrentSize] = useState<CharacterSize>('medium');\r\n\r\n    const gravityFactor = currentGravity / previousGravity;\r\n\r\n    const weightFactor = (currentWeight + cargoWeight) * gravityFactor - currentWeight;\r\n\r\n    const strengthFactor = weightFactor / strength;\r\n    let penalty = '';\r\n    if (strengthFactor <= 4) { penalty = '0'; }\r\n    else if (strengthFactor <= 8) penalty = '-1';\r\n    else if (strengthFactor <= 12) penalty = '-2';\r\n    else if (strengthFactor <= 16) penalty = '-4';\r\n    else if (strengthFactor <= 20) penalty = '-8';\r\n    else if (strengthFactor <= 24) penalty = '-16';\r\n    else if (strengthFactor <= 28) penalty = 'max';\r\n    else if (strengthFactor <= 32) penalty = 'drag';\r\n    else penalty = 'too heavy';\r\n\r\n    return (<Section title='Carrying Capacity and Exhaustion Levels' key='pm_ccael_section'>\r\n        <h3>Carrying Capacity</h3>\r\n        <p>There is only so much weight you can put on a Shambra before they lay down and give up</p>\r\n        <p>Being over capacity goes in phases, at or below the first you suffer no penalty. Then as you increase in weight you begin to suffer various penalties</p>\r\n        <p>Penalty applies to action points and move speed. Each point reduces each by 1</p>\r\n        <ul>\r\n            <li key='pm_ccael_li_1'>Without effect your maximum speed is Sprint (5x)</li>\r\n            <li key='pm_ccael_li_2'>-1 to action points and move speed</li>\r\n            <li key='pm_ccael_li_3'>-2 to action points and move speed</li>\r\n            <li key='pm_ccael_li_4'>-3 to action points and move speed</li>\r\n            <li key='pm_ccael_li_5'>-4 to action points and move speed</li>\r\n            <li key='pm_ccael_li_6'>-5 to action points and move speed</li>\r\n            <li key='pm_ccael_li_7'>Max is how much you can deadlift, if you have action points remaining you can only use them to move</li>\r\n            <li key='pm_ccael_li_8'>Drag is how much you can drag off the ground, if you have action points remaining you can only use move action and max 1 meter / round</li>\r\n        </ul>\r\n        <b>Size</b>: \r\n        {sizes.map(s => <span key={`pm_ccael_s_span_${s}`} style={currentSize === s ? { textDecoration: 'underline' } : undefined} onClick={() => setCurrentSize(s)}>{s}</span>)}\r\n\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Strength</th>\r\n                    <th>No effect</th>\r\n                    <th>-1</th>\r\n                    <th>-2</th>\r\n                    <th>-3</th>\r\n                    <th>-4</th>\r\n                    <th>-5</th>\r\n                    <th>Max</th>\r\n                    <th>Drag</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {[...new Array(18)].map((v, str, ar) => <tr key={`pm_ce_tr_${str}`}>\r\n                    <td>{str + 1}</td>\r\n                    <td>{(Character.getCarryCapacity(str + 1, 1, currentSize))}</td>\r\n                    <td>{(Character.getCarryCapacity(str + 1, 2, currentSize))}</td>\r\n                    <td>{(Character.getCarryCapacity(str + 1, 3, currentSize))}</td>\r\n                    <td>{(Character.getCarryCapacity(str + 1, 4, currentSize))}</td>\r\n                    <td>{(Character.getCarryCapacity(str + 1, 5, currentSize))}</td>\r\n                    <td>{(Character.getCarryCapacity(str + 1, 6, currentSize))}</td>\r\n                    <td>{(Character.getCarryCapacity(str + 1, 7, currentSize))}</td>\r\n                    <td>{(Character.getCarryCapacity(str + 1, 8, currentSize))}</td>\r\n                    <td>{(Character.getCarryCapacity(str + 1, 9, currentSize))}</td>\r\n                </tr>)}\r\n            </tbody>\r\n        </table>\r\n        <h4>Exhaustion Levels</h4>\r\n        <p>Exhaustion is caused by over exterting yourself each level of exhaustion counts as one step of carrying capacity. At max you can not move, at drag you fall unconcious. See Health and Recovery for info about recovery.</p>\r\n        <h4>Gravity and weight</h4>\r\n        <p>Characters that live on a planet or system grow accustomed to the local gravity.\r\n            So for as long as characters don't leave their local gravity well all carrying capacity should be assumed to be normalized.</p>\r\n        <p>However, if a character leaves their planet or station to another planet or station with a different gravity then they are not accustomed to it.\r\n            To find out the difference take the first gravity and divide by the second, then multiply this with the character's body weight plus cargo, then minus the character's body weight.\r\n        </p>\r\n        <label style={shortWidth}>Stength</label> <input style={shortWidth} type='input' value={strength} onChange={e => setStrength(parseInt(e.target.value))} /><br />\r\n        <label style={shortWidth}>Character weight</label> <input style={shortWidth} type='input' value={currentWeight} onChange={e => setCurrentWeight(parseInt(e.target.value))} /><br />\r\n        <label style={shortWidth}>cargo weight</label> <input style={shortWidth} type='input' value={cargoWeight} onChange={e => setCargoWeight(parseInt(e.target.value))} /><br />\r\n        <label style={shortWidth}>Previous gravity %</label> <input style={shortWidth} type='input' value={previousGravity} onChange={e => setPreviousGravity(parseFloat(e.target.value))} /><br />\r\n        <label style={shortWidth}>Current gravity %</label> <input style={shortWidth} type='input' value={currentGravity} onChange={e => setCurrentGravity(parseFloat(e.target.value))} /><br />\r\n        <label style={shortWidth}>Current Weight</label> {weightFactor}<br />\r\n        <label style={shortWidth}>Current Penalty</label> {penalty}\r\n    </Section>);\r\n}\r\n\r\nexport default CarryingCapacity;","import React from 'react';\r\nimport Section from '../Section';\r\n\r\n\r\nconst Radiation = () => <Section title='Radiation'>\r\n    <h3>Radiation</h3>\r\n    <p>Ionizing radiation can be found everywhere. The effects of radiation does are cumulative, meaning each dose adds on the previous levels. Radiation levels can increase beyond 10, each level adds +1 dose per round</p>\r\n    <p>Radiation naturally drops at the rate of 1 per year, this effect can be accelerated to 1 per month with a medicine check.</p>\r\n    <p>Additionally, radiation doses can go above </p>\r\n    <table style={{ width: '100%' }}>\r\n        <thead>\r\n            <tr>\r\n                <th>Level</th>\r\n                <th>Time per dose</th>\r\n                <th>Number of doses</th><th>Effect</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            <tr> <td>0</td><td>Safe (drop 1 dose per year)</td> <td>0</td><td>No effect</td> </tr>\r\n            <tr> <td>1</td><td>1 Year</td> <td>1</td><td>Life regen halved</td> </tr>\r\n            <tr> <td>2</td><td>1 Month</td> <td>2</td><td>-1 to all rolls, slight dizziness</td> </tr>\r\n            <tr> <td>3</td><td>4 Days</td> <td>3</td><td>-2 to all rolls, light nausea</td> </tr>\r\n            <tr> <td>4</td><td>12 hours</td> <td>4</td><td>-1 to all stats, </td> </tr>\r\n            <tr> <td>5</td><td>1 hour</td> <td>5</td><td>-2 to all stats, moderate nausea</td> </tr>\r\n            <tr> <td>6</td><td>10 minutes</td> <td>6</td><td>Life regen quartered, vomiting</td></tr>\r\n            <tr> <td>7</td><td>10 rounds</td> <td>7</td><td>Hair falls out, severe nausea, -3 to all rolls</td> </tr>\r\n            <tr> <td>8</td><td>2 rounds</td> <td>8</td><td>10% chance to die every day, tissue decay</td>  </tr>\r\n            <tr> <td>9</td><td>1 rounds </td><td>9</td><td>5% chance to die every hour, lose 1 life every hour</td>  </tr>\r\n            <tr> <td>10</td><td>1 rounds = 2 doses</td><td>10</td><td>5% chance to die every minute</td> </tr>\r\n        </tbody>\r\n    </table>\r\n    <h5>Situations and protection</h5>\r\n    <p>Various situations have various levels of radiation, and it can come from multiple sources.</p>\r\n    <p>Protection is subtractive, simply subtract the protection from the level. Multiple sources stack. Distance to local sources matter a lot</p>\r\n    <table style={{ width: '100%' }}>\r\n        <thead>\r\n            <tr><th>Situation (examples)</th><th>Level</th> <th>Protection Source</th> <th>Protection amount</th></tr>\r\n        </thead>\r\n        <tbody>\r\n            <tr>\r\n                <td>Habitable planet surface</td>\r\n                <td>0</td>\r\n                <td>Normal clothes</td>\r\n                <td>0</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Habitable planet near space</td>\r\n                <td>1</td>\r\n                <td>Space Suit, anti-radiation drugs</td>\r\n                <td>1</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Low orbit (magnetically active planet)</td>\r\n                <td>2</td>\r\n                <td>Space ship, 1m concrete</td>\r\n                <td>2</td>\r\n            </tr>\r\n            <tr>\r\n                <td>High orbit (magnetically active planet)</td>\r\n                <td>3</td>\r\n                <td>Space ship (advanced), 2m concrete</td>\r\n                <td>3</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Stellar space</td>\r\n                <td>4</td>\r\n                <td>4m concrete</td>\r\n                <td>4</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Interstellar space</td>\r\n                <td>5</td>\r\n                <td>6m concrete</td>\r\n                <td>5</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Van allen belts</td>\r\n                <td>6</td>\r\n                <td>8m concrete</td>\r\n                <td>6</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Inside nuclear reactor (1 meter)</td>\r\n                <td>7</td>\r\n                <td>10m concrete</td>\r\n                <td>7</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Near meltdown site (50 meters)</td>\r\n                <td>8</td>\r\n                <td>15m concrete</td>\r\n                <td>8</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Near meltdown site (20 meters), </td>\r\n                <td>9</td>\r\n                <td>25m concrete</td>\r\n                <td>9</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Near meltdown site (5 meters), FTL core beam</td>\r\n                <td>10</td>\r\n                <td>40m concrete</td>\r\n                <td>10</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</Section>;\r\n\r\n\r\nexport default Radiation;","import React from 'react';\r\nimport Section from '../Section';\r\nimport Indexer, { Indexed } from '../general/Indexer';\r\nimport Cooking from '../skills/cooking';\r\nimport { ConsumableMedicine, ConsumableTools, ConsumableWeapons } from '../equipment/Consumables';\r\nimport { CharacterSizeMods } from '../Character';\r\n\r\n\r\nconst Consumables = () => <Section title='Consumables'>\r\n    <Indexer title='Consumable Items'>\r\n        <Indexed title='Food'><Food /></Indexed>\r\n        <Indexed title='Medicine'><Medicine /></Indexed>\r\n        <Indexed title='Tools'><Tools /></Indexed>\r\n        <Indexed title='Weapons'><Weapons /></Indexed>\r\n    </Indexer>\r\n</Section>;\r\n\r\n\r\nexport default Consumables;\r\n\r\nconst Food = () => <>\r\n    <p>Food glorious food, keeps us alive. It also matters what you eat and how much you eat</p>\r\n    <h4>How much you eat</h4>\r\n    <p>Characters need to eat a certain amount to live, characters that don't eat enough will start to starve. Also characters that don't eat OR drink water dies after 72 hours of dehydration. Characters need</p>\r\n    <ul>\r\n        {CharacterSizeMods.map(m => <li><b>{m.size}</b>: {m.consumption}</li>)}\r\n    </ul>\r\n    <p>After 2 days of not eating characters will see their life regeneration halved and -2 to all rolls</p>\r\n    <p>After 7 days of not eating characters life regeneration will stop, they take -8 to all rolls</p>\r\n    <p>After 14 days of not eating will start to lose their life, for each day beyond this point they lose 1 maximum life. When maximum life reaches 0 they become unconcious and die the next day.</p>\r\n    <h4>Quality food</h4>\r\n    <p>Good food quality gives improved mood and can even make you physically better</p>\r\n    <ul>\r\n        <li>Horrible food: 25% risk of food poisoning, -2 all rolls rest of the day</li>\r\n        <li>Bad food: -1 to all rolls rest of the day</li>\r\n        <li>Average food: no effect</li>\r\n        <li>Good food: +1 to all rolls for the rest of the day</li>\r\n        <li>Great food: +2 to all rolls for the rest of the day</li>\r\n        <li>Outstanding food: +2 to all rlls for the rest of the day, heal 1 life and mental health at the end of the day</li>\r\n    </ul>\r\n    <h5>Resturant food</h5>\r\n    <p>Resturant food works the same as home cooked food, except someone else bought the raw materials, cooked it and served it to you.</p>\r\n    <ul>\r\n        <li>Horrible food: 40 credits</li>\r\n        <li>Bad food: 60 credits</li>\r\n        <li>Average food: 80 credits</li>\r\n        <li>Good food: 150 credits (reservations 24h required, Savoir-Faire 15. Skip reservation 25)</li>\r\n        <li>Great food: 300 credits (reservations 48h required, Savoir-Faire 20. Skip reservation 30)</li>\r\n        <li>Outstanding food: 500 credits  (reservations 72h required, Savoir-Faire 25. Skip reservation 35)</li>\r\n    </ul>\r\n    <h5>Street food</h5>\r\n    <p>Street food works similar to resturant food with two modifications. Average quality is the highest quality easily available. The price is reduced by 25%.\r\n        You can find good street food with streetwise 20. Great streetfood with streetwise 30. Outstanding streetfood with streetwise 40.\r\n    </p>\r\n    <p>Note that you can only find resturant food and streetwise food in locations where they exist, a successful role may include travel.</p>\r\n    <h5>Home cooked food</h5>\r\n    <p>To cook food you need ingredients, you also need a kitchen, ingredients can be bought for 20 credits per meal or a survival check</p>\r\n    <ul>\r\n        <li>Low quality ingredients cost 10 credits, cause -5 to cooking roll</li>\r\n        <li>High quality ingredients costs 30 credits, cause +3 to cooking roll</li>\r\n        <li>Low quality kitchen causes -5 to cooking roll</li>\r\n        <li>High quality kitchen causes +3 to cooking roll</li>\r\n    </ul>\r\n    <p>You can create a kitchen with a survival check (2h), 20 low quality, 25 mid, 30 high quality. Survival kitchens are always grills</p>\r\n    <p>Hunting or gathering food requires a survival check and 8 hours (the 8 hours are committed whether you succeed or not). If a party of huntergatherers work together they must all roll survival together, the total meals are added up.</p>\r\n    <ul>\r\n        <li>Survival 20: ingredients for 1 meal</li>\r\n        <li>Survival 25: ingredients for 2 meals</li>\r\n        <li>Survival 30: ingredients for 3 meals</li>\r\n        <li>Survival 35: ingredients for 4 meals</li>\r\n        <li>Rush (4h): take -10 penalty to speed up the process. Still uses the effort of 8h</li>\r\n    </ul>\r\n    {Cooking.useCases.map(uc => {\r\n        return <><h6>{uc.name} ({uc.attribute})</h6><p>{uc.description}</p>\r\n            <ul>\r\n                {uc.results && uc.results.map(u => <li>{u}</li>)}\r\n            </ul>\r\n        </>\r\n    })}\r\n\r\n</>;\r\n\r\nconst Medicine = () => <>\r\n    <h4>Healing Medicine</h4>\r\n    <p>Healing medicine concerns all kinds of drugs that restore life, limb and damage, all these require medicine check.</p>\r\n    <p>Dosage matters for size, tiny uses 1/2 charges, small, medium and large use 1, huge uses 3/2</p>\r\n    <p>Some medicines require a skill check, which are listed below</p>\r\n    <table>\r\n        <thead>\r\n            <tr>\r\n                <th>Name</th>\r\n                <th>uses</th>\r\n                <th>Weight (kg)</th>\r\n                <th>Cost</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {ConsumableMedicine.map(tool => <>\r\n                <tr>\r\n                    <td><b>{tool.name}</b></td><td>{tool.charges}</td><td>{tool.weight / 1000}</td><td>{tool.value}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className='univeralBorderBottom' colSpan={4}>\r\n                        {tool.description}\r\n                        {tool.medicineSkillRolls.length > 0 ? <ul>{tool.medicineSkillRolls.map(m => <li>{m}</li>)}</ul> : null}\r\n                    </td>\r\n                </tr>\r\n            </>)}\r\n        </tbody>\r\n    </table>\r\n</>;\r\n\r\ninterface ITool {\r\n    name: string;\r\n    description: string;\r\n    uses: number;\r\n    weightKg: number;\r\n    cost: number;\r\n}\r\n\r\n\r\n\r\nconst Tools = () => <>\r\n    <h3>Tools</h3>\r\n    <p>Many advanced skills require a tool. Uses is equal to uses + skill rank (if object is transfered then always use lowest rank in history of users). Tools without an obvious related skill simply has a set number of uses. Once the uses has been depleted the quality degrades by one level.</p>\r\n    <table>\r\n        <thead>\r\n            <tr>\r\n                <th>Name</th>\r\n                <th>uses</th>\r\n                <th>Weight (kg)</th>\r\n                <th>Cost</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {ConsumableTools.map(tool => <>\r\n                <tr>\r\n                    <td><b>{tool.name}</b></td><td>{tool.charges}</td><td>{tool.weight / 1000}</td><td>{tool.value}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className='univeralBorderBottom' colSpan={4}>{tool.description}</td>\r\n                </tr>\r\n            </>)}\r\n        </tbody>\r\n    </table>\r\n</>\r\n\r\n\r\n\r\nconst Weapons = () => <>\r\n    <table>\r\n        <thead>\r\n            <tr>\r\n                <th>Name</th>\r\n                <th>Weight</th>\r\n                <th>Cost</th>\r\n                <th>Charges</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n\r\n            {ConsumableWeapons.map(c => <>\r\n                <tr>\r\n                    <td>{c.name}</td>\r\n                    <td>{c.weight}</td>\r\n                    <td>{c.value}</td>\r\n                    <td>{c.charges}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className='univeralBorderBottom' colSpan={4}>{c.description}</td>\r\n                </tr>\r\n            </>)}\r\n        </tbody>\r\n    </table>\r\n</>;\r\n//Traps","import React from 'react';\r\nimport Section from '../Section';\r\n\r\nconst Cybernetics: React.FC = () => <Section title='Cybernetics'>\r\n    <h1>Cybernetics</h1>\r\n    <p>Cybernetics is often used to replace broken organs and missing limbs, they can also be used to augument or enhance functionality.\r\n    However cybernetics may be superior to living flesh it always comes with several large drawbacks. For that reason many choose cybernetics as a last resort.\r\n        <br /> When a device interfaces with tissue directly it's referred to as a cybernetic implant, when it interfaces with an interface it's referred to as a robotic implant.</p>\r\n    <h2>Cybernetic interface</h2>\r\n    <p>A cybernetic interface is a small device surgically added to the body which allows nerve signals to be transmitted from and to the robotic implant.\r\n        Cybernetic interfaces are required to control robotic body parts.\r\n    </p>\r\n    <ul>\r\n        <li>Neural interface, connects directly to the brain</li>\r\n        <li>Limb interface, connects directly to a severed limb</li>\r\n        <li>Organ interface, connects to organs or replaces an organ</li>\r\n        <li>Retinal interface, connects to your retina (eye is replaced by visual sensor)</li>\r\n    </ul>\r\n    <h2>Robotic implant</h2>\r\n    <p>A robotic implant is the main part and is often replaceable, this is your robot hand, your optronic eye, etc.</p>\r\n    <ul>\r\n        <li>Artificial arm</li>\r\n        <li>Artificial leg</li>\r\n        <li>Brain manipulator</li>\r\n        <li>Visual sensor</li>\r\n        <li>Audio sensor</li>\r\n        <li>Chemical sensor</li>\r\n        <li>Artificial heart</li>\r\n        <li>Weapon integration</li>\r\n        <li>Device integration</li>\r\n        <li>Input jacks</li>\r\n        <li>Injector implant</li>\r\n    </ul>\r\n    <h2>Pure augumentation</h2>\r\n    <p>Some augumentations are not cybernetic or robotic, these can be things like reinforced bones or skin. While they protect they also need to be maintained.</p>\r\n    <ul>\r\n        <li>Titan alloy reinforced bones</li>\r\n        <li>Subdermal nanoweave</li>\r\n    </ul>\r\n    <h2>Drawbacks</h2>\r\n    <p>Robotics don't regenerate on their own, in fact they break down over time and need continuous maintenance.\r\n        Additionally they tend to be rejected by the body so specialized medicine needs to be consumed at regular times.\r\n        And since they run on electricity there is a risk that if you run out you become impaired.</p>\r\n</Section>\r\n\r\n\r\nexport default Cybernetics;","import React from \"react\";\r\nimport Indexer, { Indexed } from \"../general/Indexer\";\r\nimport Section from \"../Section\";\r\n\r\n\r\nconst HealthAndRest = () =>\r\n    <Section title='Health and Rest'>\r\n        <Indexer title='Health and rest'>\r\n            <i>There are two kinds of health, mental and physical. Injury to either will result in reduced ability and can lead to eventual death</i>\r\n            <Indexed title='Physical Health'>\r\n                <p>Life is equal to strength + endurance x 2 + athletics / 9, rounded down. Some perks and traits can increase or decrease life. Strength increase from armor or other temporary effects does not increase life</p>\r\n                <p>Physical health represents the integrity of body. </p>\r\n                <p>If you are injured you take penalty to all physical activities with an equal amount of damage taken. Note that merely walking is an athletics + endurance roll, severe damage may impede your ability to walk a distance.</p>\r\n                <p>If your physical health (life) is reduced to zero you do not immediately die, rather you are partially incapacitated, any extraneous physical activity will cause you to take 1 damage. You also gain intermediate bleeding, any further damage causes bleeding to start again.</p>\r\n                <p>If your physical health reaches full negative (-100%) you are critically incapacitated, you gain heavy bleeding, once life hits -200% you are fully dead</p>\r\n                <h5>Pain and adrenaline</h5>\r\n                <p>When you receive an injury during combat your body will produce adrenaline, this prevents penalties to physical activities, it lasts 1 hour, each time it happens you lose 1 mental health.</p>\r\n                <h5>Painkillers</h5>\r\n                <p>Painkillers can reduce the penalty to physical activities by transfering them into mental penalties. The stronger the painkiller the more it dulls the mind.</p>\r\n            </Indexed>\r\n            <Indexed title='Mental Health'>\r\n                <p>Mental health is equal to willpower x 2, some perks and traits can increase or decrease mental health</p>\r\n                <p>Mental health represents the integrity of the mind.</p>\r\n                <p>If your mental health is injured you take a penalty to all mental activities equal to the amount of damage.</p>\r\n                <p>Mental health injuries come from high levels of stress, over time it can accumulate.</p>\r\n                <p>While you can not directly die from mental health injury it can debilitate you, if you reach zero you enter a state of depression: mundane tasks require a roll, if you fail you lack the motivation to act and do nothing. Even in life threatening situations since your character has lost the will to live.</p>\r\n\r\n            </Indexed>\r\n            <Indexed title='Ability damage'>\r\n                <p>Ability damage recovers 1 per rest, if you have ability damage in multiple abilities then the one with the most damage recovers.</p>\r\n                <p>Very few things cause direct ability damage, however if one ability is reduced to 0 or less then your character immediately falls unconscious</p>\r\n                <p>Abilities reduced below 0 represent a severe handicap, stats like life, mental health, mana, sequence, carrying capacity should be recalculated based on current abilities.</p>\r\n                <p>If maximum mental health or maximum life becomes a negative number then you are partially incapacitated. Any damage to life would count as death.</p>\r\n            </Indexed>\r\n            <Indexed title='Mana'>\r\n                <p>Mana is calculated as willpower x 2 + endurance + spells / 6, rounded down.</p>\r\n                <p>Mana is used for spells and activating mutations. A occations may let you expend mana for other purposes. There is no penalty to not having full mana, having below zero mana imposes a penalty equal to negative mana to all skill rolls. This stacks with other penalties.</p>\r\n                \r\n            </Indexed>\r\n            <Indexed title='Recovery'>\r\n                <p>Recovery of life, mental health and mana generally happens when you rest. Life and mental health depends on the quality of sleep</p>\r\n                <ul>\r\n                    <li>No sleep, work: if you stay up all night and work then you recover life at 50% rate and lose 2 mental health. Exhaustion increases by 1 level</li>\r\n                    <li>No sleep, no work: if you stay up all night but do nothing then you recover life at 50% and lose 1 mental health.</li>\r\n                    <li>Horrible sleep: you wake up with a headache and your body is sore and stiff, recover life at 50% and no mental health recovery. Exhaustion decreases by 1 level</li>\r\n                    <li>Low quality sleep: you wake up with a mild headache, life recovery rate 100% and no mental health recovery. Exhaustion decreases by 2 levels</li>\r\n                    <li>Adequate sleep: you wake up feeling rested, life recovery rate 100% and 1 mental health Recovery. Exhaustion decreases by 3 levels</li>\r\n                    <li>Good sleep: you wake up feeling well rested, life recovery rate 100%, 1 mental health recovery and you gain the \"well rested\" buff. Exhaustion decreases by 4 levels</li>\r\n                    <li>Fantastic sleep: you wake up full or energy, life recovery rate 150%, 2 mental health recovery and you gain the \"well rested\" buff. Exhaustion decreases by 5 levels</li>\r\n                </ul>\r\n                <p>Well rested: you have +1 to all skill rolls, if you are in a situation where you may lose mental health instead dispend this buff. Lasts 12 hours</p>\r\n                <p>The quality of your sleep depends on the quality of your situation, some things have positive effects, some negative. If the quality if dropped below horrible then you can't fall asleep</p>\r\n                <ul>\r\n                    <li>Sleeping on the floor with no cover: horrible sleep</li>\r\n                    <li>Sleeping on bad mattress or bedroll: low quality sleep</li>\r\n                    <li>Sleeping on bed: adequate quality sleep</li>\r\n                    <li>Sleeping on good bed: good sleep</li>\r\n                    <li>Temperature ouside of comfort (16-26): drop quality one step</li>\r\n                    <li>Extreme temperature: drop quality two steps</li>\r\n                    <li>Bad ventilation: drop quality one step</li>\r\n                    <li>Sleeping in body suit armor: drop quality one step</li>\r\n                    <li>Sleeping in plated or power armor: drop quality two steps</li>\r\n                    <li>Sleeping with 3 or more other people in room: drop quality one step</li>\r\n                    <li>No noice or disturbances: raise quality one step</li>\r\n                    <li>Sleeping medication: raise quality one step</li>\r\n                    <li>Sleeping while enemies are near: you may not</li>\r\n                </ul>\r\n                <p>Life recovery rate is equal to endurance / 5 per day, fractions are carried over.</p>\r\n                <p>Mental health recovery is equal to 1 per day on adequate and good quality sleep, 2 on fantastic sleep quality. It can be accelerated through therapy and meditation</p>\r\n                <p>Mana recovers 1 per day night cycle. It is completely unaffected by quality of sleep or effort during the day.</p>\r\n            </Indexed>\r\n            <Indexed title='Status'>\r\n                <p>There are several status conditions that can affect a character</p>\r\n                <ul>\r\n                    <li>Frightened.<br />\r\n                    Becoming frightened is accompanied with mental health damage, you are frightened for an equal duration to <i>total mental health damage</i>. Becoming frightened multiple times resets the timer and often drains more mental health.<br />\r\n                    While you are frightened you are only allowed to attack if you are unable to run away. Being frightened prevents intimidation attempts.<br />\r\n                    If you have the trait Aggressive or the perk Barbarian, and lack the brave or coward trait then there's a 50% chance you will enter a blind rage.\r\n                    </li>\r\n                    <li>Panicked<br />\r\n                    Panick is the next step after frightened, it occurs when mental health is at zero or below. While panicked you may only escape, if escape is not possible then you freeze up completely unable to speak.<br />\r\n                    </li>\r\n                    <li>Blind Rage<br />\r\n                    While in a blind rage you must attack the target of your fear, you're not allowed to take any defensive actions and must move towards them in a straight line. Lasts as long as frightened</li>\r\n                    <li>Partially incapacitated<br />\r\n                    This is what happens when your life is reduced to or below 0 but above -100%. Any straneous activity causes 1 point of damage and you are only allowed either the action or move but not both.</li>\r\n                    <li>Critically incapacitated<br />\r\n                    This is what happens when your life is reduced below -100% but above -200%. You are not able to take any action. Roll 2d10 + endurance vs 25, if you fail you fall unconscious.</li>\r\n                </ul>\r\n            </Indexed>\r\n        </Indexer>\r\n\r\n\r\n    </Section>;\r\n\r\nexport default HealthAndRest;","import React, { CSSProperties } from 'react';\r\nimport { CharacterSizeMods } from '../Character';\r\nimport Section from '../Section';\r\n\r\nconst tdWidth: CSSProperties = {\r\n    width: '160px',\r\n    borderBottom: '1px solid #EEEEEE'\r\n};\r\n\r\nconst CharacterSizeAndSpeed = () => <Section title='Character Size & movement speed'>\r\n    <h3>Character Size</h3>\r\n    <p>Being small or large has different benefits and penalties</p>\r\n    <p>The size range and mass range may be exceeded at the player's and game master's discretion. But it is expected that characters get their size according to their size.</p>\r\n    <p>Secondary mod refers to base defense and any situation or skill where it is disadvantageous to be large and advantageous to be small, such as hiding, tumbling, etc.</p>\r\n    <table>\r\n        <thead>\r\n            <tr>\r\n                <th>Size</th>\r\n                <th>Strength mod</th>\r\n                <th>Secondary mod</th>\r\n                <th>Height range (cm)</th>\r\n                <th>Mass range (kg)</th>\r\n                <th>Speed base</th>\r\n                <th>Base defense</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n\r\n            {CharacterSizeMods.map(m => <tr key={`csas_csm_${m.size}`}>\r\n                <td>\r\n                    {m.size}\r\n                </td>\r\n                <td>\r\n                    {m.strengthMod}\r\n                </td>\r\n                <td>\r\n                    {m.secondaryMod}\r\n                </td>\r\n                <td>\r\n                    {m.averageHeight[0]} - {m.averageHeight[0]}\r\n                </td>\r\n                <td>\r\n                    {m.averageWeight[0]} - {m.averageWeight[0]}\r\n                </td>\r\n                <td>\r\n                    {m.speedBase}\r\n                </td>\r\n                <td>\r\n                    {10 + m.secondaryMod}\r\n                </td>\r\n            </tr>)}\r\n        </tbody>\r\n    </table>\r\n    <h3>Movement speed</h3>\r\n    <p>Characters have default and maximum movement speeds, and running speeds which are some multiplicative of their default speed. The walking speed is how far a character can walk in a round</p>\r\n    <p>Characters may choose to power walk but take a -5 to all rolls if they do so and lose their skill bonus to their defense, if they jog they take a -10 and lose their agility to their defense</p>\r\n    <p>To run during combat uses up all actions during combat, they gain a +4 defense while running but forgo skill (use second defense number in place of third)</p>\r\n    <p>To sprint the character must have first run, they forgo skill and agility (use only first defense number)</p>\r\n\r\n    <p>Speed is determined by size, athletics skill and species</p>\r\n    <h6>Size</h6>\r\n    <p>See above table</p>\r\n    <h6>Athletics skill</h6>\r\n    <table style={{ width: '320px' }}>\r\n        <thead>\r\n            <tr>\r\n                <th style={tdWidth}>Skill</th>\r\n                <th style={tdWidth}>Bonus</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            <tr>\r\n                <td style={tdWidth}>0</td>\r\n                <td style={tdWidth}>0</td>\r\n            </tr>\r\n            <tr>\r\n                <td style={tdWidth}>6</td>\r\n                <td style={tdWidth}>1</td>\r\n            </tr>\r\n            <tr>\r\n                <td style={tdWidth}>12</td>\r\n                <td style={tdWidth}>2</td>\r\n            </tr>\r\n            <tr>\r\n                <td style={tdWidth}>18</td>\r\n                <td style={tdWidth}>3</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n    <h6>Species</h6>\r\n    <table style={{ width: '320px' }}>\r\n        <thead>\r\n            <tr>\r\n                <th style={tdWidth}>Species</th>\r\n                <th style={tdWidth}>Bonus</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            <tr>\r\n                <td style={tdWidth}>Human</td>\r\n                <td style={tdWidth}>1</td>\r\n            </tr>\r\n            <tr>\r\n                <td style={tdWidth}>Merlion</td>\r\n                <td style={tdWidth}>1</td>\r\n            </tr>\r\n            <tr>\r\n                <td style={tdWidth}>Nekovian</td>\r\n                <td style={tdWidth}>2</td>\r\n            </tr>\r\n            <tr>\r\n                <td style={tdWidth}>Shambra</td>\r\n                <td style={tdWidth}>0</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n    <h5>Movement speed types</h5>\r\n    <p>There are multiple movement speed types.</p>\r\n    <table>\r\n        <thead>\r\n            <tr>\r\n                <th>Type</th>\r\n                <th>Speed</th>\r\n                <th>Notes</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            <tr>\r\n                <td>Walk</td>\r\n                <td>100%</td>\r\n                <tr>Normal walking speed using move action</tr>\r\n            </tr>\r\n            <tr>\r\n                <td>Power Walk</td>\r\n                <td>200%</td>\r\n                <tr>Requires use of both move action and action.</tr>\r\n            </tr>\r\n            <tr>\r\n                <td>Jog</td>\r\n                <td>300%</td>\r\n                <tr>Requires use of both move action and action. Defense drops from active to passive, or passive to base. Can not use if defense is already at base</tr>\r\n            </tr>\r\n            <tr>\r\n                <td>Run</td>\r\n                <td>400%</td>\r\n                <tr>Requires use of both move action and action. Defense drops to base, can only use if defense is on active.<br />\r\n                    May not react</tr>\r\n            </tr>\r\n            <tr>\r\n                <td>Sprint</td>\r\n                <td>500%</td>\r\n                <tr>Requires use of both move action and action. Defense drops to base, can only use if defense is on active<br />\r\n                    Must run in a straigth or near straight line.<br />\r\n                    Must have used run action in previous turn.<br />\r\n                    Prevents reaction\r\n                </tr>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n    <p><b>Important notice!</b> Exhaustion and being over carrying capacity limits maximum speed, it also increases effort for available speeds. <br />\r\n        For example if you are at 1 level of exhaustion and can't sprint, running now uses as much energy as sprinting. Walking uses twice as much energy.<br />\r\n        Characters that wear heavy armor, carry huge loads of loot or are very exhausted have drastically limited travel ability. You may not fast travel while overburdened.</p>\r\n</Section>;\r\n\r\n\r\nexport default CharacterSizeAndSpeed;","import { ActionCardsProps } from \"./ActionCard\";\r\n\r\n\r\nconst DefaultActionCards: ActionCardsProps[] = [\r\n    {\r\n        name: 'grab object',\r\n        actionPointUse: 3,\r\n        description: 'grab object from ground or backpack'\r\n    },\r\n    {\r\n        name: 'move',\r\n        actionPointUse: 3,\r\n        description: 'move equal to your movement speed, first 2 meters only use 1 action point per meter'\r\n    },\r\n];\r\n\r\nexport default DefaultActionCards;","import React from 'react';\r\nimport './actioncards.css';\r\n\r\nexport interface ActionCardsProps {\r\n    actionPointUse?: number;\r\n    name?: string;\r\n    description?: string;\r\n}\r\n\r\nconst ActionCard: React.FC<ActionCardsProps> = ({ name, actionPointUse, description }) => {\r\n    return <div className='actioncard'>\r\n        <h5>{name !== undefined ? name :  ' '}</h5>\r\n        <p><b>Roll bonus</b>: </p>\r\n        <p><b>Action Points</b>: {actionPointUse}</p>\r\n        <p><i>{description}</i></p>\r\n    </div>;\r\n\r\n}\r\n\r\nexport default ActionCard;","import React from 'react';\r\nimport DefaultActionCards from './DefaultActionCards';\r\nimport ActionCard from './ActionCard';\r\nimport Section from '../Section';\r\n\r\nconst ActionCards = () => {\r\n    const emptyFlexboxes = (3 - DefaultActionCards.length % 3) + 3;\r\n    return <Section title='Action Cards'>\r\n        <div className='actioncards'>\r\n            {DefaultActionCards.map((ac, index, array) => <ActionCard key={`pm_acs_${index}`}\r\n                actionPointUse={ac.actionPointUse}\r\n                name={ac.name}\r\n                description={ac.description}\r\n            ></ActionCard>)}\r\n            {[...new Array(emptyFlexboxes)].map((v, i, a) => <ActionCard\r\n                key={`pm_acs_blank_${i}`}\r\n                description=''\r\n                actionPointUse={undefined}\r\n                name=''\r\n            ></ActionCard>)}\r\n        </div></Section>;\r\n\r\n}\r\n\r\nexport default ActionCards;","import React from 'react';\r\nimport MakeCharacter from '../components/playermanual/MakeCharacter';\r\nimport Combat from '../components/playermanual/Combat';\r\nimport Equipment from '../components/playermanual/Equipment';\r\nimport Wealth from '../components/playermanual/Wealth';\r\nimport Experience from '../components/playermanual/Experience';\r\nimport Vehicles from '../components/playermanual/Vehicles';\r\nimport Section from '../components/Section';\r\nimport CharacterSheetOverview from '../components/playermanual/CharacterSheetOverview';\r\nimport CarryingCapacity from '../components/playermanual/CarryingExhaustion';\r\nimport Radiation from '../components/playermanual/Radiation';\r\nimport Consumables from '../components/playermanual/Consumables';\r\nimport Cybernetics from '../components/playermanual/Cybernetics';\r\nimport HealthAndRest from '../components/playermanual/HealthAndRest';\r\nimport { IViewProps } from './IViewProps';\r\nimport CharacterSizeAndSpeed from '../components/playermanual/CharacterSizeAndSpeed';\r\nimport ActionCards from '../components/actioncards/ActionCards';\r\n\r\n\r\nconst PlayerManual: React.FC<IViewProps> = ({route}) => {\r\n    return (<div>\r\n        <h1>The Player Manual</h1>\r\n        <p>This page is to help the player create characters and play the game, view each section below for more details.</p>\r\n        <hr />\r\n        <MakeCharacter initiallyOpen={route === 'makeCharacter'} key='pm1' />\r\n        <hr />\r\n        <CharacterSheetOverview key='pm2' />\r\n        <hr />\r\n        <RollingSkills key='pmrs' />\r\n        <hr />\r\n        <Experience key='pm4' />\r\n        <hr />\r\n        <CharacterSizeAndSpeed key='pmcs' />\r\n        <hr />\r\n        <CarryingCapacity key='pmcac' />\r\n        <hr />\r\n        <ActionCards key='pmacds' />\r\n        <hr />\r\n        <Combat key='pm5' />\r\n        <hr />\r\n        <HealthAndRest key='pm8' />\r\n        <hr/>\r\n        <Wealth key='pm3' />\r\n        <hr />\r\n        <Equipment key='pm6' />\r\n        <hr />\r\n        <Consumables key='pmcons' />\r\n        <hr />\r\n        <Vehicles key='pm7' />\r\n        <hr />\r\n        <Cybernetics key='pmcyb' />\r\n        <hr />\r\n        <Radiation key='pmr' />\r\n        \r\n    </div>);\r\n}\r\n\r\nconst RollingSkills = () =>\r\n    <Section title='Making a skill roll'>\r\n        <h3>Rolling a skill</h3>\r\n        <p>When you attempt to do anything that has a possibility of failure the GM will call on the player to make a skill roll. A skill roll involves two 10 sided dice, your skill rank and an appropriate ability (strength, agility, etc).</p>\r\n        <p>Roll the dice, add them up, add the skill and ability (and any relevant perk if you have it). This number will be compared with a target, some targets are defined in the skill's description, other's depend on other character's skills. If the total equals or exceeds the target then the skill roll is a success. Most often a failure does not result in a catastrophic result, rather there is a spectrum from critical failure, mild failure, success, great success and supreme success</p>\r\n        <p>In cases where there's no available table to check on the GM will choose an appropriate level of difficulty based on the attempted skill according to this table.</p>\r\n        <ul>\r\n            <li>Inconsequential: 0 </li>\r\n            <li>Trivial: 5</li>\r\n            <li>Easy: 10</li>\r\n            <li>Routine: 15</li>\r\n            <li>Challenging: 20</li>\r\n            <li>Hard: 25</li>\r\n            <li>Very hard: 30</li>\r\n            <li>Extremely hard: 35</li>\r\n            <li>Hellish: 40</li>\r\n            <li>Impossible: 45</li>\r\n            <li>Heroic: 50</li>\r\n            <li>Godmode: 55</li>\r\n            <li>Don't even try: 60</li>\r\n        </ul>\r\n        <h4>Take 4</h4>\r\n        <p>Players can always choose to Take 4, this means instead of rolling they use the number 4. In some cases the GM might say that players are not allowed to Take 4 but it is adviced to be rare.</p>\r\n        <h4>Take 10</h4>\r\n        <p>If there are no harmful consequences, the character is not under duress or stress then the player may choose to take 10. This works similarly to Take 4. Passive skills are encouraged to always use Take 10.</p>\r\n        <h4>Take 15</h4>\r\n        <p>If the situation is such that it allows for Take 10 then the player may opt to take 10 times as long and Take 15.</p>\r\n        <h4>Critical success and failure</h4>\r\n        <p>When you roll 2d10 on a skill or ability check and both dice show 10, roll another d10 and add to the roll.</p>\r\n        <p>When you roll 2d10 on a skill or ability check and both dice show 1, roll another d10 and subtract from the roll.</p>\r\n    </Section>\r\n\r\n\r\n\r\nexport default PlayerManual;"],"sourceRoot":""}