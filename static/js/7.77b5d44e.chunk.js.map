{"version":3,"sources":["views/SkillPerkManual.tsx"],"names":["SkillSection","useState","currentSkill","setCurrentSkill","GetSkillList","map","skill","style","display","width","name","onClick","description","useCases","uc","attribute","type","PerkSection","currentPerk","setCurrentPerk","GetPerkList","perk","cost","TraitSection","GetTraits","trait","SkillPerkManual"],"mappings":"wLAcMA,EAAe,WAAO,IAAD,EACiBC,mBAAS,IAD1B,mBAChBC,EADgB,KACFC,EADE,KAEvB,OAAQ,6BACJ,sCACA,2IACCC,cAAeC,KAAI,SAAAC,GAChB,OAAQ,6BAAK,4BAAI,0BAAMC,MAAO,CAAEC,QAAS,eAAgBC,MAAO,UAAYH,EAAMI,MAArE,IAAmFR,IAAiBI,EAAMI,KACnH,kBAAC,IAAD,CAAQC,QAAS,kBAAMR,EAAgBG,EAAMI,QAA7C,KACA,kBAAC,IAAD,CAAQC,QAAS,kBAAMR,EAAgB,MAAvC,KAFS,KAGRD,IAAiBI,EAAMI,KAAO,6BAE1BJ,EAAMM,YACNN,EAAMO,SAASR,KAAI,SAAAS,GACZ,OAAQ,6BACJ,2BAAIA,EAAGJ,MAAS,6BADZ,IAEFI,EAAGC,UAFD,MAEeD,EAAGE,KAFlB,IAEwB,6BACf,WAAZF,EAAGE,KAAoB,gCAAkC,GAE1D,6BAAOF,EAAGF,iBAGjB,WAOnBK,EAAc,WAAO,IAAD,EACgBhB,mBAAS,IADzB,mBACfiB,EADe,KACFC,EADE,KAEtB,OAAQ,6BACJ,qCACA,kNACCC,cAAcf,KAAI,SAAAgB,GACf,OAAQ,6BACJ,4BAAI,0BAAMd,MAAO,CAAEC,QAAS,eAAgBC,MAAO,UAAYY,EAAKX,MAApE,IAAkFQ,IAAgBG,EAAKX,KACvG,kBAAC,IAAD,CAAQC,QAAS,kBAAMQ,EAAeE,EAAKX,QAA3C,KACA,kBAAC,IAAD,CAAQC,QAAS,kBAAMQ,EAAe,MAAtC,KAFA,KAGCD,IAAgBG,EAAKX,KAAO,6BACzB,2BAAG,mCAAH,KAAiBW,EAAKC,MACtB,2BAAG,oCAAH,KAAkBD,EAAKf,OAC1Be,EAAKT,eAAuB,WAMvCW,EAAe,WAAO,IAAD,EACetB,mBAAS,IADxB,mBAChBiB,EADgB,KACHC,EADG,KAEvB,OAAQ,6BACJ,sCACA,4NACA,kLACA,6FACCK,cAAYnB,KAAI,SAAAoB,GACb,OAAQ,6BACJ,4BAAI,0BAAMlB,MAAO,CAAEC,QAAS,eAAgBC,MAAO,UAAYgB,EAAMf,MAArE,IAAmFQ,IAAgBO,EAAMf,KACzG,kBAAC,IAAD,CAAQC,QAAS,kBAAMQ,EAAeM,EAAMf,QAA5C,KACA,kBAAC,IAAD,CAAQC,QAAS,kBAAMQ,EAAe,MAAtC,KAFA,KAGCD,IAAgBO,EAAMf,KAAO,6BAC1B,2BAAG,mCAAH,KAAiBe,EAAMH,MAC1BG,EAAMb,aAAqB,WAM7Bc,UA3EkB,WAC7B,OAAO,6BACC,kBAAC1B,EAAD,MACA,kBAACiB,EAAD,MACA,kBAACM,EAAD","file":"static/js/7.77b5d44e.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport { GetTraits } from '../components/traits/Traits';\r\nimport { GetPerkList } from '../components/GetPerkList';\r\nimport { GetSkillList } from '../components/GetSkillList';\r\n\r\nconst SkillPerkManual:React.FC = () => {\r\n    return <div>\r\n            <SkillSection />\r\n            <PerkSection />\r\n            <TraitSection />\r\n        </div>;\r\n}\r\n\r\nconst SkillSection = () => {\r\n    const [currentSkill, setCurrentSkill] = useState('');\r\n    return (<div>\r\n        <h2>Skills</h2>\r\n        <p>Skills are the generic things a character can learn to do, every skill gains a bonus from it's main ability.</p>\r\n        {GetSkillList().map(skill => {\r\n            return (<div><h3><span style={{ display: 'inline-block', width: '200px' }}>{skill.name}</span> {currentSkill !== skill.name ?\r\n                <Button onClick={() => setCurrentSkill(skill.name)}>?</Button> :\r\n                <Button onClick={() => setCurrentSkill('')}>X</Button>} </h3>\r\n                {currentSkill === skill.name ? <div>\r\n                    \r\n                    {skill.description}\r\n                    {skill.useCases.map(uc => {\r\n                            return (<div>\r\n                                <b>{uc.name}</b><br />\r\n                                ({uc.attribute} - {uc.type})<br />\r\n                                {uc.type === 'active' ? 'roll 2d10 + attribute + level' : ''} \r\n                                \r\n                                <br />{uc.description}\r\n                            </div>);\r\n                        })}\r\n                </div> : null}\r\n                \r\n                </div>);\r\n        })}\r\n    </div>);\r\n}\r\n\r\nconst PerkSection = () => {\r\n    const [currentPerk, setCurrentPerk] = useState('');\r\n    return (<div>\r\n        <h2>Perks</h2>\r\n        <p>Perks are specializations and special abilities from skills, every perk either makes a specific usage of a skill better or enables the character to perform some extraordinary feat</p>\r\n        {GetPerkList().map(perk => {\r\n            return (<div>\r\n                <h3><span style={{ display: 'inline-block', width: '200px' }}>{perk.name}</span> {currentPerk !== perk.name ?\r\n                <Button onClick={() => setCurrentPerk(perk.name)}>?</Button> :\r\n                <Button onClick={() => setCurrentPerk('')}>X</Button>} </h3>\r\n                {currentPerk === perk.name ? <div>\r\n                    <p><b>Cost</b>: {perk.cost}</p>\r\n                    <p><b>Skill</b>: {perk.skill}</p>\r\n                {perk.description()}</div> : null}\r\n            </div>);\r\n        })}\r\n    </div>)\r\n}\r\n\r\nconst TraitSection = () => {\r\n    const [currentPerk, setCurrentPerk] = useState('');\r\n    return (<div>\r\n        <h2>Traits</h2>\r\n        <p>Traits are innate characteristics of a character, they can not be added or removed after the start of the game, some traits are purely negative, others positive, some have a combined effect</p>\r\n        <p>Traits often describe a characters behavior, characters with these traits are expected to roleplay in a way which does not conflict with that trait</p>\r\n        <p>It is recommended that a character have between 1 and 3 traits</p>\r\n        {GetTraits().map(trait => {\r\n            return (<div>\r\n                <h3><span style={{ display: 'inline-block', width: '200px' }}>{trait.name}</span> {currentPerk !== trait.name ?\r\n                <Button onClick={() => setCurrentPerk(trait.name)}>?</Button> :\r\n                <Button onClick={() => setCurrentPerk('')}>X</Button>} </h3>\r\n                {currentPerk === trait.name ? <div>\r\n                    <p><b>Cost</b>: {trait.cost}</p>\r\n                {trait.description}</div> : null}\r\n            </div>);\r\n        })}\r\n    </div>)\r\n}\r\n\r\nexport default SkillPerkManual;"],"sourceRoot":""}