{"version":3,"sources":["components/playermanual/Section.tsx","components/gamemaster/Sequencer.tsx","views/GameMaster.tsx"],"names":["Section","title","children","useState","isOpen","setIsOpen","onClick","CharacterAdder","props","characterName","setCharacterName","sequenceBonus","setSequenceBonus","add","side","callback","name","parseInt","TextField","label","value","onChange","e","target","Button","diceRoll","Math","floor","random","getContextBonus","mode","SequenceViewer","attackers","defenders","map","a","roll","contextBonus","sideAttackers","sideDefenders","sequenceTurn","allCharacters","sort","b","char","Sequencer","characters","setCharacters","setMode","c","filter","GameMaster"],"mappings":"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","file":"static/js/6.492c9b5e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from \"@material-ui/core\";\n\ninterface ISection {\n    title: string;\n}\n\nconst Section: React.FC<ISection> = ({ title, children }) => {\n    const [isOpen, setIsOpen] = useState(false);\n    return <div>\n        <Button onClick={() => setIsOpen(!isOpen)}>{title} {isOpen ? '-' : '+'}</Button>\n        {isOpen && children}\n    </div>;\n}\n\nexport default Section;","import React, { useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\n\r\nconst Sequencer: React.FC = () => {\r\n    const [characters, setCharacters] = useState<CharacterLabel[]>([]);\r\n    const [mode, setMode] = useState('none');\r\n    return <div>\r\n        <h2>Characters</h2>\r\n        {characters.map(c => {\r\n            return <p><b>{c.name}</b> ({c.sequenceBonus})</p>\r\n        })}\r\n        <CharacterAdder callback={c => setCharacters([...characters, c])} ></CharacterAdder>\r\n        <hr />\r\n        <h3>Start</h3>\r\n        <Button onClick={() => setMode('ambush')}>Ambush</Button>\r\n        <Button onClick={() => setMode('surprise')}>Surprise</Button>\r\n        <Button onClick={() => setMode('known')}>Known</Button>\r\n        <Button onClick={() => setMode('counterAmbush')}>Counter Ambush</Button>\r\n        <Button onClick={() => setMode('none')}>Reset</Button>\r\n        {mode !== 'none' ?\r\n            <SequenceViewer attackers={characters.filter(c => c.side === 'attackers')} defenders={characters.filter(c => c.side === 'defenders')} mode={mode} />\r\n            : null\r\n        }\r\n    </div>\r\n}\r\n\r\ninterface ICharacterAdderProps {\r\n    callback: (item: CharacterLabel) => void;\r\n}\r\n\r\nconst CharacterAdder: React.FC<ICharacterAdderProps> = (props) => {\r\n    const [characterName, setCharacterName] = useState('');\r\n    const [sequenceBonus, setSequenceBonus] = useState('0');\r\n\r\n    const add = (side: string) => {\r\n        props.callback({ name: characterName, sequenceBonus: parseInt(sequenceBonus), side: side });\r\n        setCharacterName('');\r\n        setSequenceBonus('0');\r\n    }\r\n\r\n    return <div>\r\n        <TextField label='character name' value={characterName} onChange={(e) => setCharacterName(e.target.value)}></TextField>\r\n        <TextField label='sequence bonus' value={sequenceBonus} onChange={(e) => setSequenceBonus(e.target.value)}></TextField>\r\n\r\n        <Button onClick={() => add('attackers')}>Add attacker</Button>\r\n        <Button onClick={() => add('defenders')}>Add defender</Button>\r\n    </div>\r\n}\r\n\r\ninterface CharacterLabel {\r\n    name: string;\r\n    sequenceBonus: number;\r\n    side: string | 'attacker' | 'defender';\r\n}\r\n\r\ninterface ISequence {\r\n    attackers: CharacterLabel[];\r\n    defenders: CharacterLabel[];\r\n    mode: string | 'none' | 'ambush' | 'surprise' | 'known' | 'counterAmbush';\r\n}\r\n\r\ninterface CharacterData extends CharacterLabel {\r\n    roll: number;\r\n    contextBonus: number;\r\n}\r\n\r\nconst diceRoll = () => {\r\n    return Math.floor(Math.random() * 10) + 1 + Math.floor(Math.random() * 10) + 1;\r\n}\r\nconst getContextBonus = (side: string, mode:string) => {\r\n    switch (mode) {\r\n        case 'ambush': return side === 'attackers' ? 20 : 0;\r\n        case 'surprise': return side === 'attackers' ? 10 : 0;\r\n        case 'known': return 0;\r\n        case 'counterAmbush': return side === 'attackers' ? 0 : 10;\r\n        default: return 0;\r\n    }\r\n}\r\n\r\nconst SequenceViewer: React.FC<ISequence> = ({ attackers, defenders, mode }) => {\r\n    const [sideAttackers, setSideAttackers] = useState<CharacterData[]>(attackers.map(a => {\r\n        return { name: a.name, sequenceBonus: a.sequenceBonus, side: a.side, roll: diceRoll(), contextBonus: getContextBonus(a.side,mode) };\r\n    }));\r\n    const [sideDefenders, setSideDefenders] = useState<CharacterData[]>(defenders.map(a => {\r\n        return { name: a.name, sequenceBonus: a.sequenceBonus, side: a.side, roll: diceRoll(), contextBonus: getContextBonus(a.side,mode) };\r\n    }));\r\n    const [sequenceTurn, setSequenceTurn] = useState(0);\r\n    \r\n\r\n    \r\n    const allCharacters = [...sideAttackers, ...sideDefenders].sort((a, b) => (b.sequenceBonus + b.roll + b.contextBonus) - (a.sequenceBonus + a.roll + a.contextBonus));\r\n\r\n    return <div>\r\n        current: {sequenceTurn}\r\n        {allCharacters.map(char => {\r\n            return <p>({char.side}) {char.name}: {char.contextBonus} + {char.sequenceBonus} + {char.roll} = {char.contextBonus + char.sequenceBonus + char.roll}</p>\r\n        })}\r\n    </div>\r\n}\r\n\r\nexport default Sequencer;","import React from 'react';\nimport Section from '../components/playermanual/Section';\nimport Sequencer from '../components/gamemaster/Sequencer';\n\nconst GameMaster: React.FC = () => {\n    return (<div>\n        <h1>Game Master</h1>\n        <p>This holds a collection of tools for the game master</p>\n        <Section title='Sequencer'>\n            <Sequencer />\n        </Section>\n    </div>);\n}\n\n\nexport default GameMaster;"],"sourceRoot":""}