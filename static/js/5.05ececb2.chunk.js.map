{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/inherits.js","components/gamemaster/Battlemat.tsx","views/Battleview.tsx"],"names":["_possibleConstructorReturn","self","call","_getPrototypeOf","o","Object","setPrototypeOf","getPrototypeOf","__proto__","_setPrototypeOf","p","_inherits","subClass","superClass","TypeError","prototype","create","constructor","value","writable","configurable","Battlemap","props","mount","hexagonAngle","sideLength","hexHeight","hexRadius","hexRectangleHeight","hexRectangleWidth","state","outputData","currentIcons","initialIcons","isVisible","this","boardHeight","boardWidth","onClick","setState","showHexmat","React","Component","Hexmat","initializeBoard","canvas","undefined","iconAtHex","hasmoved","mouseStartX","mouseStartY","mouseEndX","mouseEndY","addEventListener","mouseEvent","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","Math","floor","screenX","screenY","ctx","strokeStyle","lineWidth","drawHexagon","findIconAtHex","console","log","icons","index","ic","symbol","startX","startY","icon","getContext","setVariables","clearRect","fillStyle","drawIconsOnBoard","drawBoard","ix","iy","sin","cos","canvasContext","getIconPosition","font","fillText","width","height","fill","str","beginPath","moveTo","lineTo","closePath","stroke","style","background","overflow","onContextMenu","e","preventDefault","ref","inputCss","Battleview","useState","setWidth","setHeight","currentAddingIcon","setCurrentAddingIcon","setIcons","type","title","onChange","parseInt","target"],"mappings":"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","file":"static/js/5.05ececb2.chunk.js","sourcesContent":["import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import React from 'react';\r\n\r\ninterface IBattlemapState {\r\n    outputData: string;\r\n    currentIcons: Icon[];\r\n}\r\n\r\ninterface IBattlemapWrapperState extends IBattlemapState {\r\n    isVisible: boolean;\r\n}\r\n\r\ninterface IBattlematProps {\r\n    boardHeight: number;\r\n    boardWidth: number;\r\n    initialIcons: Icon[];\r\n}\r\n\r\ninterface Icon {\r\n    symbol: string;\r\n    startX: number;\r\n    startY: number;\r\n}\r\n\r\nexport default class Battlemap extends React.Component<IBattlematProps, IBattlemapWrapperState> {\r\n    mount: HTMLCanvasElement | undefined | null;\r\n    hexagonAngle: number = 0;\r\n    sideLength: number = 25;\r\n    hexHeight: number = 0;\r\n    hexRadius: number = 0;\r\n    hexRectangleHeight: number = 0;\r\n    hexRectangleWidth: number = 0;\r\n\r\n    constructor(props: Readonly<IBattlematProps>) {\r\n        super(props);\r\n        this.state = {\r\n            outputData: ':)',\r\n            currentIcons: props.initialIcons,\r\n            isVisible: false,\r\n        };\r\n    }\r\n\r\n    showHexmat() {\r\n        if (this.state.isVisible === false) return null;\r\n        return <Hexmat initialIcons={this.props.initialIcons} boardHeight={this.props.boardHeight} boardWidth={this.props.boardWidth} />;\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <button onClick={() => this.setState({ isVisible: !this.state.isVisible })}>show</button>\r\n            {this.showHexmat()}\r\n        </>;\r\n    }\r\n}\r\n\r\nclass Hexmat extends React.Component<IBattlematProps, IBattlemapState> {\r\n\r\n    mount: HTMLCanvasElement | undefined | null;\r\n    hexagonAngle: number = 0;\r\n    sideLength: number = 25;\r\n    hexHeight: number = 0;\r\n    hexRadius: number = 0;\r\n    hexRectangleHeight: number = 0;\r\n    hexRectangleWidth: number = 0;\r\n\r\n    constructor(props: Readonly<IBattlematProps>) {\r\n        super(props);\r\n        this.state = {\r\n            outputData: ':)',\r\n            currentIcons: props.initialIcons,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.initializeBoard();\r\n\r\n        var canvas = this.mount;\r\n        if (canvas !== null && canvas !== undefined) {\r\n            let hasmoved = false;\r\n            let mouseStartX = 0;\r\n            let mouseStartY = 0;\r\n            let mouseEndX = 0;\r\n            let mouseEndY = 0;\r\n            let iconAtHex: Icon | undefined;\r\n            canvas.addEventListener(\"mousemove\", (mouseEvent) => {\r\n                var canvas = this.mount;\r\n                if (canvas !== null && canvas !== undefined) {\r\n                    const rect = canvas.getBoundingClientRect();\r\n                    const x = mouseEvent.clientX - rect.left;\r\n                    const y = mouseEvent.clientY - rect.top;\r\n                    mouseEndX = Math.floor(y / (this.hexHeight + this.sideLength));\r\n                    mouseEndY = Math.floor((x - (mouseEndX % 2) * this.hexRadius) / this.hexRectangleWidth);\r\n\r\n                    const screenX = mouseEndY * this.hexRectangleWidth + ((mouseEndX % 2) * this.hexRadius);\r\n                    const screenY = mouseEndX * (this.hexHeight + this.sideLength);\r\n                    let ctx = this.initializeBoard();\r\n                    if (mouseEndX >= 0 && mouseEndX < this.props.boardWidth && mouseEndY >= 0 && mouseEndY < this.props.boardHeight && ctx !== undefined) {\r\n                        ctx.strokeStyle = \"#FF0000\";\r\n                        ctx.lineWidth = 3;\r\n                        this.drawHexagon(ctx, screenX, screenY, false);\r\n                    }\r\n                    hasmoved = true;\r\n                }\r\n            });\r\n\r\n            canvas.addEventListener(\"mousedown\", (mouseEvent) => {\r\n                hasmoved = false;\r\n                if (canvas !== null && canvas !== undefined) {\r\n                    const rect = canvas.getBoundingClientRect();\r\n                    const x = mouseEvent.clientX - rect.left;\r\n                    const y = mouseEvent.clientY - rect.top;\r\n                    mouseStartY = Math.floor(y / (this.hexHeight + this.sideLength));\r\n                    mouseStartX = Math.floor((x - (mouseStartY % 2) * this.hexRadius) / this.hexRectangleWidth);\r\n                    iconAtHex = this.findIconAtHex(mouseStartX, mouseStartY);\r\n                    console.log(mouseStartX, mouseStartY, iconAtHex);\r\n                }\r\n            });\r\n            canvas.addEventListener(\"mouseup\", () => {\r\n                if (iconAtHex !== undefined && hasmoved === true) {\r\n                    let icons = this.state.currentIcons;\r\n                    for (var index in icons) {\r\n                        var ic = icons[index];\r\n                        if (ic.symbol === iconAtHex.symbol) {\r\n                            console.log(`moving ${ic.symbol} from x ${ic.startX} -> ${mouseEndX} & y ${ic.startY} -> ${mouseEndY}`);\r\n\r\n                            ic.startY = mouseEndX;\r\n                            ic.startX = mouseEndY;\r\n                        }\r\n                    }\r\n                    this.setState({ currentIcons: icons });\r\n                    this.initializeBoard();\r\n                }\r\n\r\n                iconAtHex = undefined;\r\n                hasmoved = false;\r\n            });\r\n            canvas.addEventListener(\"mouseleave\", () => {\r\n                iconAtHex = undefined;\r\n            });\r\n        }\r\n    }\r\n\r\n    getIconPosition(icon: Icon) {\r\n\r\n        var x = this.hexRadius * 2 * (icon.startX + .25) + (icon.startY % 2 * this.hexRectangleWidth / 2);\r\n        var y = this.hexRectangleHeight * 0.75 * (icon.startY + 0) + this.hexRectangleHeight / 2;\r\n\r\n        console.log('position: ', x, y);\r\n        return { x: x, y: y };\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const canvas = this.mount;\r\n        if (canvas === null || canvas === undefined) {\r\n            return;\r\n        }\r\n        var ctx = canvas.getContext('2d');\r\n        if (ctx === null) return;\r\n        this.initializeBoard();\r\n    }\r\n\r\n    initializeBoard() {\r\n        this.setVariables();\r\n        const canvas = this.mount;\r\n        if (canvas === null || canvas === undefined) {\r\n            return;\r\n        }\r\n        var ctx = canvas.getContext('2d');\r\n        if (ctx === null) return;\r\n        ctx.clearRect(0, 0, this.props.boardWidth * 2 * this.sideLength, this.props.boardHeight * 2 * this.sideLength);\r\n\r\n\r\n        ctx.fillStyle = \"#000000\";\r\n        ctx.strokeStyle = \"#666666\";\r\n        ctx.lineWidth = 1;\r\n        this.drawIconsOnBoard(ctx);\r\n        this.drawBoard(ctx, this.props.boardWidth, this.props.boardHeight);\r\n        return ctx;\r\n    }\r\n    findIconAtHex(x: number, y: number): Icon | undefined {\r\n        for (var index in this.state.currentIcons) {\r\n            var icon = this.state.currentIcons[index];\r\n            var ix = icon.startX;\r\n            var iy = icon.startY;\r\n            if (x === ix && y === iy) return icon;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    setVariables() {\r\n        this.hexagonAngle = 0.523598776; // 30 degrees in radians\r\n        this.hexHeight = Math.sin(this.hexagonAngle) * this.sideLength;\r\n        this.hexRadius = Math.cos(this.hexagonAngle) * this.sideLength;\r\n        this.hexRectangleHeight = this.sideLength + 2 * this.hexHeight;\r\n        this.hexRectangleWidth = 2 * this.hexRadius;\r\n    }\r\n\r\n    drawIconsOnBoard(canvasContext: CanvasRenderingContext2D) {\r\n        for (var index in this.state.currentIcons) {\r\n            var icon = this.state.currentIcons[index];\r\n\r\n            const { x, y } = this.getIconPosition(icon);\r\n\r\n            canvasContext.font = \"11px arial\";\r\n            canvasContext.fillStyle = \"black\";\r\n            canvasContext.fillText(`${icon.symbol}`, x, y);\r\n        }\r\n    }\r\n\r\n    drawBoard(ctx: CanvasRenderingContext2D, width: number, height: number) {\r\n        for (var x = 0; x < width; ++x) {\r\n            for (var y = 0; y < height; ++y) {\r\n                this.drawHexagon(\r\n                    ctx,\r\n                    x * this.hexRectangleWidth + ((y % 2) * this.hexRadius),\r\n                    y * (this.sideLength + this.hexHeight),\r\n                    false//, `${x};${y}`\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    drawHexagon(canvasContext: CanvasRenderingContext2D, x: number, y: number, fill: boolean, str: string = '') {\r\n        canvasContext.beginPath();\r\n        canvasContext.moveTo(x + this.hexRadius, y);\r\n        canvasContext.lineTo(x + this.hexRectangleWidth, y + this.hexHeight);\r\n        canvasContext.lineTo(x + this.hexRectangleWidth, y + this.hexHeight + this.sideLength);\r\n        canvasContext.lineTo(x + this.hexRadius, y + this.hexRectangleHeight);\r\n        canvasContext.lineTo(x, y + this.sideLength + this.hexHeight);\r\n        canvasContext.lineTo(x, y + this.hexHeight);\r\n        canvasContext.closePath();\r\n\r\n        if (str !== '') {\r\n            canvasContext.fillStyle = '#CCCCCC';\r\n            canvasContext.fillText(str, x + this.hexRadius / 2, y + this.hexRadius * 1.5);\r\n        }\r\n        if (fill) {\r\n            canvasContext.fill();\r\n        }\r\n        canvasContext.stroke();\r\n    }\r\n\r\n    render() {\r\n        return <div style={{ background: 'white', width: '750px', height: '600px', overflow: 'scroll' }}>\r\n            <canvas height={this.props.boardHeight * this.sideLength * 1.5} width={this.props.boardWidth * this.sideLength * 1.8} onContextMenu={(e) => e.preventDefault()} ref={ref => (this.mount = ref)}></canvas>\r\n        </div>;\r\n    }\r\n}","import { CSSProperties } from '@material-ui/core/styles/withStyles';\r\nimport React, { useState } from 'react';\r\nimport Battlemap from '../components/gamemaster/Battlemat';\r\n\r\nconst inputCss: CSSProperties = {\r\n    width: '60px'\r\n};\r\n\r\ninterface Icon {\r\n    symbol: string;\r\n    startX: number;\r\n    startY: number;\r\n}\r\n\r\nconst Battleview: React.FC = () => {\r\n    const [width, setWidth] = useState(18);\r\n    const [height, setHeight] = useState(15);\r\n    const [currentAddingIcon, setCurrentAddingIcon] = useState('');\r\n    const [icons, setIcons] = useState<Icon[]>([]);\r\n\r\n    const addIcon = () => {\r\n        setIcons([...icons, { symbol: currentAddingIcon, startX: 0, startY: 0 }]);\r\n        setCurrentAddingIcon('');\r\n        console.log({ icons });\r\n    };\r\n\r\n    return <>\r\n        <input type='text' title='width' style={inputCss} value={width} onChange={(e) => setWidth(parseInt(e.target.value))} />\r\n        <input type='text' title='height' style={inputCss} value={height} onChange={(e) => setHeight(parseInt(e.target.value))} /> |\r\n        <input type='text' title='add icon' style={inputCss} value={currentAddingIcon} onChange={(e) => setCurrentAddingIcon(e.target.value)} />\r\n        <button onClick={() => addIcon()} >Add</button>\r\n\r\n        <br />\r\n        <Battlemap initialIcons={icons} boardHeight={height} boardWidth={width} />\r\n    </>;\r\n}\r\n\r\n\r\nexport default Battleview;"],"sourceRoot":""}