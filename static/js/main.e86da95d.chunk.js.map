{"version":3,"sources":["components/Label.tsx","components/Field.tsx","components/CharacterSheet.tsx","components/Skills.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Label","children","style","display","minWidth","d10","min","max","Math","round","random","Field","label","value","onChange","modifier","useState","results","setResults","ma","undefined","mi","total","Paper","Button","onClick","fSum","n","x","i","CharacterSheet","props","useReducer","useCharacter","strength","agility","endurance","perception","willpower","intelligence","skills","name","attribute","level","sort","a","b","techniques","character","dispatch","calculatedPointUse","map","s","reduce","hitpoints","mana","damageBonusSmall","floor","damageBonusMedium","damageBonusLarge","textAlign","Grid","container","spacing","item","xs","sm","action","substring","toUpperCase","state","r","findIndex","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e86da95d.chunk.js","sourcesContent":["    import React from 'react';\r\n\r\nexport const Label: React.FC<{}> = ({children}) => {\r\n    return <label style={{display:'inline-block', minWidth:'140px'}}>{children}</label>;\r\n}\r\n\r\n","import React, {useState} from 'react';\r\nimport { Paper, Button } from '@material-ui/core';\r\nimport { Label } from './Label';\r\n\r\ninterface FieldProps {\r\n    label: string;\r\n    value: number;\r\n    max?: number;\r\n    min?: number;\r\n    modifier?: number;\r\n    onChange: (n: number) => void;\r\n}\r\n\r\n\r\nconst rand = (min:number,max:number) => {\r\n    return Math.round(Math.random()*(max-min) + min);\r\n};\r\n\r\nconst d10 = () => rand(1,10);\r\n//results[0] + ' + ' + results[1] + ' ' + \r\nexport const Field: React.FC<FieldProps> = ({ label, value, onChange, max, min, modifier }) => {\r\n    const [results, setResults] = useState([0,0]);\r\n    let ma = max !== undefined ? max : 10;\r\n    let mi = min !== undefined ? min : 1;\r\n    let total = modifier !== undefined ? value + modifier : value;\r\n    return <Paper>\r\n        <Label>{label}:</Label> <Label>{value} {modifier !== undefined ? ` | ${modifier} | ${total}` : null}</Label>\r\n        <Button onClick={() => onChange(ma <= value ? value : value + 1)}>+</Button>\r\n        <Button onClick={() => onChange(mi >= value ? value : value - 1)}>-</Button>\r\n        <Button onClick={() => setResults([d10(),d10()])}>&</Button>\r\n        {results[0] !== 0 ? `${total} + ${results[0]} + ${results[1]} = ${total+results[0]+results[1]}`\r\n        : null}\r\n    </Paper>\r\n}","import React, { useState, useReducer } from 'react';\r\nimport { Field } from './Field';\r\nimport { Label } from './Label';\r\nimport { Paper, Grid } from '@material-ui/core';\r\nimport { Skill, GetSkillList } from './Skills';\r\nimport { normalize } from 'path';\r\n\r\ninterface CharacterSheetProps {\r\n\r\n}\r\n\r\nconst fSum = (n: number): number => {\r\n    let x = 0;\r\n    for (let i = 0; i <= n; i++) {\r\n        x += i;\r\n    }\r\n    return x;\r\n};\r\n\r\n\r\ninterface Technique {\r\n    name: string;\r\n    bonus: string;\r\n    cost: number;\r\n}\r\n\r\ninterface Character {\r\n    strength: number;\r\n    agility: number;\r\n    endurance: number;\r\n    perception: number;\r\n    willpower: number;\r\n    intelligence: number;\r\n    skills: Skill[];\r\n    techniques: Technique[];\r\n}\r\n\r\nexport const CharacterSheet: React.FC<CharacterSheetProps> = (props) => {\r\n    const [character, dispatch] = useReducer(useCharacter, {\r\n        strength: 5,\r\n        agility: 5,\r\n        endurance: 5,\r\n        perception: 5,\r\n        willpower: 5,\r\n        intelligence: 5,\r\n        skills: GetSkillList(),\r\n        techniques: []\r\n    });\r\n\r\n\r\n    let maxPoints = 1000;\r\n    let calculatedPointUse = fSum(character.strength) * 4\r\n        + fSum(character.agility) * 4\r\n        + fSum(character.endurance) * 4\r\n        + fSum(character.perception) * 4\r\n        + fSum(character.willpower) * 4\r\n        + fSum(character.intelligence) * 4\r\n        + character.skills.map(s => fSum(s.level)).reduce((a, b) => a + b, 0);\r\n\r\n    let hitpoints = character.strength + character.endurance * 2;\r\n\r\n    let mana = character.endurance + character.willpower * 2;\r\n\r\n    let damageBonusSmall = Math.floor(character.strength / 4);\r\n    let damageBonusMedium = Math.floor(character.strength / 3);\r\n    let damageBonusLarge = Math.floor(character.strength / 2);\r\n\r\n\r\n    return <Paper style={{ textAlign: 'left' }}>\r\n        <Grid container spacing={3} >\r\n            <Grid item xs={12} sm={6}>\r\n                Character points used {calculatedPointUse} / {maxPoints}\r\n                <Field label='strength' value={character.strength} onChange={n => dispatch({ action: 'strength', value: n })}></Field>\r\n                <Field label='agility' value={character.agility} onChange={n => dispatch({ action: 'agility', value: n })}></Field>\r\n                <Field label='endurance' value={character.endurance} onChange={n => dispatch({ action: 'endurance', value: n })}></Field>\r\n                <Field label='perception' value={character.perception} onChange={n => dispatch({ action: 'perception', value: n })}></Field>\r\n                <Field label='willpower' value={character.willpower} onChange={n => dispatch({ action: 'willpower', value: n })}></Field>\r\n                <Field label='intelligence' value={character.intelligence} onChange={n => dispatch({ action: 'intelligence', value: n })}></Field>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n                <Paper>Hit points: {hitpoints}</Paper>\r\n                <Paper>mana: {mana}</Paper>\r\n                <Paper>damage bonus small: {damageBonusSmall}</Paper>\r\n                <Paper>damage bonus medium: {damageBonusMedium}</Paper>\r\n                <Paper>damage bonus large: {damageBonusLarge}</Paper>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n                {character.skills.map(s => {\r\n                    let modifier: number = 0;\r\n                    switch (s.attribute) {\r\n                        case 'strength': modifier = character.strength; break;\r\n                        case 'agility': modifier = character.agility; break;\r\n                        case 'endurance': modifier = character.endurance; break;\r\n                        case 'perception': modifier = character.perception; break;\r\n                        case 'willpower': modifier = character.willpower; break;\r\n                        case 'intelligence': modifier = character.intelligence; break;\r\n                    }\r\n                    return <Field modifier={modifier} max={30} min={0} label={s.name + ' ' + s.attribute.substring(0,3).toUpperCase()} value={s.level} onChange={(n => dispatch({ action: 'skill', name: s.name, value: n }))}></Field>\r\n                })}\r\n            </Grid>\r\n        </Grid>\r\n    </Paper>;\r\n}\r\n\r\ninterface dispatcher {\r\n    action: string;\r\n    name?: string;\r\n    value: number;\r\n}\r\n\r\nconst useCharacter = (state: Character, action: dispatcher) => {\r\n    switch (action.action) {\r\n        case 'strength': return { ...state, strength: action.value };\r\n        case 'agility': return { ...state, agility: action.value };\r\n        case 'endurance': return { ...state, endurance: action.value };\r\n        case 'willpower': return { ...state, willpower: action.value };\r\n        case 'perception': return { ...state, perception: action.value };\r\n        case 'intelligence': return { ...state, intelligence: action.value };\r\n        case 'skill':\r\n            let r = {\r\n                ...state\r\n            };\r\n            r.skills[state.skills.findIndex(s => s.name === action.name)].level = action.value;\r\n            return r;\r\n    }\r\n    return state;\r\n}","export interface Skill {\r\n    name: string;\r\n    attribute: string | 'strength' | 'agility' | 'endurance' | 'perception' | 'willpower' | 'intelligence';\r\n    level: number;\r\n}\r\n\r\nexport const GetSkillList = (): Skill[] => {\r\n    return [\r\n        {\r\n            name: 'combat',\r\n            attribute: 'agility',\r\n            level:0\r\n        },\r\n        {\r\n            name: 'pilot',\r\n            attribute: 'perception',\r\n            level:0\r\n        },\r\n        {\r\n            name: 'spells',\r\n            attribute: 'intelligence',\r\n            level:0\r\n        },\r\n        {\r\n            name: 'investigation',\r\n            attribute: 'intelligence',\r\n            level:0\r\n        },\r\n        {\r\n            name: 'persuation',\r\n            attribute: 'intelligence',\r\n            level:0\r\n        },\r\n        {\r\n            name: 'intimidation',\r\n            attribute: 'willpower',\r\n            level:0\r\n        },\r\n        {\r\n            name: 'larceny',\r\n            attribute: 'agility',\r\n            level:0\r\n        },\r\n        {\r\n            name: 'stealth',\r\n            attribute: 'agility',\r\n            level:0\r\n        },\r\n        {\r\n            name: 'survival',\r\n            attribute: 'intelligence',\r\n            level:0\r\n        },\r\n        {\r\n            name: 'science',\r\n            attribute: 'intelligence',\r\n            level:0\r\n        },\r\n        {\r\n            name: 'computer',\r\n            attribute: 'intelligence',\r\n            level:0\r\n        },\r\n        {\r\n            name: 'medicine',\r\n            attribute: 'intelligence',\r\n            level:0\r\n        },\r\n        {\r\n            name: 'surgery',\r\n            attribute: 'agility',\r\n            level:0\r\n        },\r\n        {\r\n            name: 'empathy',\r\n            attribute: 'perception',\r\n            level:0\r\n        },\r\n        {\r\n            name: 'subtrefuge',\r\n            attribute: 'perception',\r\n            level:0\r\n        },\r\n        {\r\n            name: 'athletics',\r\n            attribute: 'endurance',\r\n            level:0\r\n        },\r\n        {\r\n            name: 'acrobatics',\r\n            attribute: 'agility',\r\n            level:0\r\n        },\r\n        {\r\n            name: 'search',\r\n            attribute: 'perception',\r\n            level:0\r\n        },\r\n        {\r\n            name: 'slight of hand',\r\n            attribute: 'agility',\r\n            level:0\r\n        },\r\n    ].sort((a, b) => a.attribute < b.attribute ? -1 : 1);\r\n}","import React from 'react';\nimport {CharacterSheet} from './components/CharacterSheet';\nimport './App.css';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n     <CharacterSheet ></CharacterSheet>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}