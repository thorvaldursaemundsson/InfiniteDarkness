{"version":3,"sources":["components/Label.tsx","components/Field.tsx","components/Skills.tsx","components/Character.tsx","components/CharacterSheet.tsx","components/PlayerManual.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Label","children","style","display","minWidth","d10","min","max","Math","round","random","Field","label","value","onChange","modifier","enableDice","useState","results","setResults","viewChildren","setViewChildren","ma","undefined","mi","total","Paper","Button","onClick","GetSkillList","combat","pilot","spells","investigation","persuation","intimidation","larceny","stealth","survival","science","computer","medicine","surgery","empathy","subtrefuge","athletics","acrobatics","search","slightOfHand","sort","a","b","attribute","fSum","n","x","i","Character","copy","age","strength","agility","endurance","perception","willpower","intelligence","skills","techniques","this","map","s","level","reduce","p","getStartingPointsAvailable","floor","CharacterSheet","props","useReducer","useCharacter","initialCharacter","character","dispatch","textAlign","characterCallback","Grid","container","spacing","item","xs","sm","getCalculatedPointsUsed","getMaximumPointsAvailable","action","getExperienceMultiplier","getHitpoints","getMana","getDamageBonusSmall","getDamageBonusMedium","getDamageBonusLarge","name","substring","toUpperCase","description","state","r","findIndex","SkillSection","currentSkill","setCurrentSkill","skill","width","PlayerManual","padding","Conditional","shouldView","Menu","options","option","callback","App","viewMode","setViewMode","MainButton","className","DialogTitle","c","float","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d52fdc01.chunk.js","sourcesContent":["    import React from 'react';\r\n\r\nexport const Label: React.FC<{}> = ({children}) => {\r\n    return <label style={{display:'inline-block', minWidth:'140px'}}>{children}</label>;\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport { Paper, Button } from '@material-ui/core';\r\nimport { Label } from './Label';\r\n\r\ninterface FieldProps {\r\n    label: string;\r\n    value: number;\r\n    max?: number;\r\n    min?: number;\r\n    modifier?: number;\r\n    enableDice?: boolean;\r\n    onChange: (n: number) => void;\r\n}\r\n\r\n\r\nconst rand = (min: number, max: number) => {\r\n    return Math.round(Math.random() * (max - min) + min);\r\n};\r\n\r\nconst d10 = () => rand(1, 10);\r\n//results[0] + ' + ' + results[1] + ' ' + \r\nexport const Field: React.FC<FieldProps> = ({ label, value, onChange, max, min, modifier, enableDice, children }) => {\r\n    const [results, setResults] = useState([0, 0]);\r\n    const [viewChildren, setViewChildren] = useState(false);\r\n    let ma = max !== undefined ? max : 10;\r\n    let mi = min !== undefined ? min : 1;\r\n    let total = modifier !== undefined ? value + modifier : value;\r\n    enableDice = enableDice === undefined ? false : enableDice;\r\n    return <Paper>\r\n        <Label>{label}:</Label> <Label>{value} {modifier !== undefined ? ` | ${modifier} | ${total}` : null}</Label>\r\n        <Button onClick={() => onChange(ma <= value ? value : value + 1)}>+</Button>\r\n        <Button onClick={() => onChange(mi >= value ? value : value - 1)}>-</Button>\r\n        {enableDice ? <Button onClick={() => setResults([d10(), d10()])}>&</Button> : null}\r\n        {results[0] !== 0 ? `(${total}) + d10(${results[0]}) + d10(${results[1]}) = ${total + results[0] + results[1]}`\r\n            : null}\r\n            {children !== undefined ? viewChildren === true ? \r\n                <Paper><Button onClick={() => setViewChildren(false)}>X</Button>{children} </Paper>\r\n                : <Button onClick={() => setViewChildren(true)}>?</Button> \r\n            : null}\r\n    </Paper>\r\n}","import combat from './skills/combat.json';\r\nimport pilot from './skills/pilot.json';\r\nimport spells from './skills/spells.json';\r\nimport investigation from './skills/investigation.json';\r\nimport intimidation from './skills/intimidation.json';\r\nimport larceny from './skills/larceny.json';\r\nimport stealth from './skills/stealth.json';\r\nimport survival from './skills/survival.json';\r\nimport science from './skills/science.json';\r\nimport computer from './skills/computer.json';\r\nimport medicine from './skills/medicine.json';\r\nimport surgery from './skills/surgery.json';\r\nimport empathy from './skills/empathy.json';\r\nimport subtrefuge from './skills/subtrefuge.json';\r\nimport athletics from './skills/athletics.json';\r\nimport acrobatics from './skills/acrobatics.json';\r\nimport search from './skills/search.json';\r\nimport slightOfHand from './skills/slightOfHand.json';\r\nimport persuation from './skills/persuation.json';\r\n\r\n\r\nexport interface Skill {\r\n    name: string;\r\n    attribute: string | 'strength' | 'agility' | 'endurance' | 'perception' | 'willpower' | 'intelligence';\r\n    level: number;\r\n    description: string;\r\n}\r\nexport const GetSkillList = (): Skill[] => {\r\n    return [\r\n        { ...combat },\r\n        { ...pilot },\r\n        { ...spells },\r\n        { ...investigation },\r\n        { ...persuation },\r\n        { ...intimidation },\r\n        { ...larceny },\r\n        { ...stealth },\r\n        {  ...survival },\r\n        { ...science },\r\n        { ...computer },\r\n        { ...medicine },\r\n        { ...surgery },\r\n        { ...empathy },\r\n        { ...subtrefuge },\r\n        { ...athletics },\r\n        { ...acrobatics },\r\n        { ...search },\r\n        {  ...slightOfHand }\r\n    ].sort((a, b) => a.attribute < b.attribute ? -1 : 1);\r\n}","import { Skill, GetSkillList } from \"./Skills\";\r\n\r\ninterface Perk {\r\n    name: string;\r\n    bonus: string;\r\n    cost: number;\r\n}\r\n\r\nconst fSum = (n: number): number => {\r\n    let x = 0;\r\n    for (let i = 0; i <= n; i++) {\r\n        x += i;\r\n    }\r\n    return x;\r\n};\r\n\r\ninterface ICharacter {\r\n\r\n    age: number;\r\n    strength: number;\r\n    agility: number;\r\n    endurance: number;\r\n    perception: number;\r\n    willpower: number;\r\n    intelligence: number;\r\n    skills: Skill[];\r\n    techniques: Perk[];\r\n}\r\n\r\nexport class Character {\r\n    age: number;\r\n    strength: number;\r\n    agility: number;\r\n    endurance: number;\r\n    perception: number;\r\n    willpower: number;\r\n    intelligence: number;\r\n    skills: Skill[];\r\n    techniques: Perk[];\r\n    constructor(copy?: ICharacter) {\r\n        this.strength = (copy && copy.strength) || 5;\r\n        this.agility = (copy && copy.agility) || 5;\r\n        this.endurance = (copy && copy.endurance) || 5;\r\n        this.perception = (copy && copy.perception) || 5;\r\n        this.willpower = (copy && copy.willpower) || 5;\r\n        this.intelligence = (copy && copy.intelligence) || 5;\r\n        this.skills = (copy && copy.skills) || GetSkillList();\r\n        this.techniques = [];\r\n        this.age = (copy && copy.age) || 18;\r\n    }\r\n\r\n\r\n    public getCalculatedPointsUsed() {\r\n        return fSum(this.strength) * 4\r\n            + fSum(this.agility) * 4\r\n            + fSum(this.endurance) * 4\r\n            + fSum(this.perception) * 4\r\n            + fSum(this.willpower) * 4\r\n            + fSum(this.intelligence) * 4\r\n            + this.skills.map(s => fSum(s.level)).reduce((a, b) => a + b, 0);\r\n    }\r\n    public getStartingPointsAvailable() {\r\n        let p = 200;\r\n        p += Math.min(this.age, 18) * 20;\r\n        if (this.age > 18) p += Math.min(this.age - 18, 26 - 18) * 15;\r\n        if (this.age > 26) p += Math.min(this.age - 26, 40 - 26) * 10;\r\n        if (this.age > 40) p += Math.min(this.age - 40, 70 - 40) * 5;\r\n        return p;\r\n    }\r\n\r\n    public getMaximumPointsAvailable() {\r\n        return this.getStartingPointsAvailable() * 2;\r\n    }\r\n\r\n    public getExperienceMultiplier() {\r\n        if (this.age < 16) return 3;\r\n        if (this.age < 20) return 2.5;\r\n        if (this.age < 24) return 2;\r\n        if (this.age < 28) return 1.75;\r\n        if (this.age < 32) return 1.5;\r\n        if (this.age < 36) return 1.25;\r\n        return 1;\r\n    }\r\n\r\n    public getHitpoints() {\r\n        return this.strength + this.endurance * 2;\r\n    }\r\n\r\n    public getMana() {\r\n        return this.endurance + this.willpower * 2\r\n    }\r\n\r\n    public getDamageBonusSmall() {\r\n        return Math.floor(this.strength / 4);\r\n    }\r\n\r\n    public getDamageBonusMedium() {\r\n        return Math.floor(this.strength / 3);\r\n    }\r\n    public getDamageBonusLarge() {\r\n        return Math.floor(this.strength / 2);\r\n    }\r\n}","import React, {  useReducer } from 'react';\r\nimport { Field } from './Field';\r\nimport { Paper, Grid,Button } from '@material-ui/core';\r\nimport { Character } from './Character';\r\n\r\ninterface CharacterSheetProps {\r\n    initialCharacter: Character;\r\n    characterCallback:(c:Character) => void;\r\n}\r\n\r\nexport const CharacterSheet: React.FC<CharacterSheetProps> = (props) => {\r\n    const [character, dispatch] = useReducer(useCharacter, props.initialCharacter);\r\n\r\n    return <Paper style={{ textAlign: 'left' }}>\r\n        <Button onClick={() => props.characterCallback(character)}>exit</Button>\r\n        <Grid container spacing={3} >\r\n            <Grid item xs={12} sm={6}>\r\n                Character points used {character.getCalculatedPointsUsed()} / {character.getStartingPointsAvailable()} ({character.getMaximumPointsAvailable()})\r\n                <Field label='strength' value={character.strength} onChange={n => dispatch({ action: 'strength', value: n })}>Raw muscle strength</Field>\r\n                <Field label='agility' value={character.agility} onChange={n => dispatch({ action: 'agility', value: n })}>Steady hands, reflexes</Field>\r\n                <Field label='endurance' value={character.endurance} onChange={n => dispatch({ action: 'endurance', value: n })}>Ability to last long</Field>\r\n                <Field label='perception' value={character.perception} onChange={n => dispatch({ action: 'perception', value: n })}>eyesight, hearing, and how much you smell</Field>\r\n                <Field label='willpower' value={character.willpower} onChange={n => dispatch({ action: 'willpower', value: n })}>ability to say \"no\" when it's sooo good</Field>\r\n                <Field label='intelligence' value={character.intelligence} onChange={n => dispatch({ action: 'intelligence', value: n })}>big brainy boy</Field>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n                <Field label='age' max={80} min={15} value={character.age} onChange={n => dispatch({ action: 'age', value: n })}>Your age determines your starting, maximum experience, as well as experience multiplier</Field>\r\n                <Paper>Experience multiplier: {character.getExperienceMultiplier()}</Paper>\r\n                <Paper>Hit points: {character.getHitpoints()}</Paper>\r\n                <Paper>mana: {character.getMana()}</Paper>\r\n                <Paper>damage bonus small: {character.getDamageBonusSmall()}</Paper>\r\n                <Paper>damage bonus medium: {character.getDamageBonusMedium()}</Paper>\r\n                <Paper>damage bonus large: {character.getDamageBonusLarge()}</Paper>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n                {character.skills.map(s => {\r\n                    let modifier: number = 0;\r\n                    switch (s.attribute) {\r\n                        case 'strength': modifier = character.strength; break;\r\n                        case 'agility': modifier = character.agility; break;\r\n                        case 'endurance': modifier = character.endurance; break;\r\n                        case 'perception': modifier = character.perception; break;\r\n                        case 'willpower': modifier = character.willpower; break;\r\n                        case 'intelligence': modifier = character.intelligence; break;\r\n                    }\r\n                    return <Field\r\n                        enableDice={true}\r\n                        modifier={modifier}\r\n                        max={30}\r\n                        min={0}\r\n                        label={s.name + ' ' + s.attribute.substring(0, 3).toUpperCase()} \r\n                        value={s.level} \r\n                        onChange={(n => dispatch({ action: 'skill', name: s.name, value: n }))}>\r\n                           {s.description} \r\n                    </Field>\r\n                })}\r\n            </Grid>\r\n        </Grid>\r\n    </Paper>;\r\n}\r\n\r\ninterface dispatcher {\r\n    action: string;\r\n    name?: string;\r\n    value: number;\r\n}\r\n\r\nconst useCharacter = (state: Character, action: dispatcher): Character => {\r\n    switch (action.action) {\r\n        case 'strength': return new Character({ ...state, strength: action.value });\r\n        case 'agility': return new Character({ ...state, agility: action.value });\r\n        case 'endurance': return new Character({ ...state, endurance: action.value });\r\n        case 'willpower': return new Character({ ...state, willpower: action.value });\r\n        case 'perception': return new Character({ ...state, perception: action.value });\r\n        case 'intelligence': return new Character({ ...state, intelligence: action.value });\r\n        case 'age': return new Character({ ...state, age: action.value });\r\n        case 'skill':\r\n            let r = new Character({\r\n                ...state\r\n            });\r\n            r.skills[state.skills.findIndex(s => s.name === action.name)].level = action.value;\r\n            return r;\r\n    }\r\n    return state;\r\n}","import React, { useState } from 'react';\r\nimport { GetSkillList } from './Skills';\r\nimport { Button } from '@material-ui/core';\r\n\r\nconst PlayerManual: React.FC = () => {\r\n    return (<div style={{ textAlign: 'left', padding: '15px' }}>\r\n        <h1>Index</h1>\r\n        <ul>\r\n            <li>\r\n                How to make a character\r\n            </li>\r\n            <li>\r\n                Attributes\r\n            </li>\r\n            <li>\r\n                Skills\r\n            </li>\r\n            <li>\r\n                Perks\r\n            </li>\r\n        </ul>\r\n        <hr />\r\n        <div>\r\n            <h2>How to make a character</h2>\r\n            <h3>Step 1 - concept</h3>\r\n            <p>The first step is conceptual and mostly abstract, but will feed into the next steps. Begin by answering at least all of these questions.</p>\r\n            <h4>Where was my character born?</h4>\r\n            <h4>How old is my character currently?</h4>\r\n            <h4>What kind of upbringing did my character have?</h4>\r\n            <h4>How does my character's upbringing bias my character's point of view?</h4>\r\n            <h4>What major events happened in my characters life?</h4>\r\n            <h4>How did those events shape my characters personality?</h4>\r\n            <h4>What lessons and skills did my character learn from that?</h4>\r\n            <p>There may be more questions you want to ask depending on your answers.</p>\r\n            <h3>Step 2 - outlining your character</h3>\r\n            <p>Based on the answer in step 1...</p>\r\n            <h4>Adjust your age</h4>\r\n            <p>The older you start at the more character points (applicable experience) you start with.</p>\r\n            <p>Finally the younger you are the bigger your multiplier, whenever you gain character points in game you multiply them by this.</p>\r\n            <p>You also have a maximum character point ceiling, this is based off your current age and you can not exceed it</p>\r\n            <h4>Adjust your attributes</h4>\r\n            <p>They are as expensive as they are valuable. Choose with care. Save points for skills and perks</p>\r\n            <h4>Select between 2 and 4 \"main skills\" and as many additional secondary skills as you need.</h4>\r\n            <p>You'll want to put points into your main skills, note that the cost increases rapidly.\r\n                The cost for each step is what you have + 1\r\n                Save some character points for perks</p>\r\n            <p>Also notice that your attributes play a part in your skill total,\r\n                for example pilot is a perception skill,\r\n                when you roll for pilot you roll 2d10 + pilot + perception</p>\r\n            <h3>Step 3 - choose your perks</h3>\r\n            <p>Perks are specializations, they either grant new capabilities under a skill or make a specific skill usage more powerful/likely to succeed (skills have multiple uses)</p>\r\n            <p>Note that perks often come with skill requirements, and for skills that you don't put points into are often not worth taking.</p>\r\n        </div>\r\n        <hr />\r\n        <SkillSection />\r\n    </div>);\r\n}\r\n\r\nconst SkillSection = () => {\r\n    const [currentSkill, setCurrentSkill] = useState('');\r\n    return (<div>\r\n        <h2>Skills</h2>\r\n        {GetSkillList().map(skill => {\r\n            return (<div><h3><span style={{ display: 'inline-block', width: '150px' }}>{skill.name}</span> {currentSkill !== skill.name ?\r\n                <Button onClick={() => setCurrentSkill(skill.name)}>?</Button> :\r\n                <Button onClick={() => setCurrentSkill('')}>X</Button>} </h3>\r\n                {currentSkill === skill.name ? <div>{skill.description}</div> : null}</div>);\r\n        })}\r\n    </div>);\r\n}\r\n\r\nexport default PlayerManual;","import React, { useState } from 'react';\nimport { CharacterSheet } from './components/CharacterSheet';\nimport './App.css';\nimport { Character } from './components/Character';\nimport { Button, DialogTitle } from '@material-ui/core';\nimport PlayerManual from './components/PlayerManual';\n\nconst App: React.FC = () => {\n  const [viewMode, setViewMode] = useState('main');\n  let character = new Character();\n  let options = ['view character sheet',\n    'player manual',\n    'game master',\n    'world & lore',\n    'skills & perks',\n    'about'];\n  const MainButton = () => <Button onClick={() => setViewMode('main')}>X</Button>;\n  return (\n    <div className=\"App\">\n      <Conditional shouldView={viewMode === 'main'}>\n        <DialogTitle>Infinite Darkness</DialogTitle>\n        <Menu callback={(option) => setViewMode(option)} options={options} />\n      </Conditional>\n      <Conditional shouldView={viewMode === 'view character sheet'}>\n        <CharacterSheet characterCallback={(c) => { character = c; setViewMode('main'); }} initialCharacter={character} />\n      </Conditional>\n      <Conditional shouldView={viewMode === 'player manual'}>\n        <DialogTitle>Player manual</DialogTitle>\n        <MainButton />\n        <PlayerManual />\n      </Conditional>\n      <Conditional shouldView={viewMode === 'game master'}>\n        <DialogTitle>Game master</DialogTitle>\n        This page will contain information on how to run a game\n        <MainButton />\n      </Conditional>\n      <Conditional shouldView={viewMode === 'world & lore'}>\n        <DialogTitle>World and lore</DialogTitle>\n        This page will contain information about the world, the lore, factions, monsters, aliens, etc\n        <MainButton />\n      </Conditional>\n      <Conditional shouldView={viewMode === 'skills & perks'}>\n        <DialogTitle>About</DialogTitle>\n        This page will contain information about all skills and perks, how to use them and how to make custom skills/perks\n        <MainButton />\n      </Conditional>\n      <Conditional shouldView={viewMode === 'about'}>\n        <div style={{textAlign:'left', padding: '50px'}}>\n          <h2>About</h2>\n          <h3>This is a work in progress</h3>\n          <p>Author: Thorvaldur Saemundsson</p>\n          <p>Technology: ReactJS, github pages</p>\n          <p>Project: Infinite Darkness, a sci-fi and fantasy game</p>\n          <p>Please formulate any complaints and suggestions in the form of a pull request ;)</p>\n          <span style={{float:'right', fontSize:'11px'}}>Copyright Thorvaldur Saemundsson</span>\n        </div>\n        <MainButton />\n      </Conditional>\n    </div>\n  );\n}\ninterface ItemProp {\n  shouldView: boolean;\n}\n\nconst Conditional: React.FC<ItemProp> = ({ shouldView, children }) => {\n  if (shouldView) return <div>{children}</div>;\n  else return null;\n}\n\ninterface MenuProps {\n  callback: (option: string) => void;\n  options: string[];\n}\n\nconst Menu: React.FC<MenuProps> = (props) => {\n  return <div>{props.options.map(option => <Button onClick={() => props.callback(option)}>{option}</Button>)}</div>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}