{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/inherits.js","components/gamemaster/Battlemat.tsx","views/Battleview.tsx"],"names":["_possibleConstructorReturn","self","call","_getPrototypeOf","o","Object","setPrototypeOf","getPrototypeOf","__proto__","_setPrototypeOf","p","_inherits","subClass","superClass","TypeError","prototype","create","constructor","value","writable","configurable","Battlemap","props","mount","hexagonAngle","sideLength","hexHeight","hexRadius","hexRectangleHeight","hexRectangleWidth","state","outputData","currentIcons","initialIcons","isVisible","currentEdit","undefined","this","length","setState","boardHeight","boardWidth","map","char","onClick","symbol","onChange","i","editIcon","icon","icons","index","id","sequence","speed","forceUpdate","showHexmat","showEditor","React","Component","inputCss","width","IconEditor","useState","setSymbol","setSpeed","setSequence","type","style","e","target","parseInt","Hexmat","initializeBoard","canvas","iconAtHex","hasmoved","mouseStartX","mouseStartY","mouseEndX","mouseEndY","addEventListener","mouseEvent","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","Math","floor","screenX","screenY","ctx","getContext","clearRect","fillStyle","strokeStyle","lineWidth","drawBoard","drawHexagon","xR","yR","distanceBetweenPositions","startX","startY","drawIconsOnBoard","findIconAtHex","ic","x1","y1","x2","y2","dx","abs","dy","z1","z2","setVariables","ix","iy","sin","cos","canvasContext","getIconPosition","font","fillText","height","convertXyToXYZ","fill","str","beginPath","moveTo","lineTo","closePath","stroke","background","overflow","onContextMenu","preventDefault","ref","sort","a","b","alpha","randId","rand","counter","random","Battleview","setWidth","setHeight","currentAddingIcon","setCurrentAddingIcon","setIcons","title","console","log"],"mappings":"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","file":"static/js/5.e85d520a.chunk.js","sourcesContent":["import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import React, { CSSProperties, useState } from 'react';\r\n\r\ninterface IBattlemapState {\r\n    outputData: string;\r\n    currentIcons: Icon[];\r\n}\r\n\r\ninterface IBattlemapWrapperState extends IBattlemapState {\r\n    isVisible: boolean;\r\n    currentEdit: Icon | undefined;\r\n}\r\n\r\ninterface IBattlematProps {\r\n    boardHeight: number;\r\n    boardWidth: number;\r\n    initialIcons: Icon[];\r\n}\r\n\r\ninterface Icon {\r\n    symbol: string;\r\n    startX: number;\r\n    startY: number;\r\n    id: string;\r\n    sequence: number;\r\n    speed: number;\r\n}\r\n\r\n\r\nexport default class Battlemap extends React.Component<IBattlematProps, IBattlemapWrapperState> {\r\n    mount: HTMLCanvasElement | undefined | null;\r\n    hexagonAngle: number = 0;\r\n    sideLength: number = 25;\r\n    hexHeight: number = 0;\r\n    hexRadius: number = 0;\r\n    hexRectangleHeight: number = 0;\r\n    hexRectangleWidth: number = 0;\r\n\r\n    constructor(props: Readonly<IBattlematProps>) {\r\n        super(props);\r\n        this.state = {\r\n            outputData: ':)',\r\n            currentIcons: props.initialIcons,\r\n            isVisible: false,\r\n            currentEdit: undefined,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.initialIcons.length !== this.state.currentIcons.length)\r\n            this.setState({ currentIcons: this.props.initialIcons });\r\n    }\r\n\r\n    showHexmat() {\r\n        if (this.state.isVisible === false) return null;\r\n        return <Hexmat initialIcons={this.state.currentIcons} boardHeight={this.props.boardHeight} boardWidth={this.props.boardWidth} />;\r\n    }\r\n\r\n    showEditor() {\r\n        if (this.state.isVisible !== false) return null;\r\n\r\n        return <><h5>Character editor</h5><ul>\r\n            {this.state.currentIcons.map(char => {\r\n                return <li onClick={() => this.setState({ currentEdit: char })}>{char.symbol}</li>\r\n            })}\r\n        </ul>\r\n            {this.state.currentEdit !== undefined ? <IconEditor onChange={(i) => this.editIcon(i)} icon={this.state.currentEdit} /> : null}\r\n        </>;\r\n    }\r\n\r\n    editIcon(i: Icon) {\r\n        let icons = this.state.currentIcons;\r\n        for (var index in icons) {\r\n            var icon = icons[index];\r\n            if (icon.id === i.id) {\r\n                icon.sequence = i.sequence;\r\n                icon.speed = i.speed;\r\n                icon.symbol = i.symbol;\r\n            }\r\n        }\r\n        this.setState({ currentIcons: icons, currentEdit: undefined });\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <button onClick={() => { this.setState({ isVisible: !this.state.isVisible }); this.forceUpdate(); }}>show</button>\r\n            {this.showHexmat()}\r\n            {this.showEditor()}\r\n        </>;\r\n    }\r\n}\r\n\r\ninterface IconEditorProps {\r\n    icon: Icon;\r\n    onChange: (i: Icon) => void;\r\n}\r\nconst inputCss: CSSProperties = {\r\n    width: '60px'\r\n};\r\nconst IconEditor: React.FC<IconEditorProps> = ({ icon, onChange }) => {\r\n    const [symbol, setSymbol] = useState(icon.symbol);\r\n    const [speed, setSpeed] = useState(icon.speed);\r\n    const [sequence, setSequence] = useState(icon.sequence);\r\n    return <>\r\n        Symbol: <input type='text' style={inputCss} value={symbol} onChange={(e) => setSymbol(e.target.value)} /><br />\r\n        Speed: <input type='text' style={inputCss} value={speed} onChange={(e) => setSpeed(parseInt(e.target.value))} /><br />\r\n        Sequence: <input type='text' style={inputCss} value={sequence} onChange={(e) => setSequence(parseInt(e.target.value))} /><br />\r\n        <button onClick={() => onChange({ ...icon, symbol: symbol, speed: speed, sequence: sequence })}>Save</button>\r\n\r\n    </>;\r\n}\r\n\r\nclass Hexmat extends React.Component<IBattlematProps, IBattlemapState> {\r\n\r\n    mount: HTMLCanvasElement | undefined | null;\r\n    hexagonAngle: number = 0;\r\n    sideLength: number = 25;\r\n    hexHeight: number = 0;\r\n    hexRadius: number = 0;\r\n    hexRectangleHeight: number = 0;\r\n    hexRectangleWidth: number = 0;\r\n\r\n    constructor(props: Readonly<IBattlematProps>) {\r\n        super(props);\r\n        this.state = {\r\n            outputData: ':)',\r\n            currentIcons: props.initialIcons,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.initializeBoard();\r\n\r\n        var canvas = this.mount;\r\n        if (canvas !== null && canvas !== undefined) {\r\n            let hasmoved = false;\r\n            let mouseStartX = 0;\r\n            let mouseStartY = 0;\r\n            let mouseEndX = 0;\r\n            let mouseEndY = 0;\r\n            let iconAtHex: Icon | undefined;\r\n            canvas.addEventListener(\"mousemove\", (mouseEvent) => {\r\n                var canvas = this.mount;\r\n                if (canvas !== null && canvas !== undefined) {\r\n                    const rect = canvas.getBoundingClientRect();\r\n                    const x = mouseEvent.clientX - rect.left;\r\n                    const y = mouseEvent.clientY - rect.top;\r\n                    mouseEndX = Math.floor(y / (this.hexHeight + this.sideLength));\r\n                    mouseEndY = Math.floor((x - (mouseEndX % 2) * this.hexRadius) / this.hexRectangleWidth);\r\n\r\n                    const screenX = mouseEndY * this.hexRectangleWidth + ((mouseEndX % 2) * this.hexRadius);\r\n                    const screenY = mouseEndX * (this.hexHeight + this.sideLength);\r\n\r\n                    var ctx = canvas.getContext('2d');\r\n                    if (ctx === null) return;\r\n                    ctx.clearRect(0, 0, this.props.boardWidth * 2 * this.sideLength, this.props.boardHeight * 2 * this.sideLength);\r\n\r\n\r\n                    ctx.fillStyle = \"#000000\";\r\n                    ctx.strokeStyle = \"#666666\";\r\n                    ctx.lineWidth = 1;\r\n                    this.drawBoard(ctx, this.props.boardWidth, this.props.boardHeight);\r\n\r\n                    if (mouseEndX >= 0 && mouseEndX < this.props.boardWidth && mouseEndY >= 0 && mouseEndY < this.props.boardHeight && ctx !== undefined) {\r\n                        ctx.strokeStyle = \"#FF0000\";\r\n                        ctx.lineWidth = 3;\r\n                        this.drawHexagon(ctx, screenX, screenY, false);\r\n                        ctx.strokeStyle = \"#666666\";\r\n                        ctx.lineWidth = 1;\r\n                    }\r\n                    if (iconAtHex !== undefined && ctx !== undefined) {\r\n                        for (var xR = 0; xR < this.props.boardWidth; ++xR) {\r\n                            for (var yR = 0; yR < this.props.boardHeight; ++yR) {\r\n                                if (this.distanceBetweenPositions(xR, yR, iconAtHex.startX, iconAtHex.startY) <= iconAtHex.speed) {\r\n                                    ctx.fillStyle = \"#9999FF\";\r\n                                    this.drawHexagon(\r\n                                        ctx,\r\n                                        xR * this.hexRectangleWidth + ((yR % 2) * this.hexRadius),\r\n                                        yR * (this.sideLength + this.hexHeight),\r\n                                        true//, `${x};${y}`\r\n                                    );\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    this.drawIconsOnBoard(ctx);\r\n                    hasmoved = true;\r\n                }\r\n            });\r\n\r\n            canvas.addEventListener(\"mousedown\", (mouseEvent) => {\r\n                hasmoved = false;\r\n                if (canvas !== null && canvas !== undefined) {\r\n                    const rect = canvas.getBoundingClientRect();\r\n                    const x = mouseEvent.clientX - rect.left;\r\n                    const y = mouseEvent.clientY - rect.top;\r\n                    mouseStartY = Math.floor(y / (this.hexHeight + this.sideLength));\r\n                    mouseStartX = Math.floor((x - (mouseStartY % 2) * this.hexRadius) / this.hexRectangleWidth);\r\n                    iconAtHex = this.findIconAtHex(mouseStartX, mouseStartY);\r\n                }\r\n            });\r\n            canvas.addEventListener(\"mouseup\", () => {\r\n                if (iconAtHex !== undefined && hasmoved === true) {\r\n                    let icons = this.state.currentIcons;\r\n                    for (var index in icons) {\r\n                        var ic = icons[index];\r\n                        if (ic.id === iconAtHex.id) {\r\n                            ic.startY = mouseEndX;\r\n                            ic.startX = mouseEndY;\r\n                            break;\r\n                        }\r\n                    }\r\n                    this.setState({ currentIcons: icons });\r\n                    this.initializeBoard();\r\n                }\r\n\r\n                iconAtHex = undefined;\r\n                hasmoved = false;\r\n            });\r\n            canvas.addEventListener(\"mouseleave\", () => {\r\n                iconAtHex = undefined;\r\n            });\r\n        }\r\n    }\r\n\r\n    distanceBetweenPositions(x1: number, y1: number, x2: number, y2: number) {\r\n        const dx = Math.abs(x1 - x2);\r\n        const dy = Math.abs(y1 - y2);\r\n        const z1 = 0 - x1 - y1;\r\n        const z2 = 0 - x2 - y2;\r\n        const dz = Math.abs(z1 - z2);\r\n\r\n        return dx + dy;\r\n    }\r\n\r\n    getIconPosition(icon: Icon) {\r\n        var x = this.hexRadius * 2 * (icon.startX + .25) + (icon.startY % 2 * this.hexRectangleWidth / 2);\r\n        var y = this.hexRectangleHeight * 0.75 * (icon.startY + 0) + this.hexRectangleHeight / 2;\r\n\r\n        return { x: x, y: y };\r\n    }\r\n    componentDidUpdate() {\r\n        if (this.props.initialIcons.length !== this.state.currentIcons.length)\r\n            this.setState({ currentIcons: this.props.initialIcons });\r\n        const canvas = this.mount;\r\n        if (canvas === null || canvas === undefined) {\r\n            return;\r\n        }\r\n        var ctx = canvas.getContext('2d');\r\n        if (ctx === null) return;\r\n        this.initializeBoard();\r\n    }\r\n\r\n    initializeBoard() {\r\n        this.setVariables();\r\n        const canvas = this.mount;\r\n        if (canvas === null || canvas === undefined) {\r\n            return;\r\n        }\r\n        var ctx = canvas.getContext('2d');\r\n        if (ctx === null) return;\r\n        ctx.clearRect(0, 0, this.props.boardWidth * 2 * this.sideLength, this.props.boardHeight * 2 * this.sideLength);\r\n\r\n\r\n        ctx.fillStyle = \"#000000\";\r\n        ctx.strokeStyle = \"#666666\";\r\n        ctx.lineWidth = 1;\r\n        this.drawIconsOnBoard(ctx);\r\n        this.drawBoard(ctx, this.props.boardWidth, this.props.boardHeight);\r\n        return ctx;\r\n    }\r\n    findIconAtHex(x: number, y: number): Icon | undefined {\r\n        for (var index in this.state.currentIcons) {\r\n            var icon = this.state.currentIcons[index];\r\n            var ix = icon.startX;\r\n            var iy = icon.startY;\r\n            if (x === ix && y === iy) return icon;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    setVariables() {\r\n        this.hexagonAngle = 0.523598776; // 30 degrees in radians\r\n        this.hexHeight = Math.sin(this.hexagonAngle) * this.sideLength;\r\n        this.hexRadius = Math.cos(this.hexagonAngle) * this.sideLength;\r\n        this.hexRectangleHeight = this.sideLength + 2 * this.hexHeight;\r\n        this.hexRectangleWidth = 2 * this.hexRadius;\r\n    }\r\n\r\n    drawIconsOnBoard(canvasContext: CanvasRenderingContext2D) {\r\n        for (var index in this.state.currentIcons) {\r\n            var icon = this.state.currentIcons[index];\r\n\r\n            const { x, y } = this.getIconPosition(icon);\r\n\r\n            canvasContext.font = \"11px arial\";\r\n            canvasContext.fillStyle = \"black\";\r\n            canvasContext.fillText(`${icon.symbol}`, x, y);\r\n        }\r\n    }\r\n\r\n    convertXyToXYZ(x: number, y: number):string {\r\n        return \"\";\r\n    }\r\n\r\n    drawBoard(ctx: CanvasRenderingContext2D, width: number, height: number) {\r\n        for (var x = 0; x < width; ++x) {\r\n            for (var y = 0; y < height; ++y) {\r\n                this.drawHexagon(\r\n                    ctx,\r\n                    x * this.hexRectangleWidth + ((y % 2) * this.hexRadius),\r\n                    y * (this.sideLength + this.hexHeight),\r\n                    false, this.convertXyToXYZ(x,y)\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    drawHexagon(canvasContext: CanvasRenderingContext2D, x: number, y: number, fill: boolean, str: string = '') {\r\n        canvasContext.beginPath();\r\n        canvasContext.moveTo(x + this.hexRadius, y);\r\n        canvasContext.lineTo(x + this.hexRectangleWidth, y + this.hexHeight);\r\n        canvasContext.lineTo(x + this.hexRectangleWidth, y + this.hexHeight + this.sideLength);\r\n        canvasContext.lineTo(x + this.hexRadius, y + this.hexRectangleHeight);\r\n        canvasContext.lineTo(x, y + this.sideLength + this.hexHeight);\r\n        canvasContext.lineTo(x, y + this.hexHeight);\r\n        canvasContext.closePath();\r\n\r\n        if (str !== '') {\r\n            canvasContext.fillStyle = '#CCCCCC';\r\n            canvasContext.fillText(str, x + this.hexRadius / 2, y + this.hexRadius * 1.5);\r\n        }\r\n        if (fill) {\r\n            canvasContext.fill();\r\n        }\r\n        canvasContext.stroke();\r\n    }\r\n\r\n    render() {\r\n        return <table ><tbody>\r\n            <tr><td>\r\n                <div style={{ background: 'white', width: '650px', height: '600px', overflow: 'scroll' }}>\r\n                    <canvas height={this.props.boardHeight * this.sideLength * 1.5} width={this.props.boardWidth * this.sideLength * 1.8} onContextMenu={(e) => e.preventDefault()} ref={ref => (this.mount = ref)}></canvas>\r\n                </div></td>\r\n                <td>\r\n                    <ul>\r\n                        {this.state.currentIcons.sort((a, b) => b.sequence - a.sequence).map(i => {\r\n                            return <li>{i.symbol}: {i.sequence}</li>\r\n                        })}\r\n                    </ul>\r\n                </td>\r\n            </tr></tbody></table>;\r\n    }\r\n}","import { CSSProperties } from '@material-ui/core/styles/withStyles';\r\nimport React, { useState } from 'react';\r\nimport Battlemap from '../components/gamemaster/Battlemat';\r\n\r\nconst inputCss: CSSProperties = {\r\n    width: '60px'\r\n};\r\n\r\ninterface Icon {\r\n    symbol: string;\r\n    startX: number;\r\n    startY: number;\r\n    id: string;\r\n    sequence: number;\r\n    speed: number;\r\n}\r\nconst alpha = 'qwertyuiopasdfghjklzxcvbnm';\r\nconst randId = () => {\r\n    let rand = '';\r\n    for (var counter = 0; counter < 10; counter++) {\r\n        rand += alpha[Math.floor(Math.random() * alpha.length)];\r\n    }\r\n    return rand;\r\n}\r\n\r\nconst Battleview: React.FC = () => {\r\n    const [width, setWidth] = useState(18);\r\n    const [height, setHeight] = useState(15);\r\n    const [currentAddingIcon, setCurrentAddingIcon] = useState('');\r\n    const [icons, setIcons] = useState<Icon[]>([]);\r\n\r\n\r\n\r\n    const addIcon = () => {\r\n        setIcons([...icons, { symbol: currentAddingIcon, startX: icons.length, startY: 0, sequence: 0, speed: 0, id: randId() }]);\r\n        setCurrentAddingIcon('');\r\n        console.log({ icons });\r\n    };\r\n\r\n    return <>\r\n        <input type='text' title='width' style={inputCss} value={width} onChange={(e) => setWidth(parseInt(e.target.value))} />\r\n        <input type='text' title='height' style={inputCss} value={height} onChange={(e) => setHeight(parseInt(e.target.value))} /> |\r\n        <input type='text' title='add icon' style={inputCss} value={currentAddingIcon} onChange={(e) => setCurrentAddingIcon(e.target.value)} />\r\n        <button onClick={() => addIcon()} >Add</button>\r\n\r\n        <br />\r\n        <Battlemap initialIcons={icons} boardHeight={height} boardWidth={width} />\r\n    </>;\r\n}\r\n\r\n\r\nexport default Battleview;"],"sourceRoot":""}