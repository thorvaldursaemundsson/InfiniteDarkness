{"version":3,"sources":["components/Label.tsx","components/Field.tsx","components/Skills.tsx","components/Character.tsx","components/Perks.tsx","components/CharacterSheet.tsx","components/PlayerManual.tsx","components/SkillPerkManual.tsx","components/WorldAndLore.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Label","children","style","display","minWidth","d10","min","max","Math","round","random","Field","label","value","onChange","modifier","enableDice","useState","results","setResults","viewChildren","setViewChildren","ma","undefined","mi","total","Paper","className","Button","size","variant","onClick","GetSkillList","combat","pilot","spells","investigation","persuation","intimidation","larceny","stealth","survival","science","computer","medicine","surgery","empathy","subtrefuge","athletics","acrobatics","search","slightOfHand","sort","a","b","attribute","fSum","n","x","i","Character","copy","age","strength","agility","endurance","perception","willpower","intelligence","skills","perks","this","perkCost","length","map","p","cost","reduce","s","level","getStartingPointsAvailable","floor","GetPerkList","gun1","gun2","gun3","gun4","sortPerk","prevPerk","nextPerk","skill","CharacterSheet","props","useReducer","useCharacter","initialCharacter","character","dispatch","charJSON","setCharJSON","perksList","textAlign","characterCallback","json","JSON","stringify","makeJSONText","Grid","container","spacing","item","xs","sm","getCalculatedPointsUsed","getMaximumPointsAvailable","action","getExperienceMultiplier","getHitpoints","getMana","getDamageBonusSmall","getDamageBonusMedium","getDamageBonusLarge","name","substring","toUpperCase","description","filter","perkToAdd","perk","state","r","findIndex","push","pta","PlayerManual","SkillSection","currentSkill","setCurrentSkill","width","PerkSection","currentPerk","setCurrentPerk","SkillPerkManual","WorldAndLore","Conditional","shouldView","padding","Menu","options","option","callback","App","viewMode","setViewMode","setCharacter","MainButton","DialogTitle","console","info","charData","prompt","c","parse","log","error","loadCharacter","float","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.27a7fcec.chunk.js","sourcesContent":["    import React from 'react';\r\n\r\nexport const Label: React.FC<{}> = ({children}) => {\r\n    return <label style={{display:'inline-block', minWidth:'140px'}}>{children}</label>;\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport { Paper, Button } from '@material-ui/core';\r\nimport { Label } from './Label';\r\n\r\ninterface FieldProps {\r\n    label: string;\r\n    value: number;\r\n    max?: number;\r\n    min?: number;\r\n    modifier?: number;\r\n    enableDice?: boolean;\r\n    onChange: (n: number) => void;\r\n}\r\n\r\n\r\nconst rand = (min: number, max: number) => {\r\n    return Math.round(Math.random() * (max - min) + min);\r\n};\r\n\r\nconst d10 = () => rand(1, 10);\r\nexport const Field: React.FC<FieldProps> = ({ label, value, onChange, max, min, modifier, enableDice, children }) => {\r\n    const [results, setResults] = useState([0, 0]);\r\n    const [viewChildren, setViewChildren] = useState(false);\r\n    let ma = max !== undefined ? max : 10;\r\n    let mi = min !== undefined ? min : 1;\r\n    let total = modifier !== undefined ? value + modifier : value;\r\n    enableDice = enableDice === undefined ? false : enableDice;\r\n    return <Paper className=\"extraPadding\">\r\n        <Label>{label}:</Label> <Label>{value} {modifier !== undefined ? ` | ${modifier} | ${total}` : null}</Label>\r\n        <Button size=\"small\" variant=\"contained\" onClick={() => onChange(ma <= value ? value : value + 1)}>+</Button>\r\n        <Button size=\"small\" variant=\"contained\" onClick={() => onChange(mi >= value ? value : value - 1)}>-</Button>\r\n        {enableDice ? <Button  size=\"small\" variant=\"contained\" onClick={() => setResults([d10(), d10()])}>&</Button> : null}\r\n        {results[0] !== 0 ? `(${total}) + d10(${results[0]}) + d10(${results[1]}) = ${total + results[0] + results[1]}`\r\n            : null}\r\n            {children !== undefined ? viewChildren === true ? \r\n                <Paper><Button size=\"small\" variant=\"contained\"  onClick={() => setViewChildren(false)}>X</Button>{children} </Paper>\r\n                : <Button size=\"small\" variant=\"contained\"  onClick={() => setViewChildren(true)}>?</Button> \r\n            : null}\r\n    </Paper>\r\n}","import combat from './skills/combat.json';\r\nimport pilot from './skills/pilot.json';\r\nimport spells from './skills/spells.json';\r\nimport investigation from './skills/investigation.json';\r\nimport intimidation from './skills/intimidation.json';\r\nimport larceny from './skills/larceny.json';\r\nimport stealth from './skills/stealth.json';\r\nimport survival from './skills/survival.json';\r\nimport science from './skills/science.json';\r\nimport computer from './skills/computer.json';\r\nimport medicine from './skills/medicine.json';\r\nimport surgery from './skills/surgery.json';\r\nimport empathy from './skills/empathy.json';\r\nimport subtrefuge from './skills/subtrefuge.json';\r\nimport athletics from './skills/athletics.json';\r\nimport acrobatics from './skills/acrobatics.json';\r\nimport search from './skills/search.json';\r\nimport slightOfHand from './skills/slightOfHand.json';\r\nimport persuation from './skills/persuation.json';\r\n\r\n\r\nexport interface Skill {\r\n    name: string;\r\n    attribute: string | 'strength' | 'agility' | 'endurance' | 'perception' | 'willpower' | 'intelligence';\r\n    level: number;\r\n    description: string;\r\n}\r\nexport const GetSkillList = (): Skill[] => {\r\n    return [\r\n        { ...combat },\r\n        { ...pilot },\r\n        { ...spells },\r\n        { ...investigation },\r\n        { ...persuation },\r\n        { ...intimidation },\r\n        { ...larceny },\r\n        { ...stealth },\r\n        {  ...survival },\r\n        { ...science },\r\n        { ...computer },\r\n        { ...medicine },\r\n        { ...surgery },\r\n        { ...empathy },\r\n        { ...subtrefuge },\r\n        { ...athletics },\r\n        { ...acrobatics },\r\n        { ...search },\r\n        {  ...slightOfHand }\r\n    ].sort((a, b) => a.attribute < b.attribute ? -1 : 1);\r\n}","import { Skill, GetSkillList } from \"./Skills\";\r\nimport { Perk } from './Perks';\r\n\r\nconst fSum = (n: number): number => {\r\n    let x = 0;\r\n    for (let i = 0; i <= n; i++) {\r\n        x += i;\r\n    }\r\n    return x;\r\n};\r\n\r\nexport interface ICharacter {\r\n\r\n    age: number;\r\n    strength: number;\r\n    agility: number;\r\n    endurance: number;\r\n    perception: number;\r\n    willpower: number;\r\n    intelligence: number;\r\n    skills: Skill[];\r\n    perks: Perk[];\r\n}\r\n\r\nexport class Character {\r\n    age: number;\r\n    strength: number;\r\n    agility: number;\r\n    endurance: number;\r\n    perception: number;\r\n    willpower: number;\r\n    intelligence: number;\r\n    skills: Skill[];\r\n    perks: Perk[];\r\n    constructor(copy?: ICharacter) {\r\n        this.strength = (copy && copy.strength) || 4;\r\n        this.agility = (copy && copy.agility) || 4;\r\n        this.endurance = (copy && copy.endurance) || 4;\r\n        this.perception = (copy && copy.perception) || 4;\r\n        this.willpower = (copy && copy.willpower) || 4;\r\n        this.intelligence = (copy && copy.intelligence) || 4;\r\n        this.skills = (copy && copy.skills) || GetSkillList();\r\n        if (copy !== undefined && copy.perks !== undefined) this.perks = copy.perks;\r\n        else this.perks = [];\r\n        this.age = (copy && copy.age) || 24;\r\n    }\r\n\r\n\r\n    public getCalculatedPointsUsed() {\r\n        const perkCost = this.perks.length > 0 ? this.perks.map(p=>p.cost).reduce((a,b) => a+b) : 0;\r\n        return fSum(this.strength) * 4\r\n            + fSum(this.agility) * 4\r\n            + fSum(this.endurance) * 4\r\n            + fSum(this.perception) * 4\r\n            + fSum(this.willpower) * 4\r\n            + fSum(this.intelligence) * 4\r\n            + this.skills.map(s => fSum(s.level)).reduce((a, b) => a + b, 0)\r\n            + perkCost;\r\n    }\r\n    public getStartingPointsAvailable() {\r\n        let p = 300;\r\n        p += Math.min(this.age, 18) * 16;\r\n        if (this.age > 18) p += Math.min(this.age - 18, 26 - 18) * 12;\r\n        if (this.age > 26) p += Math.min(this.age - 26, 40 - 26) * 8;\r\n        if (this.age > 40) p += Math.min(this.age - 40, 70 - 40) * 4;\r\n        return p;\r\n    }\r\n\r\n    public getMaximumPointsAvailable() {\r\n        return this.getStartingPointsAvailable() * 2;\r\n    }\r\n\r\n    public getExperienceMultiplier() {\r\n        if (this.age < 16) return 3;\r\n        if (this.age < 20) return 2.5;\r\n        if (this.age < 24) return 2;\r\n        if (this.age < 28) return 1.75;\r\n        if (this.age < 32) return 1.5;\r\n        if (this.age < 36) return 1.25;\r\n        return 1;\r\n    }\r\n\r\n    public getHitpoints() {\r\n        return this.strength + this.endurance * 2;\r\n    }\r\n\r\n    public getMana() {\r\n        return this.endurance + this.willpower * 2\r\n    }\r\n\r\n    public getDamageBonusSmall() {\r\n        return Math.floor(this.strength / 4);\r\n    }\r\n\r\n    public getDamageBonusMedium() {\r\n        return Math.floor(this.strength / 3);\r\n    }\r\n    public getDamageBonusLarge() {\r\n        return Math.floor(this.strength / 2);\r\n    }\r\n}","import gun1 from './perks/gun1.json';\r\nimport gun2 from './perks/gun2.json';\r\nimport gun3 from './perks/gun3.json';\r\nimport gun4 from './perks/gun4.json';\r\n\r\n\r\nexport interface Perk {\r\n    name: string;\r\n    skill: string;\r\n    cost: number;\r\n    description: string;\r\n}\r\nexport const GetPerkList = (): Perk[] => {\r\n    return [\r\n        { ...gun1 },\r\n        { ...gun2 },\r\n        { ...gun3 },\r\n        { ...gun4 },\r\n        \r\n    ].sort(sortPerk);\r\n}\r\n\r\nconst sortPerk = (prevPerk:Perk, nextPerk:Perk) => {\r\n    if (prevPerk.skill !== nextPerk.skill) return prevPerk.skill > nextPerk.skill ? 1 : -1;\r\n    else return prevPerk.cost > nextPerk.cost ? 1 : -1;\r\n};","import React, { useReducer,useState } from 'react';\r\nimport { Field } from './Field';\r\nimport { Paper, Grid, Button } from '@material-ui/core';\r\nimport { Character } from './Character';\r\nimport { GetPerkList, Perk } from './Perks';\r\n\r\ninterface CharacterSheetProps {\r\n    initialCharacter: Character;\r\n    characterCallback: (c: Character) => void;\r\n}\r\n\r\nexport const CharacterSheet: React.FC<CharacterSheetProps> = (props) => {\r\n    const [character, dispatch] = useReducer(useCharacter, props.initialCharacter);\r\n    const [charJSON, setCharJSON] = useState('');\r\n\r\n    const perksList = GetPerkList();\r\n\r\n    const makeJSONText = () => {\r\n        const json = JSON.stringify({...character});\r\n        setCharJSON(json);\r\n    };\r\n\r\n    return <Paper style={{ textAlign: 'left' }}>\r\n        <Button onClick={() => props.characterCallback(character)}>exit</Button>\r\n        {charJSON !== '' ? <Button onClick={() => setCharJSON('')}>Close character data</Button> : null}\r\n        <Button onClick={() => makeJSONText()}>Save character data</Button>\r\n        <Paper>{charJSON}</Paper>\r\n        <Grid container spacing={3} >\r\n            <Grid item xs={12} sm={6}>\r\n                Character points used {character.getCalculatedPointsUsed()} / {character.getStartingPointsAvailable()} ({character.getMaximumPointsAvailable()})\r\n                <Field max={15} label='strength' value={character.strength} onChange={n => dispatch({ action: 'strength', value: n })}>Raw muscle strength</Field>\r\n                <Field max={15} label='agility' value={character.agility} onChange={n => dispatch({ action: 'agility', value: n })}>Steady hands, reflexes</Field>\r\n                <Field max={15} label='endurance' value={character.endurance} onChange={n => dispatch({ action: 'endurance', value: n })}>Ability to last long</Field>\r\n                <Field max={15} label='perception' value={character.perception} onChange={n => dispatch({ action: 'perception', value: n })}>eyesight, hearing, and how much you smell</Field>\r\n                <Field max={15} label='willpower' value={character.willpower} onChange={n => dispatch({ action: 'willpower', value: n })}>ability to say \"no\" when it's sooo good</Field>\r\n                <Field max={15} label='intelligence' value={character.intelligence} onChange={n => dispatch({ action: 'intelligence', value: n })}>big brainy boy</Field>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n                <Field label='age' max={90} min={15} value={character.age} onChange={n => dispatch({ action: 'age', value: n })}>Your age determines your starting, maximum experience, as well as experience multiplier</Field>\r\n                <Paper>Experience multiplier: {character.getExperienceMultiplier()}</Paper>\r\n                <Paper>Hit points: {character.getHitpoints()}</Paper>\r\n                <Paper>mana: {character.getMana()}</Paper>\r\n                <Paper>damage bonus small: {character.getDamageBonusSmall()}</Paper>\r\n                <Paper>damage bonus medium: {character.getDamageBonusMedium()}</Paper>\r\n                <Paper>damage bonus large: {character.getDamageBonusLarge()}</Paper>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n                {character.skills.map(s => {\r\n                    let modifier: number = 0;\r\n                    switch (s.attribute) {\r\n                        case 'strength': modifier = character.strength; break;\r\n                        case 'agility': modifier = character.agility; break;\r\n                        case 'endurance': modifier = character.endurance; break;\r\n                        case 'perception': modifier = character.perception; break;\r\n                        case 'willpower': modifier = character.willpower; break;\r\n                        case 'intelligence': modifier = character.intelligence; break;\r\n                    }\r\n                    return <Field\r\n                        modifier={modifier}\r\n                        max={40}\r\n                        min={0}\r\n                        label={s.name + ' ' + s.attribute.substring(0, 3).toUpperCase()}\r\n                        value={s.level}\r\n                        onChange={(n => dispatch({ action: 'skill', name: s.name, value: n }))}>\r\n                        {s.description}\r\n                        {perksList.filter(p => p.skill === s.name).map(p => {\r\n                            return <Button onClick={() => dispatch({ action: 'addperk', name: p.name, value: 0, perkToAdd: p })}>{p.name}</Button>;\r\n                        })}\r\n                    </Field>\r\n                })}\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n                <h1>Perks</h1>\r\n                {character.perks.map(perk => {\r\n                    return <p><b>{perk.name}</b> ({perk.cost}) {perk.description}</p>\r\n                })}\r\n            </Grid>\r\n        </Grid>\r\n    </Paper>;\r\n}\r\n\r\ninterface dispatcher {\r\n    action: string;\r\n    name?: string;\r\n    value: number;\r\n    perkToAdd?: Perk;\r\n}\r\n\r\nconst useCharacter = (state: Character, action: dispatcher): Character => {\r\n    switch (action.action) {\r\n        case 'strength': return new Character({ ...state, strength: action.value });\r\n        case 'agility': return new Character({ ...state, agility: action.value });\r\n        case 'endurance': return new Character({ ...state, endurance: action.value });\r\n        case 'willpower': return new Character({ ...state, willpower: action.value });\r\n        case 'perception': return new Character({ ...state, perception: action.value });\r\n        case 'intelligence': return new Character({ ...state, intelligence: action.value });\r\n        case 'age': return new Character({ ...state, age: action.value });\r\n        case 'skill':\r\n            let r = new Character({\r\n                ...state\r\n            });\r\n            r.skills[state.skills.findIndex(s => s.name === action.name)].level = action.value;\r\n            return r;\r\n    }\r\n    if (action.action === 'addperk') {\r\n        let r = new Character({\r\n            ...state\r\n        });\r\n        if (action.perkToAdd !== undefined) r.perks.push(action.perkToAdd);\r\n        return r;\r\n    }\r\n    else if (action.action === 'removeperk') {\r\n        let r = new Character({\r\n            ...state\r\n        });\r\n        if (action.perkToAdd !== undefined) {\r\n            let pta = action.perkToAdd;\r\n            r.perks = r.perks.filter(p => p.name !== pta.name);\r\n        }\r\n        return r;\r\n    }\r\n\r\n\r\n    return state;\r\n}","import React from 'react';\r\n\r\nconst PlayerManual: React.FC = () => {\r\n    return (<div>\r\n        <h1>Index</h1>\r\n        <ul>\r\n            <li>\r\n                How to make a character\r\n            </li>\r\n            <li>\r\n                Attributes\r\n            </li>\r\n            <li>\r\n                Skills\r\n            </li>\r\n            <li>\r\n                Perks\r\n            </li>\r\n        </ul>\r\n        <hr />\r\n        <div>\r\n            <h2>How to make a character</h2>\r\n            <h3>Step 1 - concept</h3>\r\n            <p>The first step is conceptual and mostly abstract, but will feed into the next steps. Begin by answering at least all of these questions.</p>\r\n            <h4>Where was my character born?</h4>\r\n            <h4>How old is my character currently?</h4>\r\n            <h4>What kind of upbringing did my character have?</h4>\r\n            <h4>How does my character's upbringing bias my character's point of view?</h4>\r\n            <h4>What major events happened in my characters life?</h4>\r\n            <h4>How did those events shape my characters personality?</h4>\r\n            <h4>What lessons and skills did my character learn from that?</h4>\r\n            <p>There may be more questions you want to ask depending on your answers.</p>\r\n            <h3>Step 2 - outlining your character</h3>\r\n            <p>Based on the answer in step 1...</p>\r\n            <h4>Adjust your age</h4>\r\n            <p>The older you start at the more character points (applicable experience) you start with.</p>\r\n            <p>Finally the younger you are the bigger your multiplier, whenever you gain character points in game you multiply them by this.</p>\r\n            <p>You also have a maximum character point ceiling, this is based off your current age and you can not exceed it</p>\r\n            <h4>Adjust your attributes</h4>\r\n            <p>They are as expensive as they are valuable. Choose with care. Save points for skills and perks</p>\r\n            <h4>Select between 2 and 4 \"main skills\" and as many additional secondary skills as you need.</h4>\r\n            <p>You'll want to put points into your main skills, note that the cost increases rapidly.\r\n                The cost for each step is what you have + 1\r\n                Save some character points for perks</p>\r\n            <p>Also notice that your attributes play a part in your skill total,\r\n                for example pilot is a perception skill,\r\n                when you roll for pilot you roll 2d10 + pilot + perception</p>\r\n            <h3>Step 3 - choose your perks</h3>\r\n            <p>Perks are specializations, they either grant new capabilities under a skill or make a specific skill usage more powerful/likely to succeed (skills have multiple uses)</p>\r\n            <p>Note that perks often come with skill requirements, and for skills that you don't put points into are often not worth taking.</p>\r\n        </div>\r\n    </div>);\r\n}\r\n\r\n\r\nexport default PlayerManual;","import React, { useState } from 'react';\r\nimport { GetSkillList } from './Skills';\r\nimport { Button } from '@material-ui/core';\r\nimport { GetPerkList } from './Perks';\r\n\r\nconst SkillPerkManual:React.FC = () => {\r\n    return <div>\r\n            <SkillSection />\r\n            <PerkSection />\r\n        </div>;\r\n}\r\n\r\nconst SkillSection = () => {\r\n    const [currentSkill, setCurrentSkill] = useState('');\r\n    return (<div>\r\n        <h2>Skills</h2>\r\n        {GetSkillList().map(skill => {\r\n            return (<div><h3><span style={{ display: 'inline-block', width: '200px' }}>{skill.name}</span> {currentSkill !== skill.name ?\r\n                <Button onClick={() => setCurrentSkill(skill.name)}>?</Button> :\r\n                <Button onClick={() => setCurrentSkill('')}>X</Button>} </h3>\r\n                {currentSkill === skill.name ? <div>{skill.description}</div> : null}</div>);\r\n        })}\r\n    </div>);\r\n}\r\n\r\nconst PerkSection = () => {\r\n    const [currentPerk, setCurrentPerk] = useState('');\r\n    return (<div>\r\n        <h2>Perks</h2>\r\n        {GetPerkList().map(perk => {\r\n            return (<div>\r\n                <h3><span style={{ display: 'inline-block', width: '200px' }}>{perk.name}</span> {currentPerk !== perk.name ?\r\n                <Button onClick={() => setCurrentPerk(perk.name)}>?</Button> :\r\n                <Button onClick={() => setCurrentPerk('')}>X</Button>} </h3>\r\n                {currentPerk === perk.name ? <div>\r\n                    <p><b>Cost</b>: {perk.cost}</p>\r\n                    <p><b>Skill</b>: {perk.skill}</p>\r\n                {perk.description}</div> : null}\r\n            </div>);\r\n        })}\r\n    </div>)\r\n}\r\n\r\nexport default SkillPerkManual;","import React from 'react';\r\n\r\nconst WorldAndLore: React.FC = () => {\r\n    return (<div>\r\n        <h1>World and Lore</h1>\r\n    </div>);\r\n}\r\n\r\n\r\nexport default WorldAndLore;","import React, { useState } from 'react';\nimport { CharacterSheet } from './components/CharacterSheet';\nimport './App.css';\nimport { Character, ICharacter } from './components/Character';\nimport { Button, DialogTitle } from '@material-ui/core';\nimport PlayerManual from './components/PlayerManual';\nimport SkillPerkManual from './components/SkillPerkManual';\nimport GameMaster from './components/WorldAndLore';\nimport WorldAndLore from './components/WorldAndLore';\n\nconst App: React.FC = () => {\n  const [viewMode, setViewMode] = useState('main');\n  const [character, setCharacter ] = useState(new Character());//new Character();\n  let options = ['view character sheet',\n    'player manual',\n    'game master',\n    'world & lore',\n    'skills & perks',\n    'about'];\n  const MainButton = () => <Button onClick={() => setViewMode('main')}>EXIT</Button>;\n\n  const loadCharacter = () => {\n    try {\n      console.info('attempting to load character');\n      const charData = prompt('paste character string here');\n      if (charData !== null)\n      {\n        const c = JSON.parse(charData) as ICharacter;\n        setCharacter(new Character({...c}));\n        setViewMode('main');\n        console.log('character was successfully loaded:', {...c});\n      } else console.log('no character info was pasted');\n    }\n    catch(error) {\n      console.error({error});\n    }\n  };\n\n\n  return (\n    <div className=\"App\">\n      <Conditional shouldView={viewMode === 'main'}>\n        <DialogTitle>Infinite Darkness</DialogTitle>\n        <Menu callback={(option) => setViewMode(option)} options={options} />\n      </Conditional>\n      <Conditional shouldView={viewMode === 'view character sheet'}>\n        <Button onClick={() => loadCharacter()}>Open Character</Button>\n        <CharacterSheet characterCallback={(c) => { setCharacter(c); setViewMode('main'); }} initialCharacter={character} />\n      </Conditional>\n      <Conditional shouldView={viewMode === 'player manual'}>\n        <MainButton />\n        <DialogTitle>Player manual</DialogTitle>\n        <PlayerManual />\n      </Conditional>\n      <Conditional shouldView={viewMode === 'game master'}>\n        <MainButton />\n        <GameMaster></GameMaster>\n      </Conditional>\n      <Conditional shouldView={viewMode === 'world & lore'}>\n        <MainButton />\n        <WorldAndLore></WorldAndLore>\n      </Conditional>\n      <Conditional shouldView={viewMode === 'skills & perks'}>\n        <MainButton />\n        <DialogTitle>About</DialogTitle>\n        <SkillPerkManual />\n      </Conditional>\n      <Conditional shouldView={viewMode === 'about'}>\n        <MainButton />\n        <h2>About</h2>\n        <h3>This is a work in progress</h3>\n        <p>Author: Thorvaldur Saemundsson</p>\n        <p>Technology: ReactJS, github pages</p>\n        <p>Project: Infinite Darkness, a sci-fi and fantasy game</p>\n        <p>Please formulate any complaints and suggestions in the form of a pull request ;)</p>\n        <span style={{ float: 'right', fontSize: '11px' }}>Copyright Thorvaldur Saemundsson</span>\n      </Conditional>\n    </div>\n  );\n}\ninterface ItemProp {\n  shouldView: boolean;\n}\n\nconst Conditional: React.FC<ItemProp> = ({ shouldView, children }) => {\n  if (shouldView) return <div style={{ textAlign: 'left', padding: '15px' }}>{children}</div>;\n  else return null;\n}\n\ninterface MenuProps {\n  callback: (option: string) => void;\n  options: string[];\n}\n\nconst Menu: React.FC<MenuProps> = (props) => {\n  return <div>{props.options.map(option => <Button onClick={() => props.callback(option)}>{option}</Button>)}</div>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}