{"version":3,"sources":["components/playermanual/Section.tsx","views/SkillPerkManual.tsx"],"names":["Section","title","tab","border","children","useState","isOpen","setIsOpen","tabSize","undefined","className","style","paddingLeft","onClick","perks","GetPerkList","SkillSection","GetSkillList","map","skill","name","description","useCases","uc","attribute","type","results","r","filter","p","perk","level","TraitSection","currentPerk","setCurrentPerk","GetTraits","trait","display","width","cost","SkillPerkManual"],"mappings":"wJAoBeA,IAXqB,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,IAAKC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SAAe,EAC1CC,oBAAS,GADiC,mBAC/DC,EAD+D,KACvDC,EADuD,KAElEC,EAAU,IAGd,YAFYC,IAARP,IACAM,EAAUN,EAAM,MACb,yBAAKQ,WAAsB,IAAXP,EAAkB,gBAAkB,GAAIQ,MAAO,CAAEC,YAAaJ,IACjF,kBAAC,IAAD,CAAQK,QAAS,kBAAMN,GAAWD,KAAUL,EAA5C,IAAoDK,EAAS,IAAM,KAClEA,GAAUF,K,0GCHbU,EAAQC,cACRC,EAAe,WACjB,OAAQ,6BACJ,sCACA,2IACCC,cAAeC,KAAI,SAAAC,GAAK,OACrB,oCAAE,kBAAC,IAAD,CAASlB,MAAOkB,EAAMC,KAAMjB,QAAQ,GAClC,kBAAC,IAAD,CAASD,IAAK,EAAGD,MAAM,OAAOE,QAAQ,GAClC,2BAAIgB,EAAME,aACV,oCACCF,EAAMG,SAASJ,KAAI,SAAAK,GAAE,OAAI,oCACtB,2BAAIA,EAAGH,MADe,OACDG,EAAGC,UADF,IACcD,EAAGE,KADjB,SAENhB,IAAfc,EAAGG,QAAwB,4BAAKH,EAAGG,QAAQR,KAAI,SAAAS,GAAC,OAAI,4BAAKA,OAAiB,KAC3E,2BAAIJ,EAAGF,kBAGf,kBAAC,IAAD,CAASnB,IAAK,EAAGD,MAAM,QAAQE,QAAQ,GACnC,qCACCW,EAAMc,QAAO,SAAAC,GAAC,OAAIA,EAAEV,QAAUA,EAAMC,QAAMF,KAAI,SAAAY,GAAI,OAAI,oCACnD,4BAAKA,EAAKV,MACV,mCAFmD,KAExB,GAAbU,EAAKC,MAAW,6BAC7BD,EAAKT,0BAQxBW,EAAe,WAAO,IAAD,EACe3B,mBAAS,IADxB,mBAChB4B,EADgB,KACHC,EADG,KAEvB,OAAQ,6BACJ,sCACA,4NACA,kLACA,6FACCC,cAAYjB,KAAI,SAAAkB,GACb,OAAQ,6BACJ,4BAAI,0BAAMzB,MAAO,CAAE0B,QAAS,eAAgBC,MAAO,UAAYF,EAAMhB,MAArE,IAAmFa,IAAgBG,EAAMhB,KACrG,kBAAC,IAAD,CAAQP,QAAS,kBAAMqB,EAAeE,EAAMhB,QAA5C,KACA,kBAAC,IAAD,CAAQP,QAAS,kBAAMqB,EAAe,MAAtC,KAFJ,KAGCD,IAAgBG,EAAMhB,KAAO,6BAC1B,2BAAG,mCAAH,KAAiBgB,EAAMG,MACtBH,EAAMf,aAAqB,WAMjCmB,UAvDmB,WAC9B,OAAO,6BACH,kBAACxB,EAAD,MACA,kBAACgB,EAAD","file":"static/js/8.72721a87.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from \"@material-ui/core\";\n\ninterface ISection {\n    title: string;\n    tab?: number;\n    border?: boolean | undefined;\n}\n\nconst Section: React.FC<ISection> = ({ title, tab, border, children }) => {\n    const [isOpen, setIsOpen] = useState(false);\n    let tabSize = '0';\n    if (tab !== undefined)\n        tabSize = tab + 'px';\n    return <div className={border === true ? 'bordersection' : ''} style={{ paddingLeft: tabSize }}>\n        <Button onClick={() => setIsOpen(!isOpen)}>{title} {isOpen ? '-' : '+'}</Button>\n        {isOpen && children}\n    </div>;\n}\n\nexport default Section;","import React, { useState } from 'react';\nimport { Button } from '@material-ui/core';\nimport { GetTraits } from '../components/traits/Traits';\nimport { GetPerkList } from '../components/GetPerkList';\nimport { GetSkillList } from '../components/GetSkillList';\nimport Section from '../components/playermanual/Section';\n\nconst SkillPerkManual: React.FC = () => {\n    return <div>\n        <SkillSection />\n        <TraitSection />\n    </div>;\n}\nconst perks = GetPerkList();\nconst SkillSection = () => {\n    return (<div>\n        <h2>Skills</h2>\n        <p>Skills are the generic things a character can learn to do, every skill gains a bonus from it's main ability.</p>\n        {GetSkillList().map(skill =>\n            <><Section title={skill.name} border={true}>\n                <Section tab={5} title='uses' border={true}>\n                    <p>{skill.description}</p>\n                    <h4>Uses</h4>\n                    {skill.useCases.map(uc => <>\n                        <b>{uc.name}</b> - ({uc.attribute} {uc.type})\n                        {uc.results !== undefined ? <ul>{uc.results.map(r => <li>{r}</li>)}</ul> : null}\n                        <p>{uc.description}</p>\n                    </>)}\n                </Section>\n                <Section tab={5} title='perks' border={true}>\n                    <h4>Perks</h4>\n                    {perks.filter(p => p.skill === skill.name).map(perk => <>\n                        <h5>{perk.name}</h5>\n                        <b>Cost</b>: {perk.level * 10}<br />\n                        {perk.description()}\n\n                    </>)}\n                </Section>\n            </Section></>)}\n    </div>);\n}\n\nconst TraitSection = () => {\n    const [currentPerk, setCurrentPerk] = useState('');\n    return (<div>\n        <h2>Traits</h2>\n        <p>Traits are innate characteristics of a character, they can not be added or removed after the start of the game, some traits are purely negative, others positive, some have a combined effect</p>\n        <p>Traits often describe a characters behavior, characters with these traits are expected to roleplay in a way which does not conflict with that trait</p>\n        <p>It is recommended that a character have between 1 and 3 traits</p>\n        {GetTraits().map(trait => {\n            return (<div>\n                <h3><span style={{ display: 'inline-block', width: '200px' }}>{trait.name}</span> {currentPerk !== trait.name ?\n                    <Button onClick={() => setCurrentPerk(trait.name)}>?</Button> :\n                    <Button onClick={() => setCurrentPerk('')}>X</Button>} </h3>\n                {currentPerk === trait.name ? <div>\n                    <p><b>Cost</b>: {trait.cost}</p>\n                    {trait.description}</div> : null}\n            </div>);\n        })}\n    </div>)\n}\n\nexport default SkillPerkManual;"],"sourceRoot":""}