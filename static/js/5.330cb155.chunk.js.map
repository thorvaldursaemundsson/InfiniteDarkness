{"version":3,"sources":["components/SkillPerkManual.tsx"],"names":["SkillSection","useState","currentSkill","setCurrentSkill","GetSkillList","map","skill","style","display","width","name","onClick","description","PerkSection","currentPerk","setCurrentPerk","GetPerkList","perk","cost","TraitSection","GetTraits","trait","SkillPerkManual"],"mappings":"0LAcMA,EAAe,WAAO,IAAD,EACiBC,mBAAS,IAD1B,mBAChBC,EADgB,KACFC,EADE,KAEvB,OAAQ,6BACJ,sCACA,2IACCC,cAAeC,KAAI,SAAAC,GAChB,OAAQ,6BAAK,4BAAI,0BAAMC,MAAO,CAAEC,QAAS,eAAgBC,MAAO,UAAYH,EAAMI,MAArE,IAAmFR,IAAiBI,EAAMI,KACnH,kBAAC,IAAD,CAAQC,QAAS,kBAAMR,EAAgBG,EAAMI,QAA7C,KACA,kBAAC,IAAD,CAAQC,QAAS,kBAAMR,EAAgB,MAAvC,KAFS,KAGRD,IAAiBI,EAAMI,KAAO,6BAAMJ,EAAMM,aAAqB,WAK1EC,EAAc,WAAO,IAAD,EACgBZ,mBAAS,IADzB,mBACfa,EADe,KACFC,EADE,KAEtB,OAAQ,6BACJ,qCACA,kNACCC,cAAcX,KAAI,SAAAY,GACf,OAAQ,6BACJ,4BAAI,0BAAMV,MAAO,CAAEC,QAAS,eAAgBC,MAAO,UAAYQ,EAAKP,MAApE,IAAkFI,IAAgBG,EAAKP,KACvG,kBAAC,IAAD,CAAQC,QAAS,kBAAMI,EAAeE,EAAKP,QAA3C,KACA,kBAAC,IAAD,CAAQC,QAAS,kBAAMI,EAAe,MAAtC,KAFA,KAGCD,IAAgBG,EAAKP,KAAO,6BACzB,2BAAG,mCAAH,KAAiBO,EAAKC,MACtB,2BAAG,oCAAH,KAAkBD,EAAKX,OAC1BW,EAAKL,eAAuB,WAMvCO,EAAe,WAAO,IAAD,EACelB,mBAAS,IADxB,mBAChBa,EADgB,KACHC,EADG,KAEvB,OAAQ,6BACJ,sCACA,4NACA,kLACA,6FACCK,cAAYf,KAAI,SAAAgB,GACb,OAAQ,6BACJ,4BAAI,0BAAMd,MAAO,CAAEC,QAAS,eAAgBC,MAAO,UAAYY,EAAMX,MAArE,IAAmFI,IAAgBO,EAAMX,KACzG,kBAAC,IAAD,CAAQC,QAAS,kBAAMI,EAAeM,EAAMX,QAA5C,KACA,kBAAC,IAAD,CAAQC,QAAS,kBAAMI,EAAe,MAAtC,KAFA,KAGCD,IAAgBO,EAAMX,KAAO,6BAC1B,2BAAG,mCAAH,KAAiBW,EAAMH,MAC1BG,EAAMT,aAAqB,WAM7BU,UA7DkB,WAC7B,OAAO,6BACC,kBAACtB,EAAD,MACA,kBAACa,EAAD,MACA,kBAACM,EAAD","file":"static/js/5.330cb155.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { GetSkillList } from './Skills';\nimport { Button } from '@material-ui/core';\nimport { GetTraits } from './traits/Traits';\nimport { GetPerkList } from './GetPerkList';\n\nconst SkillPerkManual:React.FC = () => {\n    return <div>\n            <SkillSection />\n            <PerkSection />\n            <TraitSection />\n        </div>;\n}\n\nconst SkillSection = () => {\n    const [currentSkill, setCurrentSkill] = useState('');\n    return (<div>\n        <h2>Skills</h2>\n        <p>Skills are the generic things a character can learn to do, every skill gains a bonus from it's main ability.</p>\n        {GetSkillList().map(skill => {\n            return (<div><h3><span style={{ display: 'inline-block', width: '200px' }}>{skill.name}</span> {currentSkill !== skill.name ?\n                <Button onClick={() => setCurrentSkill(skill.name)}>?</Button> :\n                <Button onClick={() => setCurrentSkill('')}>X</Button>} </h3>\n                {currentSkill === skill.name ? <div>{skill.description}</div> : null}</div>);\n        })}\n    </div>);\n}\n\nconst PerkSection = () => {\n    const [currentPerk, setCurrentPerk] = useState('');\n    return (<div>\n        <h2>Perks</h2>\n        <p>Perks are specializations and special abilities from skills, every perk either makes a specific usage of a skill better or enables the character to perform some extraordinary feat</p>\n        {GetPerkList().map(perk => {\n            return (<div>\n                <h3><span style={{ display: 'inline-block', width: '200px' }}>{perk.name}</span> {currentPerk !== perk.name ?\n                <Button onClick={() => setCurrentPerk(perk.name)}>?</Button> :\n                <Button onClick={() => setCurrentPerk('')}>X</Button>} </h3>\n                {currentPerk === perk.name ? <div>\n                    <p><b>Cost</b>: {perk.cost}</p>\n                    <p><b>Skill</b>: {perk.skill}</p>\n                {perk.description()}</div> : null}\n            </div>);\n        })}\n    </div>)\n}\n\nconst TraitSection = () => {\n    const [currentPerk, setCurrentPerk] = useState('');\n    return (<div>\n        <h2>Traits</h2>\n        <p>Traits are innate characteristics of a character, they can not be added or removed after the start of the game, some traits are purely negative, others positive, some have a combined effect</p>\n        <p>Traits often describe a characters behavior, characters with these traits are expected to roleplay in a way which does not conflict with that trait</p>\n        <p>It is recommended that a character have between 1 and 3 traits</p>\n        {GetTraits().map(trait => {\n            return (<div>\n                <h3><span style={{ display: 'inline-block', width: '200px' }}>{trait.name}</span> {currentPerk !== trait.name ?\n                <Button onClick={() => setCurrentPerk(trait.name)}>?</Button> :\n                <Button onClick={() => setCurrentPerk('')}>X</Button>} </h3>\n                {currentPerk === trait.name ? <div>\n                    <p><b>Cost</b>: {trait.cost}</p>\n                {trait.description}</div> : null}\n            </div>);\n        })}\n    </div>)\n}\n\nexport default SkillPerkManual;"],"sourceRoot":""}